--
-- PostgreSQL database dump
--

-- Dumped from database version 16.9
-- Dumped by pg_dump version 16.5

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Data for Name: categories; Type: TABLE DATA; Schema: public; Owner: neondb_owner
--

INSERT INTO public.categories VALUES (32, 'Logic Puzzles', 'Challenge your logical thinking with brain teasers', 'üß©', '#8B5CF6', 1);
INSERT INTO public.categories VALUES (33, 'Algorithms', 'Master fundamental algorithms and problem-solving techniques', 'üßÆ', '#3B82F6', 2);
INSERT INTO public.categories VALUES (34, 'Data Structures', 'Learn arrays, trees, graphs, and advanced data structures', 'üèóÔ∏è', '#10B981', 3);


--
-- Data for Name: puzzles; Type: TABLE DATA; Schema: public; Owner: neondb_owner
--

INSERT INTO public.puzzles VALUES (1847, 'Missing Number Finder', 'Find the missing number in a sequence', 'easy', 32, 100, 1, 'Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.', '[{"input": "[3,0,1]", "output": "2", "explanation": "n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number."}, {"input": "[0,1]", "output": "2", "explanation": "n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number."}]', 'n == nums.length, 1 <= n <= 10^4, 0 <= nums[i] <= n', '["Use the sum formula", "Expected sum - actual sum = missing number"]', '{"c": "int missingNumber(int* nums, int numsSize) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int missingNumber(int[] nums) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def missing_number(nums):\n    # Your code here\n    return 0"}', '{"c": "int missingNumber(int* nums, int numsSize) {\n    int n = numsSize;\n    int expectedSum = n * (n + 1) / 2;\n    int actualSum = 0;\n    for (int i = 0; i < numsSize; i++) {\n        actualSum += nums[i];\n    }\n    return expectedSum - actualSum;\n}", "java": "class Solution {\n    public int missingNumber(int[] nums) {\n        int n = nums.length;\n        int expectedSum = n * (n + 1) / 2;\n        int actualSum = 0;\n        for (int num : nums) {\n            actualSum += num;\n        }\n        return expectedSum - actualSum;\n    }\n}", "python": "def missing_number(nums):\n    n = len(nums)\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum"}', '[{"input": "[3,0,1]", "hidden": false, "expected": "2"}, {"input": "[0,1]", "hidden": false, "expected": "2"}, {"input": "[9,6,4,2,3,5,7,0,1]", "hidden": true, "expected": "8"}]', 1, 1);
INSERT INTO public.puzzles VALUES (1848, 'Palindrome Number', 'Check if a number is palindrome', 'easy', 32, 100, 1, 'Given an integer x, return true if x is palindrome integer. An integer is a palindrome when it reads the same backward as forward.', '[{"input": "121", "output": "true", "explanation": "121 reads as 121 from left to right and from right to left."}, {"input": "-121", "output": "false", "explanation": "From left to right, it reads -121. From right to left, it becomes 121-."}]', '-2^31 <= x <= 2^31 - 1', '["Convert to string and check", "Or reverse the number mathematically"]', '{"c": "bool isPalindrome(int x) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean isPalindrome(int x) {\n        // Your code here\n        return false;\n    }\n}", "python": "def is_palindrome(x):\n    # Your code here\n    return False"}', '{"c": "bool isPalindrome(int x) {\n    if (x < 0) return false;\n    long original = x, reversed = 0;\n    while (x > 0) {\n        reversed = reversed * 10 + x % 10;\n        x /= 10;\n    }\n    return original == reversed;\n}", "java": "class Solution {\n    public boolean isPalindrome(int x) {\n        if (x < 0) return false;\n        int original = x, reversed = 0;\n        while (x > 0) {\n            reversed = reversed * 10 + x % 10;\n            x /= 10;\n        }\n        return original == reversed;\n    }\n}", "python": "def is_palindrome(x):\n    if x < 0:\n        return False\n    return str(x) == str(x)[::-1]"}', '[{"input": "121", "hidden": false, "expected": "true"}, {"input": "-121", "hidden": false, "expected": "false"}, {"input": "10", "hidden": true, "expected": "false"}]', 2, 1);
INSERT INTO public.puzzles VALUES (1849, 'FizzBuzz', 'Print FizzBuzz sequence', 'easy', 32, 100, 1, 'Given an integer n, return a string array answer where answer[i] == "FizzBuzz" if i is divisible by 3 and 5, answer[i] == "Fizz" if i is divisible by 3, answer[i] == "Buzz" if i is divisible by 5, answer[i] == i (as a string) otherwise.', '[{"input": "3", "output": "[\"1\",\"2\",\"Fizz\"]", "explanation": ""}, {"input": "5", "output": "[\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]", "explanation": ""}]', '1 <= n <= 10^4', '["Use modulo operator", "Check divisibility by 15 first"]', '{"c": "char** fizzBuzz(int n, int* returnSize) {\n    // Your code here\n    *returnSize = n;\n    return NULL;\n}", "java": "class Solution {\n    public List<String> fizzBuzz(int n) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "def fizz_buzz(n):\n    # Your code here\n    return []"}', '{"c": "char** fizzBuzz(int n, int* returnSize) {\n    *returnSize = n;\n    char** result = malloc(n * sizeof(char*));\n    for (int i = 1; i <= n; i++) {\n        if (i % 15 == 0) {\n            result[i-1] = malloc(9);\n            strcpy(result[i-1], \"FizzBuzz\");\n        } else if (i % 3 == 0) {\n            result[i-1] = malloc(5);\n            strcpy(result[i-1], \"Fizz\");\n        } else if (i % 5 == 0) {\n            result[i-1] = malloc(5);\n            strcpy(result[i-1], \"Buzz\");\n        } else {\n            result[i-1] = malloc(12);\n            sprintf(result[i-1], \"%d\", i);\n        }\n    }\n    return result;\n}", "java": "class Solution {\n    public List<String> fizzBuzz(int n) {\n        List<String> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 15 == 0) {\n                result.add(\"FizzBuzz\");\n            } else if (i % 3 == 0) {\n                result.add(\"Fizz\");\n            } else if (i % 5 == 0) {\n                result.add(\"Buzz\");\n            } else {\n                result.add(String.valueOf(i));\n            }\n        }\n        return result;\n    }\n}", "python": "def fizz_buzz(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 15 == 0:\n            result.append(\"FizzBuzz\")\n        elif i % 3 == 0:\n            result.append(\"Fizz\")\n        elif i % 5 == 0:\n            result.append(\"Buzz\")\n        else:\n            result.append(str(i))\n    return result"}', '[{"input": "3", "hidden": false, "expected": "[\"1\",\"2\",\"Fizz\"]"}, {"input": "5", "hidden": false, "expected": "[\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]"}, {"input": "15", "hidden": true, "expected": "[\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]"}]', 3, 1);
INSERT INTO public.puzzles VALUES (1850, 'Roman to Integer', 'Convert Roman numerals to integer', 'easy', 32, 110, 1, 'Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M. Given a roman numeral, convert it to an integer.', '[{"input": "\"III\"", "output": "3", "explanation": "III = 3."}, {"input": "\"LVIII\"", "output": "58", "explanation": "L = 50, V= 5, III = 3."}]', '1 <= s.length <= 15, s contains only (''I'', ''V'', ''X'', ''L'', ''C'', ''D'', ''M'')', '["Use a map for values", "When a smaller numeral appears after a larger one, add. When before, subtract."]', '{"c": "int romanToInt(char* s) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int romanToInt(String s) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def roman_to_int(s):\n    # Your code here\n    return 0"}', '{"c": "int romanToInt(char* s) {\n    int values[256] = {0};\n    values[''I''] = 1; values[''V''] = 5; values[''X''] = 10;\n    values[''L''] = 50; values[''C''] = 100; values[''D''] = 500; values[''M''] = 1000;\n    \n    int result = 0;\n    int len = strlen(s);\n    \n    for (int i = 0; i < len; i++) {\n        if (i + 1 < len && values[s[i]] < values[s[i + 1]]) {\n            result -= values[s[i]];\n        } else {\n            result += values[s[i]];\n        }\n    }\n    return result;\n}", "java": "class Solution {\n    public int romanToInt(String s) {\n        Map<Character, Integer> map = new HashMap<>();\n        map.put(''I'', 1); map.put(''V'', 5); map.put(''X'', 10);\n        map.put(''L'', 50); map.put(''C'', 100); map.put(''D'', 500); map.put(''M'', 1000);\n        \n        int result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i + 1 < s.length() && map.get(s.charAt(i)) < map.get(s.charAt(i + 1))) {\n                result -= map.get(s.charAt(i));\n            } else {\n                result += map.get(s.charAt(i));\n            }\n        }\n        return result;\n    }\n}", "python": "def roman_to_int(s):\n    values = {''I'': 1, ''V'': 5, ''X'': 10, ''L'': 50, ''C'': 100, ''D'': 500, ''M'': 1000}\n    result = 0\n    \n    for i in range(len(s)):\n        if i + 1 < len(s) and values[s[i]] < values[s[i + 1]]:\n            result -= values[s[i]]\n        else:\n            result += values[s[i]]\n    \n    return result"}', '[{"input": "\"III\"", "hidden": false, "expected": "3"}, {"input": "\"LVIII\"", "hidden": false, "expected": "58"}, {"input": "\"MCMXC\"", "hidden": true, "expected": "1990"}]', 4, 1);
INSERT INTO public.puzzles VALUES (1851, 'Valid Parentheses', 'Check if parentheses are balanced', 'easy', 32, 120, 1, 'Given a string s containing just the characters ''('', '')'', ''{'', ''}'', ''['' and '']'', determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets and in the correct order.', '[{"input": "\"()\"", "output": "true", "explanation": ""}, {"input": "\"()[]{}\"", "output": "true", "explanation": ""}, {"input": "\"(]\"", "output": "false", "explanation": ""}]', '1 <= s.length <= 10^4', '["Use a stack", "Push opening brackets, pop when closing"]', '{"c": "bool isValid(char* s) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean isValid(String s) {\n        // Your code here\n        return false;\n    }\n}", "python": "def is_valid(s):\n    # Your code here\n    return False"}', '{"c": "bool isValid(char* s) {\n    char stack[10000];\n    int top = -1;\n    \n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ''('' || s[i] == ''['' || s[i] == ''{'') {\n            stack[++top] = s[i];\n        } else {\n            if (top == -1) return false;\n            char last = stack[top--];\n            if ((s[i] == '')'' && last != ''('') ||\n                (s[i] == '']'' && last != ''['') ||\n                (s[i] == ''}'' && last != ''{'')) {\n                return false;\n            }\n        }\n    }\n    return top == -1;\n}", "java": "class Solution {\n    public boolean isValid(String s) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char c : s.toCharArray()) {\n            if (c == ''('' || c == ''['' || c == ''{'') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) return false;\n                char last = stack.pop();\n                if ((c == '')'' && last != ''('') ||\n                    (c == '']'' && last != ''['') ||\n                    (c == ''}'' && last != ''{'')) {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "python": "def is_valid(s):\n    stack = []\n    mapping = {'')'': ''('', ''}'': ''{'', '']'': ''[''}\n    \n    for char in s:\n        if char in mapping:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        else:\n            stack.append(char)\n    \n    return not stack"}', '[{"input": "\"()\"", "hidden": false, "expected": "true"}, {"input": "\"()[]{}\"", "hidden": false, "expected": "true"}, {"input": "\"(]\"", "hidden": true, "expected": "false"}]', 5, 1);
INSERT INTO public.puzzles VALUES (1852, 'Longest Common Prefix', 'Find longest common prefix string', 'easy', 32, 120, 1, 'Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string "".', '[{"input": "[\"flower\",\"flow\",\"flight\"]", "output": "\"fl\"", "explanation": ""}, {"input": "[\"dog\",\"racecar\",\"car\"]", "output": "\"\"", "explanation": "There is no common prefix among the input strings."}]', '1 <= strs.length <= 200, 0 <= strs[i].length <= 200', '["Compare characters vertically", "Stop at first mismatch"]', '{"c": "char* longestCommonPrefix(char** strs, int strsSize) {\n    // Your code here\n    return \"\";\n}", "java": "class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        // Your code here\n        return \"\";\n    }\n}", "python": "def longest_common_prefix(strs):\n    # Your code here\n    return \"\""}', '{"c": "char* longestCommonPrefix(char** strs, int strsSize) {\n    if (strsSize == 0) return \"\";\n    \n    int minLen = strlen(strs[0]);\n    for (int i = 1; i < strsSize; i++) {\n        int len = strlen(strs[i]);\n        if (len < minLen) minLen = len;\n    }\n    \n    char* result = malloc(minLen + 1);\n    int prefixLen = 0;\n    \n    for (int i = 0; i < minLen; i++) {\n        char c = strs[0][i];\n        for (int j = 1; j < strsSize; j++) {\n            if (strs[j][i] != c) {\n                result[prefixLen] = ''\\0'';\n                return result;\n            }\n        }\n        result[prefixLen++] = c;\n    }\n    result[prefixLen] = ''\\0'';\n    return result;\n}", "java": "class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if (strs.length == 0) return \"\";\n        \n        String prefix = strs[0];\n        for (int i = 1; i < strs.length; i++) {\n            while (strs[i].indexOf(prefix) != 0) {\n                prefix = prefix.substring(0, prefix.length() - 1);\n                if (prefix.isEmpty()) return \"\";\n            }\n        }\n        return prefix;\n    }\n}", "python": "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    \n    prefix = strs[0]\n    for string in strs[1:]:\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix"}', '[{"input": "[\"flower\",\"flow\",\"flight\"]", "hidden": false, "expected": "\"fl\""}, {"input": "[\"dog\",\"racecar\",\"car\"]", "hidden": false, "expected": "\"\""}, {"input": "[\"interspecies\",\"interstellar\",\"interstate\"]", "hidden": true, "expected": "\"inters\""}]', 11, 1);
INSERT INTO public.puzzles VALUES (1853, 'Power of Two', 'Check if number is power of two', 'easy', 32, 120, 1, 'Given an integer n, return true if it is a power of two. Otherwise, return false. An integer n is a power of two, if there exists an integer x such that n == 2^x.', '[{"input": "1", "output": "true", "explanation": "2^0 = 1"}, {"input": "16", "output": "true", "explanation": "2^4 = 16"}, {"input": "3", "output": "false", "explanation": ""}]', '-2^31 <= n <= 2^31 - 1', '["Use bit manipulation", "Power of 2 has only one bit set"]', '{"c": "bool isPowerOfTwo(int n) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean isPowerOfTwo(int n) {\n        // Your code here\n        return false;\n    }\n}", "python": "def is_power_of_two(n):\n    # Your code here\n    return False"}', '{"c": "bool isPowerOfTwo(int n) {\n    return n > 0 && (n & (n - 1)) == 0;\n}", "java": "class Solution {\n    public boolean isPowerOfTwo(int n) {\n        return n > 0 && (n & (n - 1)) == 0;\n    }\n}", "python": "def is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0"}', '[{"input": "1", "hidden": false, "expected": "true"}, {"input": "16", "hidden": false, "expected": "true"}, {"input": "3", "hidden": true, "expected": "false"}]', 12, 1);
INSERT INTO public.puzzles VALUES (1854, 'Two Sum', 'Find two numbers that add up to target', 'easy', 33, 100, 1, 'Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.', '[{"input": "nums = [2,7,11,15], target = 9", "output": "[0,1]", "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."}, {"input": "nums = [3,2,4], target = 6", "output": "[1,2]", "explanation": ""}]', '2 <= nums.length <= 10^4, -10^9 <= nums[i] <= 10^9', '["Use hash map", "Store complement and index"]', '{"c": "int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    // Your code here\n    *returnSize = 2;\n    return NULL;\n}", "java": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Your code here\n        return new int[0];\n    }\n}", "python": "def two_sum(nums, target):\n    # Your code here\n    return []"}', '{"c": "int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    *returnSize = 2;\n    int* result = malloc(2 * sizeof(int));\n    \n    for (int i = 0; i < numsSize - 1; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result;\n}", "java": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        \n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[] { map.get(complement), i };\n            }\n            map.put(nums[i], i);\n        }\n        return new int[0];\n    }\n}", "python": "def two_sum(nums, target):\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []"}', '[{"input": "[2,7,11,15], 9", "hidden": false, "expected": "[0,1]"}, {"input": "[3,2,4], 6", "hidden": false, "expected": "[1,2]"}, {"input": "[3,3], 6", "hidden": true, "expected": "[0,1]"}]', 13, 1);
INSERT INTO public.puzzles VALUES (1855, 'Reverse Integer', 'Reverse digits of an integer', 'medium', 33, 200, 2, 'Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0.', '[{"input": "123", "output": "321", "explanation": ""}, {"input": "-123", "output": "-321", "explanation": ""}, {"input": "120", "output": "21", "explanation": ""}]', '-2^31 <= x <= 2^31 - 1', '["Use modulo to get digits", "Check for overflow"]', '{"c": "int reverse(int x) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int reverse(int x) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def reverse_integer(x):\n    # Your code here\n    return 0"}', '{"c": "int reverse(int x) {\n    long result = 0;\n    while (x != 0) {\n        result = result * 10 + x % 10;\n        x /= 10;\n    }\n    return (result < INT_MIN || result > INT_MAX) ? 0 : result;\n}", "java": "class Solution {\n    public int reverse(int x) {\n        long result = 0;\n        while (x != 0) {\n            result = result * 10 + x % 10;\n            x /= 10;\n        }\n        return (result < Integer.MIN_VALUE || result > Integer.MAX_VALUE) ? 0 : (int)result;\n    }\n}", "python": "def reverse_integer(x):\n    sign = -1 if x < 0 else 1\n    x = abs(x)\n    result = 0\n    \n    while x:\n        result = result * 10 + x % 10\n        x //= 10\n    \n    result *= sign\n    return result if -2**31 <= result <= 2**31 - 1 else 0"}', '[{"input": "123", "hidden": false, "expected": "321"}, {"input": "-123", "hidden": false, "expected": "-321"}, {"input": "1534236469", "hidden": true, "expected": "0"}]', 14, 2);
INSERT INTO public.puzzles VALUES (1856, 'Merge Two Sorted Lists', 'Merge two sorted linked lists', 'easy', 34, 120, 1, 'You are given the heads of two sorted linked lists list1 and list2. Merge the two lists in a sorted list. The list should be made by splicing together the nodes of the first two lists.', '[{"input": "list1 = [1,2,4], list2 = [1,3,4]", "output": "[1,1,2,3,4,4]", "explanation": ""}, {"input": "list1 = [], list2 = []", "output": "[]", "explanation": ""}]', 'The number of nodes in both lists is in the range [0, 50]', '["Use dummy head", "Compare values and link smaller node"]', '{"c": "struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        // Your code here\n        return null;\n    }\n}", "python": "def merge_two_lists(list1, list2):\n    # Your code here\n    return None"}', '{"c": "struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {\n    struct ListNode dummy;\n    struct ListNode* current = &dummy;\n    \n    while (list1 && list2) {\n        if (list1->val <= list2->val) {\n            current->next = list1;\n            list1 = list1->next;\n        } else {\n            current->next = list2;\n            list2 = list2->next;\n        }\n        current = current->next;\n    }\n    \n    current->next = list1 ? list1 : list2;\n    return dummy.next;\n}", "java": "class Solution {\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n        ListNode dummy = new ListNode(0);\n        ListNode current = dummy;\n        \n        while (list1 != null && list2 != null) {\n            if (list1.val <= list2.val) {\n                current.next = list1;\n                list1 = list1.next;\n            } else {\n                current.next = list2;\n                list2 = list2.next;\n            }\n            current = current.next;\n        }\n        \n        current.next = list1 != null ? list1 : list2;\n        return dummy.next;\n    }\n}", "python": "def merge_two_lists(list1, list2):\n    dummy = ListNode(0)\n    current = dummy\n    \n    while list1 and list2:\n        if list1.val <= list2.val:\n            current.next = list1\n            list1 = list1.next\n        else:\n            current.next = list2\n            list2 = list2.next\n        current = current.next\n    \n    current.next = list1 or list2\n    return dummy.next"}', '[{"input": "[1,2,4], [1,3,4]", "hidden": false, "expected": "[1,1,2,3,4,4]"}, {"input": "[], []", "hidden": false, "expected": "[]"}, {"input": "[], [0]", "hidden": true, "expected": "[0]"}]', 15, 1);
INSERT INTO public.puzzles VALUES (1857, 'Single Number', 'Find the single number in array', 'easy', 32, 130, 1, 'Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.', '[{"input": "[2,2,1]", "output": "1", "explanation": ""}, {"input": "[4,1,2,1,2]", "output": "4", "explanation": ""}]', '1 <= nums.length <= 3 * 10^4', '["Use XOR operation", "XOR of same numbers is 0"]', '{"c": "int singleNumber(int* nums, int numsSize) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int singleNumber(int[] nums) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def single_number(nums):\n    # Your code here\n    return 0"}', '{"c": "int singleNumber(int* nums, int numsSize) {\n    int result = 0;\n    for (int i = 0; i < numsSize; i++) {\n        result ^= nums[i];\n    }\n    return result;\n}", "java": "class Solution {\n    public int singleNumber(int[] nums) {\n        int result = 0;\n        for (int num : nums) {\n            result ^= num;\n        }\n        return result;\n    }\n}", "python": "def single_number(nums):\n    result = 0\n    for num in nums:\n        result ^= num\n    return result"}', '[{"input": "[2,2,1]", "hidden": false, "expected": "1"}, {"input": "[4,1,2,1,2]", "hidden": false, "expected": "4"}, {"input": "[1]", "hidden": true, "expected": "1"}]', 16, 1);
INSERT INTO public.puzzles VALUES (1858, 'Move Zeroes', 'Move all zeros to end of array', 'easy', 32, 120, 1, 'Given an integer array nums, move all 0''s to the end of it while maintaining the relative order of the non-zero elements.', '[{"input": "[0,1,0,3,12]", "output": "[1,3,12,0,0]", "explanation": ""}, {"input": "[0]", "output": "[0]", "explanation": ""}]', '1 <= nums.length <= 10^4', '["Use two pointers", "Swap non-zero elements forward"]', '{"c": "void moveZeroes(int* nums, int numsSize) {\n    // Your code here\n}", "java": "class Solution {\n    public void moveZeroes(int[] nums) {\n        // Your code here\n    }\n}", "python": "def move_zeroes(nums):\n    # Your code here\n    pass"}', '{"c": "void moveZeroes(int* nums, int numsSize) {\n    int writeIndex = 0;\n    for (int i = 0; i < numsSize; i++) {\n        if (nums[i] != 0) {\n            nums[writeIndex++] = nums[i];\n        }\n    }\n    while (writeIndex < numsSize) {\n        nums[writeIndex++] = 0;\n    }\n}", "java": "class Solution {\n    public void moveZeroes(int[] nums) {\n        int writeIndex = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] != 0) {\n                nums[writeIndex++] = nums[i];\n            }\n        }\n        while (writeIndex < nums.length) {\n            nums[writeIndex++] = 0;\n        }\n    }\n}", "python": "def move_zeroes(nums):\n    write_index = 0\n    for i in range(len(nums)):\n        if nums[i] != 0:\n            nums[write_index] = nums[i]\n            write_index += 1\n    \n    while write_index < len(nums):\n        nums[write_index] = 0\n        write_index += 1"}', '[{"input": "[0,1,0,3,12]", "hidden": false, "expected": "[1,3,12,0,0]"}, {"input": "[0]", "hidden": false, "expected": "[0]"}, {"input": "[1,2,3]", "hidden": true, "expected": "[1,2,3]"}]', 12, 2);
INSERT INTO public.puzzles VALUES (1859, 'Find Disappeared Numbers', 'Find numbers missing from array', 'easy', 32, 130, 1, 'Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.', '[{"input": "[4,3,2,7,8,2,3,1]", "output": "[5,6]", "explanation": ""}, {"input": "[1,1]", "output": "[2]", "explanation": ""}]', 'n == nums.length, 1 <= n <= 10^5', '["Mark visited indices", "Use array indices as hash"]', '{"c": "int* findDisappearedNumbers(int* nums, int numsSize, int* returnSize) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "def find_disappeared_numbers(nums):\n    # Your code here\n    return []"}', '{"c": "int* findDisappearedNumbers(int* nums, int numsSize, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        int index = abs(nums[i]) - 1;\n        if (nums[index] > 0) {\n            nums[index] = -nums[index];\n        }\n    }\n    \n    int* result = malloc(numsSize * sizeof(int));\n    *returnSize = 0;\n    \n    for (int i = 0; i < numsSize; i++) {\n        if (nums[i] > 0) {\n            result[(*returnSize)++] = i + 1;\n        }\n    }\n    return result;\n}", "java": "class Solution {\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        for (int i = 0; i < nums.length; i++) {\n            int index = Math.abs(nums[i]) - 1;\n            if (nums[index] > 0) {\n                nums[index] = -nums[index];\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] > 0) {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}", "python": "def find_disappeared_numbers(nums):\n    for i in range(len(nums)):\n        index = abs(nums[i]) - 1\n        if nums[index] > 0:\n            nums[index] = -nums[index]\n    \n    result = []\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            result.append(i + 1)\n    \n    return result"}', '[{"input": "[4,3,2,7,8,2,3,1]", "hidden": false, "expected": "[5,6]"}, {"input": "[1,1]", "hidden": false, "expected": "[2]"}, {"input": "[1,2,3,4,5]", "hidden": true, "expected": "[]"}]', 13, 2);
INSERT INTO public.puzzles VALUES (1860, 'Binary Search', 'Search target in sorted array', 'easy', 33, 120, 1, 'Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.', '[{"input": "nums = [-1,0,3,5,9,12], target = 9", "output": "4", "explanation": "9 exists in nums and its index is 4"}, {"input": "nums = [-1,0,3,5,9,12], target = 2", "output": "-1", "explanation": "2 does not exist in nums so return -1"}]', '1 <= nums.length <= 10^4, All the integers in nums are unique', '["Use divide and conquer", "Compare with middle element"]', '{"c": "int search(int* nums, int numsSize, int target) {\n    // Your code here\n    return -1;\n}", "java": "class Solution {\n    public int search(int[] nums, int target) {\n        // Your code here\n        return -1;\n    }\n}", "python": "def search(nums, target):\n    # Your code here\n    return -1"}', '{"c": "int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if (nums[mid] == target) {\n            return mid;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return -1;\n}", "java": "class Solution {\n    public int search(int[] nums, int target) {\n        int left = 0, right = nums.length - 1;\n        \n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            \n            if (nums[mid] == target) {\n                return mid;\n            } else if (nums[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return -1;\n    }\n}", "python": "def search(nums, target):\n    left, right = 0, len(nums) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"}', '[{"input": "[-1,0,3,5,9,12], 9", "hidden": false, "expected": "4"}, {"input": "[-1,0,3,5,9,12], 2", "hidden": false, "expected": "-1"}, {"input": "[5], 5", "hidden": true, "expected": "0"}]', 14, 1);
INSERT INTO public.puzzles VALUES (1861, 'First Bad Version', 'Find first bad version using binary search', 'easy', 33, 130, 1, 'You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad. Given n versions [1, 2, ..., n], you need to find out the first bad one.', '[{"input": "n = 5, bad = 4", "output": "4", "explanation": "call isBadVersion(3) -> false, call isBadVersion(5) -> true, call isBadVersion(4) -> true"}]', '1 <= bad <= n <= 2^31 - 1', '["Use binary search", "Find leftmost bad version"]', '{"c": "int firstBadVersion(int n) {\n    // Your code here\n    return 1;\n}", "java": "class Solution {\n    public int firstBadVersion(int n) {\n        // Your code here\n        return 1;\n    }\n}", "python": "def first_bad_version(n):\n    # Your code here\n    return 1"}', '{"c": "int firstBadVersion(int n) {\n    int left = 1, right = n;\n    \n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        \n        if (isBadVersion(mid)) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}", "java": "class Solution {\n    public int firstBadVersion(int n) {\n        int left = 1, right = n;\n        \n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            \n            if (isBadVersion(mid)) {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n}", "python": "def first_bad_version(n):\n    left, right = 1, n\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        if isBadVersion(mid):\n            right = mid\n        else:\n            left = mid + 1\n    \n    return left"}', '[{"input": "5, 4", "hidden": false, "expected": "4"}, {"input": "1, 1", "hidden": false, "expected": "1"}, {"input": "2, 1", "hidden": true, "expected": "1"}]', 15, 1);
INSERT INTO public.puzzles VALUES (1862, 'Remove Duplicates from Sorted Array', 'Remove duplicates in-place', 'easy', 34, 120, 1, 'Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. Return the number of unique elements in nums.', '[{"input": "[1,1,2]", "output": "2, nums = [1,2,_]", "explanation": "Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively."}, {"input": "[0,0,1,1,1,2,2,3,3,4]", "output": "5, nums = [0,1,2,3,4,_,_,_,_,_]", "explanation": ""}]', '1 <= nums.length <= 3 * 10^4', '["Use two pointers", "Overwrite duplicates"]', '{"c": "int removeDuplicates(int* nums, int numsSize) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int removeDuplicates(int[] nums) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def remove_duplicates(nums):\n    # Your code here\n    return 0"}', '{"c": "int removeDuplicates(int* nums, int numsSize) {\n    if (numsSize == 0) return 0;\n    \n    int writeIndex = 1;\n    for (int i = 1; i < numsSize; i++) {\n        if (nums[i] != nums[i - 1]) {\n            nums[writeIndex++] = nums[i];\n        }\n    }\n    return writeIndex;\n}", "java": "class Solution {\n    public int removeDuplicates(int[] nums) {\n        if (nums.length == 0) return 0;\n        \n        int writeIndex = 1;\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] != nums[i - 1]) {\n                nums[writeIndex++] = nums[i];\n            }\n        }\n        return writeIndex;\n    }\n}", "python": "def remove_duplicates(nums):\n    if not nums:\n        return 0\n    \n    write_index = 1\n    for i in range(1, len(nums)):\n        if nums[i] != nums[i - 1]:\n            nums[write_index] = nums[i]\n            write_index += 1\n    \n    return write_index"}', '[{"input": "[1,1,2]", "hidden": false, "expected": "2"}, {"input": "[0,0,1,1,1,2,2,3,3,4]", "hidden": false, "expected": "5"}, {"input": "[1]", "hidden": true, "expected": "1"}]', 16, 1);
INSERT INTO public.puzzles VALUES (1863, 'Maximum Subarray', 'Find maximum sum subarray', 'medium', 34, 200, 2, 'Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.', '[{"input": "[-2,1,-3,4,-1,2,1,-5,4]", "output": "6", "explanation": "[4,-1,2,1] has the largest sum = 6."}, {"input": "[1]", "output": "1", "explanation": ""}, {"input": "[5,4,-1,7,8]", "output": "23", "explanation": ""}]', '1 <= nums.length <= 10^5', '["Use Kadane''s algorithm", "Track current and maximum sum"]', '{"c": "int maxSubArray(int* nums, int numsSize) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int maxSubArray(int[] nums) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def max_sub_array(nums):\n    # Your code here\n    return 0"}', '{"c": "int maxSubArray(int* nums, int numsSize) {\n    int maxSum = nums[0];\n    int currentSum = nums[0];\n    \n    for (int i = 1; i < numsSize; i++) {\n        currentSum = fmax(nums[i], currentSum + nums[i]);\n        maxSum = fmax(maxSum, currentSum);\n    }\n    return maxSum;\n}", "java": "class Solution {\n    public int maxSubArray(int[] nums) {\n        int maxSum = nums[0];\n        int currentSum = nums[0];\n        \n        for (int i = 1; i < nums.length; i++) {\n            currentSum = Math.max(nums[i], currentSum + nums[i]);\n            maxSum = Math.max(maxSum, currentSum);\n        }\n        return maxSum;\n    }\n}", "python": "def max_sub_array(nums):\n    max_sum = current_sum = nums[0]\n    \n    for i in range(1, len(nums)):\n        current_sum = max(nums[i], current_sum + nums[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"}', '[{"input": "[-2,1,-3,4,-1,2,1,-5,4]", "hidden": false, "expected": "6"}, {"input": "[1]", "hidden": false, "expected": "1"}, {"input": "[-1]", "hidden": true, "expected": "-1"}]', 17, 2);
INSERT INTO public.puzzles VALUES (1864, 'Climbing Stairs', 'Count ways to climb stairs', 'easy', 32, 140, 1, 'You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?', '[{"input": "2", "output": "2", "explanation": "There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps"}, {"input": "3", "output": "3", "explanation": "There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step"}]', '1 <= n <= 45', '["Use dynamic programming", "F(n) = F(n-1) + F(n-2)"]', '{"c": "int climbStairs(int n) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int climbStairs(int n) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def climb_stairs(n):\n    # Your code here\n    return 0"}', '{"c": "int climbStairs(int n) {\n    if (n <= 1) return 1;\n    \n    int prev2 = 1, prev1 = 1;\n    for (int i = 2; i <= n; i++) {\n        int current = prev1 + prev2;\n        prev2 = prev1;\n        prev1 = current;\n    }\n    return prev1;\n}", "java": "class Solution {\n    public int climbStairs(int n) {\n        if (n <= 1) return 1;\n        \n        int prev2 = 1, prev1 = 1;\n        for (int i = 2; i <= n; i++) {\n            int current = prev1 + prev2;\n            prev2 = prev1;\n            prev1 = current;\n        }\n        return prev1;\n    }\n}", "python": "def climb_stairs(n):\n    if n <= 1:\n        return 1\n    \n    prev2, prev1 = 1, 1\n    for i in range(2, n + 1):\n        current = prev1 + prev2\n        prev2, prev1 = prev1, current\n    \n    return prev1"}', '[{"input": "2", "hidden": false, "expected": "2"}, {"input": "3", "hidden": false, "expected": "3"}, {"input": "5", "hidden": true, "expected": "8"}]', 18, 2);
INSERT INTO public.puzzles VALUES (1865, 'Best Time to Buy and Sell Stock', 'Find maximum profit from stock prices', 'easy', 32, 140, 1, 'You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction.', '[{"input": "[7,1,5,3,6,4]", "output": "5", "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5."}, {"input": "[7,6,4,3,1]", "output": "0", "explanation": "In this case, no transaction is done, i.e. max profit = 0."}]', '1 <= prices.length <= 10^5', '["Track minimum price seen so far", "Calculate profit at each step"]', '{"c": "int maxProfit(int* prices, int pricesSize) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int maxProfit(int[] prices) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def max_profit(prices):\n    # Your code here\n    return 0"}', '{"c": "int maxProfit(int* prices, int pricesSize) {\n    if (pricesSize < 2) return 0;\n    \n    int minPrice = prices[0];\n    int maxProfitSoFar = 0;\n    \n    for (int i = 1; i < pricesSize; i++) {\n        if (prices[i] < minPrice) {\n            minPrice = prices[i];\n        } else {\n            int profit = prices[i] - minPrice;\n            if (profit > maxProfitSoFar) {\n                maxProfitSoFar = profit;\n            }\n        }\n    }\n    return maxProfitSoFar;\n}", "java": "class Solution {\n    public int maxProfit(int[] prices) {\n        if (prices.length < 2) return 0;\n        \n        int minPrice = prices[0];\n        int maxProfit = 0;\n        \n        for (int i = 1; i < prices.length; i++) {\n            if (prices[i] < minPrice) {\n                minPrice = prices[i];\n            } else {\n                maxProfit = Math.max(maxProfit, prices[i] - minPrice);\n            }\n        }\n        return maxProfit;\n    }\n}", "python": "def max_profit(prices):\n    if len(prices) < 2:\n        return 0\n    \n    min_price = prices[0]\n    max_profit = 0\n    \n    for i in range(1, len(prices)):\n        if prices[i] < min_price:\n            min_price = prices[i]\n        else:\n            max_profit = max(max_profit, prices[i] - min_price)\n    \n    return max_profit"}', '[{"input": "[7,1,5,3,6,4]", "hidden": false, "expected": "5"}, {"input": "[7,6,4,3,1]", "hidden": false, "expected": "0"}, {"input": "[1,2,3,4,5]", "hidden": true, "expected": "4"}]', 19, 2);
INSERT INTO public.puzzles VALUES (1866, 'Valid Anagram', 'Check if two strings are anagrams', 'easy', 32, 130, 1, 'Given two strings s and t, return true if t is an anagram of s, and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.', '[{"input": "s = \"anagram\", t = \"nagaram\"", "output": "true", "explanation": ""}, {"input": "s = \"rat\", t = \"car\"", "output": "false", "explanation": ""}]', '1 <= s.length, t.length <= 5 * 10^4', '["Count character frequencies", "Compare frequency maps"]', '{"c": "bool isAnagram(char* s, char* t) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean isAnagram(String s, String t) {\n        // Your code here\n        return false;\n    }\n}", "python": "def is_anagram(s, t):\n    # Your code here\n    return False"}', '{"c": "bool isAnagram(char* s, char* t) {\n    if (strlen(s) != strlen(t)) return false;\n    \n    int count[26] = {0};\n    \n    for (int i = 0; s[i]; i++) {\n        count[s[i] - ''a'']++;\n        count[t[i] - ''a'']--;\n    }\n    \n    for (int i = 0; i < 26; i++) {\n        if (count[i] != 0) return false;\n    }\n    return true;\n}", "java": "class Solution {\n    public boolean isAnagram(String s, String t) {\n        if (s.length() != t.length()) return false;\n        \n        int[] count = new int[26];\n        \n        for (int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - ''a'']++;\n            count[t.charAt(i) - ''a'']--;\n        }\n        \n        for (int c : count) {\n            if (c != 0) return false;\n        }\n        return true;\n    }\n}", "python": "def is_anagram(s, t):\n    if len(s) != len(t):\n        return False\n    \n    from collections import Counter\n    return Counter(s) == Counter(t)"}', '[{"input": "\"anagram\", \"nagaram\"", "hidden": false, "expected": "true"}, {"input": "\"rat\", \"car\"", "hidden": false, "expected": "false"}, {"input": "\"listen\", \"silent\"", "hidden": true, "expected": "true"}]', 20, 1);
INSERT INTO public.puzzles VALUES (1867, 'Search Insert Position', 'Find target insert position in sorted array', 'easy', 33, 130, 1, 'Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.', '[{"input": "nums = [1,3,5,6], target = 5", "output": "2", "explanation": ""}, {"input": "nums = [1,3,5,6], target = 2", "output": "1", "explanation": ""}, {"input": "nums = [1,3,5,6], target = 7", "output": "4", "explanation": ""}]', '1 <= nums.length <= 10^4', '["Use binary search", "Find leftmost position"]', '{"c": "int searchInsert(int* nums, int numsSize, int target) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int searchInsert(int[] nums, int target) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def search_insert(nums, target):\n    # Your code here\n    return 0"}', '{"c": "int searchInsert(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if (nums[mid] == target) {\n            return mid;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}", "java": "class Solution {\n    public int searchInsert(int[] nums, int target) {\n        int left = 0, right = nums.length - 1;\n        \n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            \n            if (nums[mid] == target) {\n                return mid;\n            } else if (nums[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;\n    }\n}", "python": "def search_insert(nums, target):\n    left, right = 0, len(nums) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return left"}', '[{"input": "[1,3,5,6], 5", "hidden": false, "expected": "2"}, {"input": "[1,3,5,6], 2", "hidden": false, "expected": "1"}, {"input": "[1,3,5,6], 0", "hidden": true, "expected": "0"}]', 21, 1);
INSERT INTO public.puzzles VALUES (1868, 'Sqrt(x)', 'Compute integer square root', 'easy', 33, 140, 1, 'Given a non-negative integer x, compute and return the square root of x. Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.', '[{"input": "4", "output": "2", "explanation": "The square root of 4 is 2, so we return 2."}, {"input": "8", "output": "2", "explanation": "The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned."}]', '0 <= x <= 2^31 - 1', '["Use binary search", "Search for largest number whose square <= x"]', '{"c": "int mySqrt(int x) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int mySqrt(int x) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def my_sqrt(x):\n    # Your code here\n    return 0"}', '{"c": "int mySqrt(int x) {\n    if (x < 2) return x;\n    \n    long left = 1, right = x / 2;\n    \n    while (left <= right) {\n        long mid = left + (right - left) / 2;\n        long square = mid * mid;\n        \n        if (square == x) {\n            return mid;\n        } else if (square < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return right;\n}", "java": "class Solution {\n    public int mySqrt(int x) {\n        if (x < 2) return x;\n        \n        long left = 1, right = x / 2;\n        \n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            long square = mid * mid;\n            \n            if (square == x) {\n                return (int)mid;\n            } else if (square < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return (int)right;\n    }\n}", "python": "def my_sqrt(x):\n    if x < 2:\n        return x\n    \n    left, right = 1, x // 2\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        square = mid * mid\n        \n        if square == x:\n            return mid\n        elif square < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return right"}', '[{"input": "4", "hidden": false, "expected": "2"}, {"input": "8", "hidden": false, "expected": "2"}, {"input": "1", "hidden": true, "expected": "1"}]', 22, 1);
INSERT INTO public.puzzles VALUES (1869, 'Contains Duplicate', 'Check if array contains duplicates', 'easy', 34, 120, 1, 'Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.', '[{"input": "[1,2,3,1]", "output": "true", "explanation": ""}, {"input": "[1,2,3,4]", "output": "false", "explanation": ""}, {"input": "[1,1,1,3,3,4,3,2,4,2]", "output": "true", "explanation": ""}]', '1 <= nums.length <= 10^5', '["Use hash set", "Check if element already seen"]', '{"c": "bool containsDuplicate(int* nums, int numsSize) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean containsDuplicate(int[] nums) {\n        // Your code here\n        return false;\n    }\n}", "python": "def contains_duplicate(nums):\n    # Your code here\n    return False"}', '{"c": "bool containsDuplicate(int* nums, int numsSize) {\n    for (int i = 0; i < numsSize - 1; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] == nums[j]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "java": "class Solution {\n    public boolean containsDuplicate(int[] nums) {\n        Set<Integer> seen = new HashSet<>();\n        \n        for (int num : nums) {\n            if (seen.contains(num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}", "python": "def contains_duplicate(nums):\n    seen = set()\n    \n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    \n    return False"}', '[{"input": "[1,2,3,1]", "hidden": false, "expected": "true"}, {"input": "[1,2,3,4]", "hidden": false, "expected": "false"}, {"input": "[1]", "hidden": true, "expected": "false"}]', 23, 1);
INSERT INTO public.puzzles VALUES (1870, 'Plus One', 'Add one to number represented as array', 'easy', 34, 130, 1, 'You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading zero. Increment the large integer by one and return the resulting array of digits.', '[{"input": "[1,2,3]", "output": "[1,2,4]", "explanation": "The array represents the integer 123. Incrementing by one gives 123 + 1 = 124."}, {"input": "[4,3,2,1]", "output": "[4,3,2,2]", "explanation": "The array represents the integer 4321. Incrementing by one gives 4321 + 1 = 4322."}, {"input": "[9]", "output": "[1,0]", "explanation": "The array represents the integer 9. Incrementing by one gives 9 + 1 = 10."}]', '1 <= digits.length <= 100', '["Handle carry from right to left", "Create new array if all digits are 9"]', '{"c": "int* plusOne(int* digits, int digitsSize, int* returnSize) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public int[] plusOne(int[] digits) {\n        // Your code here\n        return new int[0];\n    }\n}", "python": "def plus_one(digits):\n    # Your code here\n    return []"}', '{"c": "int* plusOne(int* digits, int digitsSize, int* returnSize) {\n    for (int i = digitsSize - 1; i >= 0; i--) {\n        if (digits[i] < 9) {\n            digits[i]++;\n            *returnSize = digitsSize;\n            return digits;\n        }\n        digits[i] = 0;\n    }\n    \n    int* result = malloc((digitsSize + 1) * sizeof(int));\n    result[0] = 1;\n    for (int i = 1; i <= digitsSize; i++) {\n        result[i] = 0;\n    }\n    *returnSize = digitsSize + 1;\n    return result;\n}", "java": "class Solution {\n    public int[] plusOne(int[] digits) {\n        for (int i = digits.length - 1; i >= 0; i--) {\n            if (digits[i] < 9) {\n                digits[i]++;\n                return digits;\n            }\n            digits[i] = 0;\n        }\n        \n        int[] result = new int[digits.length + 1];\n        result[0] = 1;\n        return result;\n    }\n}", "python": "def plus_one(digits):\n    for i in range(len(digits) - 1, -1, -1):\n        if digits[i] < 9:\n            digits[i] += 1\n            return digits\n        digits[i] = 0\n    \n    return [1] + digits"}', '[{"input": "[1,2,3]", "hidden": false, "expected": "[1,2,4]"}, {"input": "[4,3,2,1]", "hidden": false, "expected": "[4,3,2,2]"}, {"input": "[9,9,9]", "hidden": true, "expected": "[1,0,0,0]"}]', 24, 1);
INSERT INTO public.puzzles VALUES (1871, 'Intersection of Two Arrays', 'Find intersection of two arrays', 'easy', 34, 140, 1, 'Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.', '[{"input": "nums1 = [1,2,2,1], nums2 = [2,2]", "output": "[2]", "explanation": ""}, {"input": "nums1 = [4,9,5], nums2 = [9,4,9,8,4]", "output": "[9,4]", "explanation": ""}]', '1 <= nums1.length, nums2.length <= 1000', '["Use hash set", "Find common elements"]', '{"c": "int* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public int[] intersection(int[] nums1, int[] nums2) {\n        // Your code here\n        return new int[0];\n    }\n}", "python": "def intersection(nums1, nums2):\n    # Your code here\n    return []"}', '{"c": "int* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {\n    int* result = malloc(1000 * sizeof(int));\n    *returnSize = 0;\n    \n    for (int i = 0; i < nums1Size; i++) {\n        for (int j = 0; j < nums2Size; j++) {\n            if (nums1[i] == nums2[j]) {\n                bool found = false;\n                for (int k = 0; k < *returnSize; k++) {\n                    if (result[k] == nums1[i]) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    result[(*returnSize)++] = nums1[i];\n                }\n                break;\n            }\n        }\n    }\n    return result;\n}", "java": "class Solution {\n    public int[] intersection(int[] nums1, int[] nums2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> resultSet = new HashSet<>();\n        \n        for (int num : nums1) {\n            set1.add(num);\n        }\n        \n        for (int num : nums2) {\n            if (set1.contains(num)) {\n                resultSet.add(num);\n            }\n        }\n        \n        return resultSet.stream().mapToInt(Integer::intValue).toArray();\n    }\n}", "python": "def intersection(nums1, nums2):\n    return list(set(nums1) & set(nums2))"}', '[{"input": "[1,2,2,1], [2,2]", "hidden": false, "expected": "[2]"}, {"input": "[4,9,5], [9,4,9,8,4]", "hidden": false, "expected": "[9,4]"}, {"input": "[1,2,3], [4,5,6]", "hidden": true, "expected": "[]"}]', 25, 2);
INSERT INTO public.puzzles VALUES (1872, 'Happy Number', 'Determine if a number is happy', 'easy', 32, 150, 1, 'Write an algorithm to determine if a number n is happy. A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.', '[{"input": "19", "output": "true", "explanation": "1¬≤ + 9¬≤ = 82, 8¬≤ + 2¬≤ = 68, 6¬≤ + 8¬≤ = 100, 1¬≤ + 0¬≤ + 0¬≤ = 1"}, {"input": "2", "output": "false", "explanation": ""}]', '1 <= n <= 2^31 - 1', '["Track seen numbers to detect cycles", "Sum squares of digits repeatedly"]', '{"c": "bool isHappy(int n) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean isHappy(int n) {\n        // Your code here\n        return false;\n    }\n}", "python": "def is_happy(n):\n    # Your code here\n    return False"}', '{"c": "int getSumOfSquares(int n) {\n    int sum = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        sum += digit * digit;\n        n /= 10;\n    }\n    return sum;\n}\n\nbool isHappy(int n) {\n    int slow = n, fast = n;\n    \n    do {\n        slow = getSumOfSquares(slow);\n        fast = getSumOfSquares(getSumOfSquares(fast));\n    } while (slow != fast);\n    \n    return slow == 1;\n}", "java": "class Solution {\n    private int getSumOfSquares(int n) {\n        int sum = 0;\n        while (n > 0) {\n            int digit = n % 10;\n            sum += digit * digit;\n            n /= 10;\n        }\n        return sum;\n    }\n    \n    public boolean isHappy(int n) {\n        int slow = n, fast = n;\n        \n        do {\n            slow = getSumOfSquares(slow);\n            fast = getSumOfSquares(getSumOfSquares(fast));\n        } while (slow != fast);\n        \n        return slow == 1;\n    }\n}", "python": "def is_happy(n):\n    def get_sum_of_squares(num):\n        sum_squares = 0\n        while num > 0:\n            digit = num % 10\n            sum_squares += digit * digit\n            num //= 10\n        return sum_squares\n    \n    slow = fast = n\n    \n    while True:\n        slow = get_sum_of_squares(slow)\n        fast = get_sum_of_squares(get_sum_of_squares(fast))\n        if slow == fast:\n            break\n    \n    return slow == 1"}', '[{"input": "19", "hidden": false, "expected": "true"}, {"input": "2", "hidden": false, "expected": "false"}, {"input": "7", "hidden": true, "expected": "true"}]', 26, 2);
INSERT INTO public.puzzles VALUES (1873, 'Count Primes', 'Count number of prime numbers less than n', 'medium', 32, 200, 2, 'Given an integer n, return the number of prime numbers that are strictly less than n.', '[{"input": "10", "output": "4", "explanation": "There are 4 prime numbers less than 10, they are 2, 3, 5, 7."}, {"input": "0", "output": "0", "explanation": ""}, {"input": "1", "output": "0", "explanation": ""}]', '0 <= n <= 5 * 10^6', '["Use Sieve of Eratosthenes", "Mark multiples as non-prime"]', '{"c": "int countPrimes(int n) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int countPrimes(int n) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def count_primes(n):\n    # Your code here\n    return 0"}', '{"c": "int countPrimes(int n) {\n    if (n <= 2) return 0;\n    \n    bool* isPrime = malloc(n * sizeof(bool));\n    for (int i = 0; i < n; i++) {\n        isPrime[i] = true;\n    }\n    \n    isPrime[0] = isPrime[1] = false;\n    \n    for (int i = 2; i * i < n; i++) {\n        if (isPrime[i]) {\n            for (int j = i * i; j < n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n    \n    int count = 0;\n    for (int i = 2; i < n; i++) {\n        if (isPrime[i]) count++;\n    }\n    \n    free(isPrime);\n    return count;\n}", "java": "class Solution {\n    public int countPrimes(int n) {\n        if (n <= 2) return 0;\n        \n        boolean[] isPrime = new boolean[n];\n        Arrays.fill(isPrime, true);\n        \n        isPrime[0] = isPrime[1] = false;\n        \n        for (int i = 2; i * i < n; i++) {\n            if (isPrime[i]) {\n                for (int j = i * i; j < n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        \n        int count = 0;\n        for (int i = 2; i < n; i++) {\n            if (isPrime[i]) count++;\n        }\n        \n        return count;\n    }\n}", "python": "def count_primes(n):\n    if n <= 2:\n        return 0\n    \n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)"}', '[{"input": "10", "hidden": false, "expected": "4"}, {"input": "0", "hidden": false, "expected": "0"}, {"input": "3", "hidden": true, "expected": "1"}]', 27, 3);
INSERT INTO public.puzzles VALUES (1874, 'Valid Perfect Square', 'Check if number is a perfect square', 'easy', 33, 140, 1, 'Given a positive integer num, write a function which returns True if num is a perfect square else False.', '[{"input": "16", "output": "true", "explanation": "4 * 4 = 16"}, {"input": "14", "output": "false", "explanation": ""}]', '1 <= num <= 2^31 - 1', '["Use binary search", "Check if sqrt is integer"]', '{"c": "bool isPerfectSquare(int num) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean isPerfectSquare(int num) {\n        // Your code here\n        return false;\n    }\n}", "python": "def is_perfect_square(num):\n    # Your code here\n    return False"}', '{"c": "bool isPerfectSquare(int num) {\n    if (num < 1) return false;\n    \n    long left = 1, right = num;\n    \n    while (left <= right) {\n        long mid = left + (right - left) / 2;\n        long square = mid * mid;\n        \n        if (square == num) {\n            return true;\n        } else if (square < num) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return false;\n}", "java": "class Solution {\n    public boolean isPerfectSquare(int num) {\n        if (num < 1) return false;\n        \n        long left = 1, right = num;\n        \n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            long square = mid * mid;\n            \n            if (square == num) {\n                return true;\n            } else if (square < num) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return false;\n    }\n}", "python": "def is_perfect_square(num):\n    if num < 1:\n        return False\n    \n    left, right = 1, num\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        square = mid * mid\n        \n        if square == num:\n            return True\n        elif square < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return False"}', '[{"input": "16", "hidden": false, "expected": "true"}, {"input": "14", "hidden": false, "expected": "false"}, {"input": "1", "hidden": true, "expected": "true"}]', 28, 1);
INSERT INTO public.puzzles VALUES (1875, 'Reverse String', 'Reverse a string in-place', 'easy', 34, 120, 1, 'Write a function that reverses a string. The input string is given as an array of characters s. You must do this by modifying the input array in-place with O(1) extra memory.', '[{"input": "[\"h\",\"e\",\"l\",\"l\",\"o\"]", "output": "[\"o\",\"l\",\"l\",\"e\",\"h\"]", "explanation": ""}, {"input": "[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]", "output": "[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]", "explanation": ""}]', '1 <= s.length <= 10^5', '["Use two pointers", "Swap characters from both ends"]', '{"c": "void reverseString(char* s, int sSize) {\n    // Your code here\n}", "java": "class Solution {\n    public void reverseString(char[] s) {\n        // Your code here\n    }\n}", "python": "def reverse_string(s):\n    # Your code here\n    pass"}', '{"c": "void reverseString(char* s, int sSize) {\n    int left = 0, right = sSize - 1;\n    \n    while (left < right) {\n        char temp = s[left];\n        s[left] = s[right];\n        s[right] = temp;\n        left++;\n        right--;\n    }\n}", "java": "class Solution {\n    public void reverseString(char[] s) {\n        int left = 0, right = s.length - 1;\n        \n        while (left < right) {\n            char temp = s[left];\n            s[left] = s[right];\n            s[right] = temp;\n            left++;\n            right--;\n        }\n    }\n}", "python": "def reverse_string(s):\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        s[left], s[right] = s[right], s[left]\n        left += 1\n        right -= 1"}', '[{"input": "[\"h\",\"e\",\"l\",\"l\",\"o\"]", "hidden": false, "expected": "[\"o\",\"l\",\"l\",\"e\",\"h\"]"}, {"input": "[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]", "hidden": false, "expected": "[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]"}, {"input": "[\"A\"]", "hidden": true, "expected": "[\"A\"]"}]', 29, 1);
INSERT INTO public.puzzles VALUES (1876, 'Reverse Bits', 'Reverse bits of a 32-bit unsigned integer', 'easy', 32, 150, 1, 'Reverse bits of a given 32 bits unsigned integer.', '[{"input": "00000010100101000001111010011100", "output": "00111001011110000010100101000000", "explanation": "The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000."}]', 'The input must be a binary string of length 32', '["Process bit by bit", "Build result from right to left"]', '{"c": "uint32_t reverseBits(uint32_t n) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int reverseBits(int n) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def reverse_bits(n):\n    # Your code here\n    return 0"}', '{"c": "uint32_t reverseBits(uint32_t n) {\n    uint32_t result = 0;\n    for (int i = 0; i < 32; i++) {\n        result = (result << 1) | (n & 1);\n        n >>= 1;\n    }\n    return result;\n}", "java": "class Solution {\n    public int reverseBits(int n) {\n        int result = 0;\n        for (int i = 0; i < 32; i++) {\n            result = (result << 1) | (n & 1);\n            n >>>= 1;\n        }\n        return result;\n    }\n}", "python": "def reverse_bits(n):\n    result = 0\n    for i in range(32):\n        result = (result << 1) | (n & 1)\n        n >>= 1\n    return result"}', '[{"input": "43261596", "hidden": false, "expected": "964176192"}, {"input": "4294967293", "hidden": false, "expected": "3221225471"}, {"input": "1", "hidden": true, "expected": "2147483648"}]', 30, 2);
INSERT INTO public.puzzles VALUES (1878, 'Add Digits', 'Repeatedly add digits until single digit', 'easy', 32, 120, 1, 'Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.', '[{"input": "38", "output": "2", "explanation": "3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it."}, {"input": "0", "output": "0", "explanation": ""}]', '0 <= num <= 2^31 - 1', '["Use digital root formula", "Result is 1 + (n-1) % 9 for n > 0"]', '{"c": "int addDigits(int num) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int addDigits(int num) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def add_digits(num):\n    # Your code here\n    return 0"}', '{"c": "int addDigits(int num) {\n    return num == 0 ? 0 : 1 + (num - 1) % 9;\n}", "java": "class Solution {\n    public int addDigits(int num) {\n        return num == 0 ? 0 : 1 + (num - 1) % 9;\n    }\n}", "python": "def add_digits(num):\n    return 0 if num == 0 else 1 + (num - 1) % 9"}', '[{"input": "38", "hidden": false, "expected": "2"}, {"input": "0", "hidden": false, "expected": "0"}, {"input": "9", "hidden": true, "expected": "9"}]', 32, 1);
INSERT INTO public.puzzles VALUES (1879, 'Ugly Number', 'Check if number is ugly', 'easy', 32, 140, 1, 'An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5. Given an integer n, return true if n is an ugly number.', '[{"input": "6", "output": "true", "explanation": "6 = 2 √ó 3"}, {"input": "1", "output": "true", "explanation": "1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5."}, {"input": "14", "output": "false", "explanation": "14 is not ugly since it includes the prime factor 7."}]', '-2^31 <= n <= 2^31 - 1', '["Divide by 2, 3, 5 repeatedly", "Check if result is 1"]', '{"c": "bool isUgly(int n) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean isUgly(int n) {\n        // Your code here\n        return false;\n    }\n}", "python": "def is_ugly(n):\n    # Your code here\n    return False"}', '{"c": "bool isUgly(int n) {\n    if (n <= 0) return false;\n    \n    while (n % 2 == 0) n /= 2;\n    while (n % 3 == 0) n /= 3;\n    while (n % 5 == 0) n /= 5;\n    \n    return n == 1;\n}", "java": "class Solution {\n    public boolean isUgly(int n) {\n        if (n <= 0) return false;\n        \n        while (n % 2 == 0) n /= 2;\n        while (n % 3 == 0) n /= 3;\n        while (n % 5 == 0) n /= 5;\n        \n        return n == 1;\n    }\n}", "python": "def is_ugly(n):\n    if n <= 0:\n        return False\n    \n    for factor in [2, 3, 5]:\n        while n % factor == 0:\n            n //= factor\n    \n    return n == 1"}', '[{"input": "6", "hidden": false, "expected": "true"}, {"input": "1", "hidden": false, "expected": "true"}, {"input": "14", "hidden": true, "expected": "false"}]', 33, 2);
INSERT INTO public.puzzles VALUES (1880, 'Guess Number Higher or Lower', 'Guess number using binary search', 'easy', 33, 140, 1, 'We are playing the Guess Game. The game is as follows: I pick a number from 1 to n. You have to guess which number I picked. Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.', '[{"input": "n = 10, pick = 6", "output": "6", "explanation": "This is the number that I picked."}]', '1 <= n <= 2^31 - 1', '["Use binary search", "Call guess API to get feedback"]', '{"c": "int guessNumber(int n) {\n    // Your code here\n    return 1;\n}", "java": "class Solution {\n    public int guessNumber(int n) {\n        // Your code here\n        return 1;\n    }\n}", "python": "def guess_number(n):\n    # Your code here\n    return 1"}', '{"c": "int guessNumber(int n) {\n    int left = 1, right = n;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        int result = guess(mid);\n        \n        if (result == 0) {\n            return mid;\n        } else if (result == -1) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return -1;\n}", "java": "class Solution {\n    public int guessNumber(int n) {\n        int left = 1, right = n;\n        \n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            int result = guess(mid);\n            \n            if (result == 0) {\n                return mid;\n            } else if (result == -1) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return -1;\n    }\n}", "python": "def guess_number(n):\n    left, right = 1, n\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        result = guess(mid)\n        \n        if result == 0:\n            return mid\n        elif result == -1:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return -1"}', '[{"input": "10, 6", "hidden": false, "expected": "6"}, {"input": "1, 1", "hidden": false, "expected": "1"}, {"input": "2, 1", "hidden": true, "expected": "1"}]', 34, 1);
INSERT INTO public.puzzles VALUES (1881, 'Ransom Note', 'Check if ransom note can be constructed', 'easy', 33, 130, 1, 'Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise. Each letter in magazine can only be used once in ransomNote.', '[{"input": "ransomNote = \"a\", magazine = \"b\"", "output": "false", "explanation": ""}, {"input": "ransomNote = \"aa\", magazine = \"ab\"", "output": "false", "explanation": ""}, {"input": "ransomNote = \"aa\", magazine = \"aab\"", "output": "true", "explanation": ""}]', '1 <= ransomNote.length, magazine.length <= 10^5', '["Count character frequencies", "Check if magazine has enough letters"]', '{"c": "bool canConstruct(char* ransomNote, char* magazine) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean canConstruct(String ransomNote, String magazine) {\n        // Your code here\n        return false;\n    }\n}", "python": "def can_construct(ransom_note, magazine):\n    # Your code here\n    return False"}', '{"c": "bool canConstruct(char* ransomNote, char* magazine) {\n    int count[26] = {0};\n    \n    for (int i = 0; magazine[i]; i++) {\n        count[magazine[i] - ''a'']++;\n    }\n    \n    for (int i = 0; ransomNote[i]; i++) {\n        if (--count[ransomNote[i] - ''a''] < 0) {\n            return false;\n        }\n    }\n    return true;\n}", "java": "class Solution {\n    public boolean canConstruct(String ransomNote, String magazine) {\n        int[] count = new int[26];\n        \n        for (char c : magazine.toCharArray()) {\n            count[c - ''a'']++;\n        }\n        \n        for (char c : ransomNote.toCharArray()) {\n            if (--count[c - ''a''] < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "python": "def can_construct(ransom_note, magazine):\n    from collections import Counter\n    \n    mag_count = Counter(magazine)\n    \n    for char in ransom_note:\n        if mag_count[char] <= 0:\n            return False\n        mag_count[char] -= 1\n    \n    return True"}', '[{"input": "\"a\", \"b\"", "hidden": false, "expected": "false"}, {"input": "\"aa\", \"ab\"", "hidden": false, "expected": "false"}, {"input": "\"aa\", \"aab\"", "hidden": true, "expected": "true"}]', 35, 1);
INSERT INTO public.puzzles VALUES (1883, 'Missing Number', 'Find missing number in array', 'easy', 34, 130, 1, 'Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.', '[{"input": "[3,0,1]", "output": "2", "explanation": "n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums."}, {"input": "[0,1]", "output": "2", "explanation": "n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums."}, {"input": "[9,6,4,2,3,5,7,0,1]", "output": "8", "explanation": "n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums."}]', 'n == nums.length, 1 <= n <= 10^4', '["Use sum formula", "Calculate expected sum - actual sum"]', '{"c": "int missingNumber(int* nums, int numsSize) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int missingNumber(int[] nums) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def missing_number(nums):\n    # Your code here\n    return 0"}', '{"c": "int missingNumber(int* nums, int numsSize) {\n    int expectedSum = numsSize * (numsSize + 1) / 2;\n    int actualSum = 0;\n    \n    for (int i = 0; i < numsSize; i++) {\n        actualSum += nums[i];\n    }\n    \n    return expectedSum - actualSum;\n}", "java": "class Solution {\n    public int missingNumber(int[] nums) {\n        int expectedSum = nums.length * (nums.length + 1) / 2;\n        int actualSum = 0;\n        \n        for (int num : nums) {\n            actualSum += num;\n        }\n        \n        return expectedSum - actualSum;\n    }\n}", "python": "def missing_number(nums):\n    n = len(nums)\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum"}', '[{"input": "[3,0,1]", "hidden": false, "expected": "2"}, {"input": "[0,1]", "hidden": false, "expected": "2"}, {"input": "[9,6,4,2,3,5,7,0,1]", "hidden": true, "expected": "8"}]', 37, 1);
INSERT INTO public.puzzles VALUES (1884, 'Number of 1 Bits', 'Count number of 1 bits in binary', 'easy', 32, 130, 1, 'Write a function that takes an unsigned integer and returns the number of ''1'' bits it has (also known as the Hamming weight).', '[{"input": "00000000000000000000000000001011", "output": "3", "explanation": "The input binary string 00000000000000000000000000001011 has a total of three ''1'' bits."}, {"input": "00000000000000000000000010000000", "output": "1", "explanation": "The input binary string 00000000000000000000000010000000 has a total of one ''1'' bit."}]', 'The input must be a binary string of length 32', '["Count bits using n & (n-1)", "Each operation removes rightmost 1 bit"]', '{"c": "int hammingWeight(uint32_t n) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int hammingWeight(int n) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def hamming_weight(n):\n    # Your code here\n    return 0"}', '{"c": "int hammingWeight(uint32_t n) {\n    int count = 0;\n    while (n) {\n        count++;\n        n &= n - 1;\n    }\n    return count;\n}", "java": "class Solution {\n    public int hammingWeight(int n) {\n        int count = 0;\n        while (n != 0) {\n            count++;\n            n &= n - 1;\n        }\n        return count;\n    }\n}", "python": "def hamming_weight(n):\n    count = 0\n    while n:\n        count += 1\n        n &= n - 1\n    return count"}', '[{"input": "11", "hidden": false, "expected": "3"}, {"input": "128", "hidden": false, "expected": "1"}, {"input": "4294967293", "hidden": true, "expected": "31"}]', 38, 2);
INSERT INTO public.puzzles VALUES (1885, 'Pascal''s Triangle', 'Generate Pascal''s triangle', 'easy', 32, 140, 1, 'Given an integer numRows, return the first numRows of Pascal''s triangle. In Pascal''s triangle, each number is the sum of the two numbers directly above it.', '[{"input": "5", "output": "[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]", "explanation": ""}, {"input": "1", "output": "[[1]]", "explanation": ""}]', '1 <= numRows <= 30', '["Each row starts and ends with 1", "Middle elements are sum of two above"]', '{"c": "int** generate(int numRows, int* returnSize, int** returnColumnSizes) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public List<List<Integer>> generate(int numRows) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "def generate(num_rows):\n    # Your code here\n    return []"}', '{"c": "int** generate(int numRows, int* returnSize, int** returnColumnSizes) {\n    *returnSize = numRows;\n    int** result = malloc(numRows * sizeof(int*));\n    *returnColumnSizes = malloc(numRows * sizeof(int));\n    \n    for (int i = 0; i < numRows; i++) {\n        (*returnColumnSizes)[i] = i + 1;\n        result[i] = malloc((i + 1) * sizeof(int));\n        result[i][0] = result[i][i] = 1;\n        \n        for (int j = 1; j < i; j++) {\n            result[i][j] = result[i-1][j-1] + result[i-1][j];\n        }\n    }\n    return result;\n}", "java": "class Solution {\n    public List<List<Integer>> generate(int numRows) {\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < numRows; i++) {\n            List<Integer> row = new ArrayList<>();\n            row.add(1);\n            \n            for (int j = 1; j < i; j++) {\n                row.add(result.get(i-1).get(j-1) + result.get(i-1).get(j));\n            }\n            \n            if (i > 0) row.add(1);\n            result.add(row);\n        }\n        return result;\n    }\n}", "python": "def generate(num_rows):\n    result = []\n    \n    for i in range(num_rows):\n        row = [1]\n        \n        for j in range(1, i):\n            row.append(result[i-1][j-1] + result[i-1][j])\n        \n        if i > 0:\n            row.append(1)\n        \n        result.append(row)\n    \n    return result"}', '[{"input": "5", "hidden": false, "expected": "[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]"}, {"input": "1", "hidden": false, "expected": "[[1]]"}, {"input": "3", "hidden": true, "expected": "[[1],[1,1],[1,2,1]]"}]', 39, 2);
INSERT INTO public.puzzles VALUES (1886, 'Find Peak Element', 'Find peak element in array', 'medium', 33, 200, 2, 'A peak element is an element that is strictly greater than its neighbors. Given an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.', '[{"input": "[1,2,3,1]", "output": "2", "explanation": "3 is a peak element and your function should return the index number 2."}, {"input": "[1,2,1,3,5,6,4]", "output": "5", "explanation": "Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6."}]', '1 <= nums.length <= 1000', '["Use binary search", "Move toward higher neighbor"]', '{"c": "int findPeakElement(int* nums, int numsSize) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int findPeakElement(int[] nums) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def find_peak_element(nums):\n    # Your code here\n    return 0"}', '{"c": "int findPeakElement(int* nums, int numsSize) {\n    int left = 0, right = numsSize - 1;\n    \n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        \n        if (nums[mid] > nums[mid + 1]) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}", "java": "class Solution {\n    public int findPeakElement(int[] nums) {\n        int left = 0, right = nums.length - 1;\n        \n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            \n            if (nums[mid] > nums[mid + 1]) {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n}", "python": "def find_peak_element(nums):\n    left, right = 0, len(nums) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        if nums[mid] > nums[mid + 1]:\n            right = mid\n        else:\n            left = mid + 1\n    \n    return left"}', '[{"input": "[1,2,3,1]", "hidden": false, "expected": "2"}, {"input": "[1,2,1,3,5,6,4]", "hidden": false, "expected": "5"}, {"input": "[1]", "hidden": true, "expected": "0"}]', 40, 3);
INSERT INTO public.puzzles VALUES (1887, 'Valid Parentheses II', 'Check if parentheses string is valid', 'medium', 34, 200, 2, 'Given a string s containing only three types of characters: ''('', '')'' and ''*'', return true if s is valid. The following rules define a valid string: Any left parenthesis ''('' must have a corresponding right parenthesis '')''. Any right parenthesis '')'' must have a corresponding left parenthesis ''(''. Left parenthesis ''('' must go before the corresponding right parenthesis '')''. ''*'' could be treated as a single right parenthesis '')'' or a single left parenthesis ''('' or an empty string "".', '[{"input": "\"()\"", "output": "true", "explanation": ""}, {"input": "\"(*)\"", "output": "true", "explanation": ""}, {"input": "\"(*))\"", "output": "true", "explanation": ""}]', '1 <= s.length <= 100', '["Track minimum and maximum open parentheses", "Star can be treated as (, ), or empty"]', '{"c": "bool checkValidString(char* s) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean checkValidString(String s) {\n        // Your code here\n        return false;\n    }\n}", "python": "def check_valid_string(s):\n    # Your code here\n    return False"}', '{"c": "bool checkValidString(char* s) {\n    int minOpen = 0, maxOpen = 0;\n    \n    for (int i = 0; s[i]; i++) {\n        if (s[i] == ''('') {\n            minOpen++;\n            maxOpen++;\n        } else if (s[i] == '')'') {\n            minOpen--;\n            maxOpen--;\n        } else {\n            minOpen--;\n            maxOpen++;\n        }\n        \n        if (maxOpen < 0) return false;\n        if (minOpen < 0) minOpen = 0;\n    }\n    \n    return minOpen == 0;\n}", "java": "class Solution {\n    public boolean checkValidString(String s) {\n        int minOpen = 0, maxOpen = 0;\n        \n        for (char c : s.toCharArray()) {\n            if (c == ''('') {\n                minOpen++;\n                maxOpen++;\n            } else if (c == '')'') {\n                minOpen--;\n                maxOpen--;\n            } else {\n                minOpen--;\n                maxOpen++;\n            }\n            \n            if (maxOpen < 0) return false;\n            if (minOpen < 0) minOpen = 0;\n        }\n        \n        return minOpen == 0;\n    }\n}", "python": "def check_valid_string(s):\n    min_open = max_open = 0\n    \n    for c in s:\n        if c == ''('':\n            min_open += 1\n            max_open += 1\n        elif c == '')'':\n            min_open -= 1\n            max_open -= 1\n        else:  # c == ''*''\n            min_open -= 1\n            max_open += 1\n        \n        if max_open < 0:\n            return False\n        if min_open < 0:\n            min_open = 0\n    \n    return min_open == 0"}', '[{"input": "\"()\"", "hidden": false, "expected": "true"}, {"input": "\"(*)\"", "hidden": false, "expected": "true"}, {"input": "\"(*))\"", "hidden": true, "expected": "true"}]', 41, 3);
INSERT INTO public.puzzles VALUES (1888, 'Excel Sheet Column Title', 'Convert number to Excel column title', 'easy', 32, 140, 1, 'Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet. For example: A -> 1, B -> 2, C -> 3, ..., Z -> 26, AA -> 27, AB -> 28, ...', '[{"input": "1", "output": "A", "explanation": ""}, {"input": "28", "output": "AB", "explanation": ""}, {"input": "701", "output": "ZY", "explanation": ""}]', '1 <= columnNumber <= 2^31 - 1', '["Use base-26 conversion", "Handle 1-indexed system"]', '{"c": "char* convertToTitle(int columnNumber) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public String convertToTitle(int columnNumber) {\n        // Your code here\n        return \"\";\n    }\n}", "python": "def convert_to_title(column_number):\n    # Your code here\n    return \"\""}', '{"c": "char* convertToTitle(int columnNumber) {\n    char* result = malloc(100);\n    int index = 0;\n    \n    while (columnNumber > 0) {\n        columnNumber--;\n        result[index++] = ''A'' + (columnNumber % 26);\n        columnNumber /= 26;\n    }\n    \n    result[index] = ''\\0'';\n    \n    // Reverse the string\n    for (int i = 0; i < index / 2; i++) {\n        char temp = result[i];\n        result[i] = result[index - 1 - i];\n        result[index - 1 - i] = temp;\n    }\n    \n    return result;\n}", "java": "class Solution {\n    public String convertToTitle(int columnNumber) {\n        StringBuilder result = new StringBuilder();\n        \n        while (columnNumber > 0) {\n            columnNumber--;\n            result.append((char)(''A'' + columnNumber % 26));\n            columnNumber /= 26;\n        }\n        \n        return result.reverse().toString();\n    }\n}", "python": "def convert_to_title(column_number):\n    result = []\n    \n    while column_number > 0:\n        column_number -= 1\n        result.append(chr(ord(''A'') + column_number % 26))\n        column_number //= 26\n    \n    return ''''.join(reversed(result))"}', '[{"input": "1", "hidden": false, "expected": "A"}, {"input": "28", "hidden": false, "expected": "AB"}, {"input": "701", "hidden": true, "expected": "ZY"}]', 40, 2);
INSERT INTO public.puzzles VALUES (1889, 'Search in Rotated Sorted Array', 'Search target in rotated sorted array', 'medium', 33, 250, 3, 'There is an integer array nums sorted in ascending order (with distinct values). Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k. Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.', '[{"input": "nums = [4,5,6,7,0,1,2], target = 0", "output": "4", "explanation": ""}, {"input": "nums = [4,5,6,7,0,1,2], target = 3", "output": "-1", "explanation": ""}, {"input": "nums = [1], target = 0", "output": "-1", "explanation": ""}]', '1 <= nums.length <= 5000', '["Use modified binary search", "Determine which half is sorted"]', '{"c": "int search(int* nums, int numsSize, int target) {\n    // Your code here\n    return -1;\n}", "java": "class Solution {\n    public int search(int[] nums, int target) {\n        // Your code here\n        return -1;\n    }\n}", "python": "def search(nums, target):\n    # Your code here\n    return -1"}', '{"c": "int search(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if (nums[mid] == target) {\n            return mid;\n        }\n        \n        if (nums[left] <= nums[mid]) {\n            if (nums[left] <= target && target < nums[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        } else {\n            if (nums[mid] < target && target <= nums[right]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n    \n    return -1;\n}", "java": "class Solution {\n    public int search(int[] nums, int target) {\n        int left = 0, right = nums.length - 1;\n        \n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            \n            if (nums[mid] == target) {\n                return mid;\n            }\n            \n            if (nums[left] <= nums[mid]) {\n                if (nums[left] <= target && target < nums[mid]) {\n                    right = mid - 1;\n                } else {\n                    left = mid + 1;\n                }\n            } else {\n                if (nums[mid] < target && target <= nums[right]) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        \n        return -1;\n    }\n}", "python": "def search(nums, target):\n    left, right = 0, len(nums) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if nums[mid] == target:\n            return mid\n        \n        if nums[left] <= nums[mid]:\n            if nums[left] <= target < nums[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            if nums[mid] < target <= nums[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    \n    return -1"}', '[{"input": "[4,5,6,7,0,1,2], 0", "hidden": false, "expected": "4"}, {"input": "[4,5,6,7,0,1,2], 3", "hidden": false, "expected": "-1"}, {"input": "[1], 0", "hidden": true, "expected": "-1"}]', 41, 4);
INSERT INTO public.puzzles VALUES (1890, 'Implement Stack using Queues', 'Implement stack using only queues', 'easy', 34, 160, 1, 'Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).', '[{"input": "[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\\n[[], [1], [2], [], [], []]", "output": "[null, null, null, 2, 2, false]", "explanation": "MyStack myStack = new MyStack(); myStack.push(1); myStack.push(2); myStack.top(); // return 2 myStack.pop(); // return 2 myStack.empty(); // return False"}]', '1 <= x <= 9, At most 100 calls will be made to push, pop, top, and empty', '["Use one queue as main storage", "Transfer elements to maintain LIFO order"]', '{"c": "typedef struct {\n    // Your data structure here\n} MyStack;\n\nMyStack* myStackCreate() {\n    // Your code here\n    return NULL;\n}\n\nvoid myStackPush(MyStack* obj, int x) {\n    // Your code here\n}\n\nint myStackPop(MyStack* obj) {\n    // Your code here\n    return 0;\n}\n\nint myStackTop(MyStack* obj) {\n    // Your code here\n    return 0;\n}\n\nbool myStackEmpty(MyStack* obj) {\n    // Your code here\n    return false;\n}\n\nvoid myStackFree(MyStack* obj) {\n    // Your code here\n}", "java": "class MyStack {\n\n    public MyStack() {\n        // Your code here\n    }\n    \n    public void push(int x) {\n        // Your code here\n    }\n    \n    public int pop() {\n        // Your code here\n        return 0;\n    }\n    \n    public int top() {\n        // Your code here\n        return 0;\n    }\n    \n    public boolean empty() {\n        // Your code here\n        return false;\n    }\n}", "python": "class MyStack:\n\n    def __init__(self):\n        # Your code here\n        pass\n\n    def push(self, x: int) -> None:\n        # Your code here\n        pass\n\n    def pop(self) -> int:\n        # Your code here\n        return 0\n\n    def top(self) -> int:\n        # Your code here\n        return 0\n\n    def empty(self) -> bool:\n        # Your code here\n        return False"}', '{"c": "typedef struct {\n    int* queue;\n    int front;\n    int rear;\n    int size;\n    int capacity;\n} MyStack;\n\nMyStack* myStackCreate() {\n    MyStack* stack = malloc(sizeof(MyStack));\n    stack->capacity = 100;\n    stack->queue = malloc(stack->capacity * sizeof(int));\n    stack->front = 0;\n    stack->rear = 0;\n    stack->size = 0;\n    return stack;\n}\n\nvoid myStackPush(MyStack* obj, int x) {\n    obj->queue[obj->rear] = x;\n    obj->rear = (obj->rear + 1) % obj->capacity;\n    obj->size++;\n    \n    // Rotate elements to maintain LIFO order\n    for (int i = 0; i < obj->size - 1; i++) {\n        int temp = obj->queue[obj->front];\n        obj->front = (obj->front + 1) % obj->capacity;\n        obj->queue[obj->rear] = temp;\n        obj->rear = (obj->rear + 1) % obj->capacity;\n    }\n}\n\nint myStackPop(MyStack* obj) {\n    int result = obj->queue[obj->front];\n    obj->front = (obj->front + 1) % obj->capacity;\n    obj->size--;\n    return result;\n}\n\nint myStackTop(MyStack* obj) {\n    return obj->queue[obj->front];\n}\n\nbool myStackEmpty(MyStack* obj) {\n    return obj->size == 0;\n}\n\nvoid myStackFree(MyStack* obj) {\n    free(obj->queue);\n    free(obj);\n}", "java": "class MyStack {\n    private Queue<Integer> queue;\n\n    public MyStack() {\n        queue = new LinkedList<>();\n    }\n    \n    public void push(int x) {\n        queue.offer(x);\n        \n        // Rotate elements to maintain LIFO order\n        for (int i = 0; i < queue.size() - 1; i++) {\n            queue.offer(queue.poll());\n        }\n    }\n    \n    public int pop() {\n        return queue.poll();\n    }\n    \n    public int top() {\n        return queue.peek();\n    }\n    \n    public boolean empty() {\n        return queue.isEmpty();\n    }\n}", "python": "from collections import deque\n\nclass MyStack:\n\n    def __init__(self):\n        self.queue = deque()\n\n    def push(self, x: int) -> None:\n        self.queue.append(x)\n        \n        # Rotate elements to maintain LIFO order\n        for _ in range(len(self.queue) - 1):\n            self.queue.append(self.queue.popleft())\n\n    def pop(self) -> int:\n        return self.queue.popleft()\n\n    def top(self) -> int:\n        return self.queue[0]\n\n    def empty(self) -> bool:\n        return len(self.queue) == 0"}', '[{"input": "push(1), push(2), top(), pop(), empty()", "hidden": false, "expected": "null, null, 2, 2, false"}, {"input": "push(1), pop(), empty()", "hidden": false, "expected": "null, 1, true"}, {"input": "push(1), push(2), push(3), pop(), top()", "hidden": true, "expected": "null, null, null, 3, 2"}]', 42, 2);
INSERT INTO public.puzzles VALUES (1894, 'Fibonacci Number', 'Calculate nth Fibonacci number', 'easy', 32, 120, 1, 'The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1.', '[{"input": "2", "output": "1", "explanation": "F(2) = F(1) + F(0) = 1 + 0 = 1."}, {"input": "3", "output": "2", "explanation": "F(3) = F(2) + F(1) = 1 + 1 = 2."}, {"input": "4", "output": "3", "explanation": "F(4) = F(3) + F(2) = 2 + 1 = 3."}]', '0 <= n <= 30', '["Use iterative approach", "Track last two numbers"]', '{"c": "int fib(int n) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int fib(int n) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def fib(n):\n    # Your code here\n    return 0"}', '{"c": "int fib(int n) {\n    if (n <= 1) return n;\n    \n    int prev2 = 0, prev1 = 1;\n    for (int i = 2; i <= n; i++) {\n        int current = prev1 + prev2;\n        prev2 = prev1;\n        prev1 = current;\n    }\n    return prev1;\n}", "java": "class Solution {\n    public int fib(int n) {\n        if (n <= 1) return n;\n        \n        int prev2 = 0, prev1 = 1;\n        for (int i = 2; i <= n; i++) {\n            int current = prev1 + prev2;\n            prev2 = prev1;\n            prev1 = current;\n        }\n        return prev1;\n    }\n}", "python": "def fib(n):\n    if n <= 1:\n        return n\n    \n    prev2, prev1 = 0, 1\n    for i in range(2, n + 1):\n        current = prev1 + prev2\n        prev2, prev1 = prev1, current\n    \n    return prev1"}', '[{"input": "2", "hidden": false, "expected": "1"}, {"input": "3", "hidden": false, "expected": "2"}, {"input": "4", "hidden": true, "expected": "3"}]', 46, 1);
INSERT INTO public.puzzles VALUES (1895, 'Merge Sorted Array', 'Merge two sorted arrays in-place', 'easy', 33, 140, 1, 'You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively. Merge nums1 and nums2 into a single array sorted in non-decreasing order.', '[{"input": "nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3", "output": "[1,2,2,3,5,6]", "explanation": "The arrays we are merging are [1,2,3] and [2,5,6]."}, {"input": "nums1 = [1], m = 1, nums2 = [], n = 0", "output": "[1]", "explanation": "The arrays we are merging are [1] and []."}]', 'nums1.length == m + n', '["Start from the end", "Compare and place larger element"]', '{"c": "void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n) {\n    // Your code here\n}", "java": "class Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        // Your code here\n    }\n}", "python": "def merge(nums1, m, nums2, n):\n    # Your code here\n    pass"}', '{"c": "void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n) {\n    int i = m - 1, j = n - 1, k = m + n - 1;\n    \n    while (i >= 0 && j >= 0) {\n        if (nums1[i] > nums2[j]) {\n            nums1[k--] = nums1[i--];\n        } else {\n            nums1[k--] = nums2[j--];\n        }\n    }\n    \n    while (j >= 0) {\n        nums1[k--] = nums2[j--];\n    }\n}", "java": "class Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        int i = m - 1, j = n - 1, k = m + n - 1;\n        \n        while (i >= 0 && j >= 0) {\n            if (nums1[i] > nums2[j]) {\n                nums1[k--] = nums1[i--];\n            } else {\n                nums1[k--] = nums2[j--];\n            }\n        }\n        \n        while (j >= 0) {\n            nums1[k--] = nums2[j--];\n        }\n    }\n}", "python": "def merge(nums1, m, nums2, n):\n    i, j, k = m - 1, n - 1, m + n - 1\n    \n    while i >= 0 and j >= 0:\n        if nums1[i] > nums2[j]:\n            nums1[k] = nums1[i]\n            i -= 1\n        else:\n            nums1[k] = nums2[j]\n            j -= 1\n        k -= 1\n    \n    while j >= 0:\n        nums1[k] = nums2[j]\n        j -= 1\n        k -= 1"}', '[{"input": "[1,2,3,0,0,0], 3, [2,5,6], 3", "hidden": false, "expected": "[1,2,2,3,5,6]"}, {"input": "[1], 1, [], 0", "hidden": false, "expected": "[1]"}, {"input": "[0], 0, [1], 1", "hidden": true, "expected": "[1]"}]', 47, 2);
INSERT INTO public.puzzles VALUES (1896, 'Remove Element', 'Remove all instances of value in-place', 'easy', 33, 120, 1, 'Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed. Return the number of elements in nums which are not equal to val.', '[{"input": "nums = [3,2,2,3], val = 3", "output": "2, nums = [2,2,_,_]", "explanation": "Your function should return k = 2, with the first two elements of nums being 2."}, {"input": "nums = [0,1,2,2,3,0,4,2], val = 2", "output": "5, nums = [0,1,4,0,3,_,_,_]", "explanation": ""}]', '0 <= nums.length <= 100', '["Use two pointers", "Overwrite elements to remove"]', '{"c": "int removeElement(int* nums, int numsSize, int val) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int removeElement(int[] nums, int val) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def remove_element(nums, val):\n    # Your code here\n    return 0"}', '{"c": "int removeElement(int* nums, int numsSize, int val) {\n    int writeIndex = 0;\n    for (int i = 0; i < numsSize; i++) {\n        if (nums[i] != val) {\n            nums[writeIndex++] = nums[i];\n        }\n    }\n    return writeIndex;\n}", "java": "class Solution {\n    public int removeElement(int[] nums, int val) {\n        int writeIndex = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] != val) {\n                nums[writeIndex++] = nums[i];\n            }\n        }\n        return writeIndex;\n    }\n}", "python": "def remove_element(nums, val):\n    write_index = 0\n    for i in range(len(nums)):\n        if nums[i] != val:\n            nums[write_index] = nums[i]\n            write_index += 1\n    return write_index"}', '[{"input": "[3,2,2,3], 3", "hidden": false, "expected": "2"}, {"input": "[0,1,2,2,3,0,4,2], 2", "hidden": false, "expected": "5"}, {"input": "[1], 1", "hidden": true, "expected": "0"}]', 48, 1);
INSERT INTO public.puzzles VALUES (1897, 'Symmetric Tree', 'Check if binary tree is symmetric', 'easy', 34, 150, 1, 'Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).', '[{"input": "[1,2,2,3,4,4,3]", "output": "true", "explanation": ""}, {"input": "[1,2,2,null,3,null,3]", "output": "false", "explanation": ""}]', 'The number of nodes in the tree is in the range [1, 1000]', '["Compare left and right subtrees", "Use recursive approach"]', '{"c": "bool isSymmetric(struct TreeNode* root) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean isSymmetric(TreeNode root) {\n        // Your code here\n        return false;\n    }\n}", "python": "def is_symmetric(root):\n    # Your code here\n    return False"}', '{"c": "bool isMirror(struct TreeNode* left, struct TreeNode* right) {\n    if (!left && !right) return true;\n    if (!left || !right) return false;\n    \n    return (left->val == right->val) &&\n           isMirror(left->left, right->right) &&\n           isMirror(left->right, right->left);\n}\n\nbool isSymmetric(struct TreeNode* root) {\n    if (!root) return true;\n    return isMirror(root->left, root->right);\n}", "java": "class Solution {\n    public boolean isSymmetric(TreeNode root) {\n        if (root == null) return true;\n        return isMirror(root.left, root.right);\n    }\n    \n    private boolean isMirror(TreeNode left, TreeNode right) {\n        if (left == null && right == null) return true;\n        if (left == null || right == null) return false;\n        \n        return (left.val == right.val) &&\n               isMirror(left.left, right.right) &&\n               isMirror(left.right, right.left);\n    }\n}", "python": "def is_symmetric(root):\n    def is_mirror(left, right):\n        if not left and not right:\n            return True\n        if not left or not right:\n            return False\n        \n        return (left.val == right.val and\n                is_mirror(left.left, right.right) and\n                is_mirror(left.right, right.left))\n    \n    if not root:\n        return True\n    return is_mirror(root.left, root.right)"}', '[{"input": "[1,2,2,3,4,4,3]", "hidden": false, "expected": "true"}, {"input": "[1,2,2,null,3,null,3]", "hidden": false, "expected": "false"}, {"input": "[1]", "hidden": true, "expected": "true"}]', 49, 2);
INSERT INTO public.puzzles VALUES (1898, 'Maximum Depth of Binary Tree', 'Find maximum depth of binary tree', 'easy', 34, 140, 1, 'Given the root of a binary tree, return its maximum depth. A binary tree''s maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.', '[{"input": "[3,9,20,null,null,15,7]", "output": "3", "explanation": ""}, {"input": "[1,null,2]", "output": "2", "explanation": ""}]', 'The number of nodes in the tree is in the range [0, 10^4]', '["Use recursion", "Max depth = 1 + max(left depth, right depth)"]', '{"c": "int maxDepth(struct TreeNode* root) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int maxDepth(TreeNode root) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def max_depth(root):\n    # Your code here\n    return 0"}', '{"c": "int maxDepth(struct TreeNode* root) {\n    if (!root) return 0;\n    \n    int leftDepth = maxDepth(root->left);\n    int rightDepth = maxDepth(root->right);\n    \n    return 1 + (leftDepth > rightDepth ? leftDepth : rightDepth);\n}", "java": "class Solution {\n    public int maxDepth(TreeNode root) {\n        if (root == null) return 0;\n        \n        int leftDepth = maxDepth(root.left);\n        int rightDepth = maxDepth(root.right);\n        \n        return 1 + Math.max(leftDepth, rightDepth);\n    }\n}", "python": "def max_depth(root):\n    if not root:\n        return 0\n    \n    left_depth = max_depth(root.left)\n    right_depth = max_depth(root.right)\n    \n    return 1 + max(left_depth, right_depth)"}', '[{"input": "[3,9,20,null,null,15,7]", "hidden": false, "expected": "3"}, {"input": "[1,null,2]", "hidden": false, "expected": "2"}, {"input": "[]", "hidden": true, "expected": "0"}]', 50, 1);
INSERT INTO public.puzzles VALUES (1899, 'Length of Last Word', 'Return length of last word in string', 'easy', 32, 120, 1, 'Given a string s consisting of words and spaces, return the length of the last word in the string. A word is a maximal substring consisting of non-space characters only.', '[{"input": "\"Hello World\"", "output": "5", "explanation": "The last word is \"World\" with length 5."}, {"input": "\"   fly me   to   the moon  \"", "output": "4", "explanation": "The last word is \"moon\" with length 4."}, {"input": "\"luffy is still joyboy\"", "output": "6", "explanation": "The last word is \"joyboy\" with length 6."}]', '1 <= s.length <= 10^4', '["Trim trailing spaces", "Find last space before last word"]', '{"c": "int lengthOfLastWord(char* s) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int lengthOfLastWord(String s) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def length_of_last_word(s):\n    # Your code here\n    return 0"}', '{"c": "int lengthOfLastWord(char* s) {\n    int len = strlen(s);\n    int end = len - 1;\n    \n    // Skip trailing spaces\n    while (end >= 0 && s[end] == '' '') {\n        end--;\n    }\n    \n    int start = end;\n    // Find start of last word\n    while (start >= 0 && s[start] != '' '') {\n        start--;\n    }\n    \n    return end - start;\n}", "java": "class Solution {\n    public int lengthOfLastWord(String s) {\n        int end = s.length() - 1;\n        \n        // Skip trailing spaces\n        while (end >= 0 && s.charAt(end) == '' '') {\n            end--;\n        }\n        \n        int start = end;\n        // Find start of last word\n        while (start >= 0 && s.charAt(start) != '' '') {\n            start--;\n        }\n        \n        return end - start;\n    }\n}", "python": "def length_of_last_word(s):\n    end = len(s) - 1\n    \n    # Skip trailing spaces\n    while end >= 0 and s[end] == '' '':\n        end -= 1\n    \n    start = end\n    # Find start of last word\n    while start >= 0 and s[start] != '' '':\n        start -= 1\n    \n    return end - start"}', '[{"input": "\"Hello World\"", "hidden": false, "expected": "5"}, {"input": "\"   fly me   to   the moon  \"", "hidden": false, "expected": "4"}, {"input": "\"luffy is still joyboy\"", "hidden": true, "expected": "6"}]', 51, 1);
INSERT INTO public.puzzles VALUES (1900, 'Sqrt Root', 'Implement integer square root', 'easy', 32, 140, 1, 'Given a non-negative integer x, compute and return the square root of x. Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.', '[{"input": "4", "output": "2", "explanation": "The square root of 4 is 2."}, {"input": "8", "output": "2", "explanation": "The square root of 8 is 2.828..., and since the decimal part is truncated, 2 is returned."}]', '0 <= x <= 2^31 - 1', '["Use binary search", "Find largest integer whose square <= x"]', '{"c": "int mySqrt(int x) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int mySqrt(int x) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def my_sqrt(x):\n    # Your code here\n    return 0"}', '{"c": "int mySqrt(int x) {\n    if (x < 2) return x;\n    \n    long left = 1, right = x / 2;\n    \n    while (left <= right) {\n        long mid = left + (right - left) / 2;\n        long square = mid * mid;\n        \n        if (square == x) {\n            return mid;\n        } else if (square < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return right;\n}", "java": "class Solution {\n    public int mySqrt(int x) {\n        if (x < 2) return x;\n        \n        long left = 1, right = x / 2;\n        \n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            long square = mid * mid;\n            \n            if (square == x) {\n                return (int)mid;\n            } else if (square < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return (int)right;\n    }\n}", "python": "def my_sqrt(x):\n    if x < 2:\n        return x\n    \n    left, right = 1, x // 2\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        square = mid * mid\n        \n        if square == x:\n            return mid\n        elif square < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return right"}', '[{"input": "4", "hidden": false, "expected": "2"}, {"input": "8", "hidden": false, "expected": "2"}, {"input": "1", "hidden": true, "expected": "1"}]', 52, 2);
INSERT INTO public.puzzles VALUES (1901, 'Add Binary', 'Add two binary strings', 'easy', 32, 150, 1, 'Given two binary strings a and b, return their sum as a binary string.', '[{"input": "a = \"11\", b = \"1\"", "output": "\"100\"", "explanation": ""}, {"input": "a = \"1010\", b = \"1011\"", "output": "\"10101\"", "explanation": ""}]', '1 <= a.length, b.length <= 10^4', '["Process from right to left", "Handle carry properly"]', '{"c": "char* addBinary(char* a, char* b) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public String addBinary(String a, String b) {\n        // Your code here\n        return \"\";\n    }\n}", "python": "def add_binary(a, b):\n    # Your code here\n    return \"\""}', '{"c": "char* addBinary(char* a, char* b) {\n    int lenA = strlen(a), lenB = strlen(b);\n    int maxLen = lenA > lenB ? lenA : lenB;\n    char* result = malloc(maxLen + 2);\n    \n    int i = lenA - 1, j = lenB - 1, k = maxLen, carry = 0;\n    result[maxLen + 1] = ''\\0'';\n    \n    while (i >= 0 || j >= 0 || carry) {\n        int sum = carry;\n        if (i >= 0) sum += a[i--] - ''0'';\n        if (j >= 0) sum += b[j--] - ''0'';\n        \n        result[k--] = (sum % 2) + ''0'';\n        carry = sum / 2;\n    }\n    \n    return result + k + 1;\n}", "java": "class Solution {\n    public String addBinary(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        int i = a.length() - 1, j = b.length() - 1, carry = 0;\n        \n        while (i >= 0 || j >= 0 || carry > 0) {\n            int sum = carry;\n            if (i >= 0) sum += a.charAt(i--) - ''0'';\n            if (j >= 0) sum += b.charAt(j--) - ''0'';\n            \n            result.append(sum % 2);\n            carry = sum / 2;\n        }\n        \n        return result.reverse().toString();\n    }\n}", "python": "def add_binary(a, b):\n    result = []\n    i, j, carry = len(a) - 1, len(b) - 1, 0\n    \n    while i >= 0 or j >= 0 or carry:\n        total = carry\n        if i >= 0:\n            total += int(a[i])\n            i -= 1\n        if j >= 0:\n            total += int(b[j])\n            j -= 1\n        \n        result.append(str(total % 2))\n        carry = total // 2\n    \n    return ''''.join(reversed(result))"}', '[{"input": "\"11\", \"1\"", "hidden": false, "expected": "\"100\""}, {"input": "\"1010\", \"1011\"", "hidden": false, "expected": "\"10101\""}, {"input": "\"0\", \"0\"", "hidden": true, "expected": "\"0\""}]', 53, 2);
INSERT INTO public.puzzles VALUES (1902, 'Find All Numbers Disappeared in Array', 'Find missing numbers in array', 'easy', 33, 150, 1, 'Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.', '[{"input": "[4,3,2,7,8,2,3,1]", "output": "[5,6]", "explanation": ""}, {"input": "[1,1]", "output": "[2]", "explanation": ""}]', 'n == nums.length', '["Use array indices as hash", "Mark visited numbers"]', '{"c": "int* findDisappearedNumbers(int* nums, int numsSize, int* returnSize) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "def find_disappeared_numbers(nums):\n    # Your code here\n    return []"}', '{"c": "int* findDisappearedNumbers(int* nums, int numsSize, int* returnSize) {\n    for (int i = 0; i < numsSize; i++) {\n        int index = abs(nums[i]) - 1;\n        if (nums[index] > 0) {\n            nums[index] = -nums[index];\n        }\n    }\n    \n    int* result = malloc(numsSize * sizeof(int));\n    *returnSize = 0;\n    \n    for (int i = 0; i < numsSize; i++) {\n        if (nums[i] > 0) {\n            result[(*returnSize)++] = i + 1;\n        }\n    }\n    return result;\n}", "java": "class Solution {\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        for (int i = 0; i < nums.length; i++) {\n            int index = Math.abs(nums[i]) - 1;\n            if (nums[index] > 0) {\n                nums[index] = -nums[index];\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] > 0) {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}", "python": "def find_disappeared_numbers(nums):\n    for i in range(len(nums)):\n        index = abs(nums[i]) - 1\n        if nums[index] > 0:\n            nums[index] = -nums[index]\n    \n    result = []\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            result.append(i + 1)\n    \n    return result"}', '[{"input": "[4,3,2,7,8,2,3,1]", "hidden": false, "expected": "[5,6]"}, {"input": "[1,1]", "hidden": false, "expected": "[2]"}, {"input": "[1,2,3,4,5]", "hidden": true, "expected": "[]"}]', 54, 2);
INSERT INTO public.puzzles VALUES (1903, 'Same Tree', 'Check if two binary trees are same', 'easy', 34, 140, 1, 'Given the roots of two binary trees p and q, write a function to check if they are the same or not. Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.', '[{"input": "p = [1,2,3], q = [1,2,3]", "output": "true", "explanation": ""}, {"input": "p = [1,2], q = [1,null,2]", "output": "false", "explanation": ""}, {"input": "p = [1,2,1], q = [1,1,2]", "output": "false", "explanation": ""}]', 'The number of nodes in both trees is in the range [0, 100]', '["Use recursion", "Compare structure and values"]', '{"c": "bool isSameTree(struct TreeNode* p, struct TreeNode* q) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        // Your code here\n        return false;\n    }\n}", "python": "def is_same_tree(p, q):\n    # Your code here\n    return False"}', '{"c": "bool isSameTree(struct TreeNode* p, struct TreeNode* q) {\n    if (!p && !q) return true;\n    if (!p || !q) return false;\n    \n    return (p->val == q->val) &&\n           isSameTree(p->left, q->left) &&\n           isSameTree(p->right, q->right);\n}", "java": "class Solution {\n    public boolean isSameTree(TreeNode p, TreeNode q) {\n        if (p == null && q == null) return true;\n        if (p == null || q == null) return false;\n        \n        return (p.val == q.val) &&\n               isSameTree(p.left, q.left) &&\n               isSameTree(p.right, q.right);\n    }\n}", "python": "def is_same_tree(p, q):\n    if not p and not q:\n        return True\n    if not p or not q:\n        return False\n    \n    return (p.val == q.val and\n            is_same_tree(p.left, q.left) and\n            is_same_tree(p.right, q.right))"}', '[{"input": "[1,2,3], [1,2,3]", "hidden": false, "expected": "true"}, {"input": "[1,2], [1,null,2]", "hidden": false, "expected": "false"}, {"input": "[1,2,1], [1,1,2]", "hidden": true, "expected": "false"}]', 55, 1);
INSERT INTO public.puzzles VALUES (1904, 'Invert Binary Tree', 'Invert a binary tree', 'easy', 34, 150, 1, 'Given the root of a binary tree, invert the tree, and return its root.', '[{"input": "[4,2,7,1,3,6,9]", "output": "[4,7,2,9,6,3,1]", "explanation": ""}, {"input": "[2,1,3]", "output": "[2,3,1]", "explanation": ""}, {"input": "[]", "output": "[]", "explanation": ""}]', 'The number of nodes in the tree is in the range [0, 100]', '["Swap left and right children", "Use recursion"]', '{"c": "struct TreeNode* invertTree(struct TreeNode* root) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public TreeNode invertTree(TreeNode root) {\n        // Your code here\n        return null;\n    }\n}", "python": "def invert_tree(root):\n    # Your code here\n    return None"}', '{"c": "struct TreeNode* invertTree(struct TreeNode* root) {\n    if (!root) return NULL;\n    \n    struct TreeNode* temp = root->left;\n    root->left = invertTree(root->right);\n    root->right = invertTree(temp);\n    \n    return root;\n}", "java": "class Solution {\n    public TreeNode invertTree(TreeNode root) {\n        if (root == null) return null;\n        \n        TreeNode temp = root.left;\n        root.left = invertTree(root.right);\n        root.right = invertTree(temp);\n        \n        return root;\n    }\n}", "python": "def invert_tree(root):\n    if not root:\n        return None\n    \n    temp = root.left\n    root.left = invert_tree(root.right)\n    root.right = invert_tree(temp)\n    \n    return root"}', '[{"input": "[4,2,7,1,3,6,9]", "hidden": false, "expected": "[4,7,2,9,6,3,1]"}, {"input": "[2,1,3]", "hidden": false, "expected": "[2,3,1]"}, {"input": "[]", "hidden": true, "expected": "[]"}]', 56, 2);
INSERT INTO public.puzzles VALUES (1905, 'Integer to Roman', 'Convert integer to Roman numeral', 'medium', 32, 200, 2, 'Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M. Given an integer, convert it to a roman numeral.', '[{"input": "3", "output": "\"III\"", "explanation": ""}, {"input": "58", "output": "\"LVIII\"", "explanation": "L = 50, V = 5, III = 3."}, {"input": "1994", "output": "\"MCMXCIV\"", "explanation": "M = 1000, CM = 900, XC = 90 and IV = 4."}]', '1 <= num <= 3999', '["Use value-symbol pairs", "Process from largest to smallest"]', '{"c": "char* intToRoman(int num) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public String intToRoman(int num) {\n        // Your code here\n        return \"\";\n    }\n}", "python": "def int_to_roman(num):\n    # Your code here\n    return \"\""}', '{"c": "char* intToRoman(int num) {\n    int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    char* symbols[] = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n    \n    char* result = malloc(100);\n    result[0] = ''\\0'';\n    \n    for (int i = 0; i < 13; i++) {\n        while (num >= values[i]) {\n            strcat(result, symbols[i]);\n            num -= values[i];\n        }\n    }\n    return result;\n}", "java": "class Solution {\n    public String intToRoman(int num) {\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        \n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < values.length; i++) {\n            while (num >= values[i]) {\n                result.append(symbols[i]);\n                num -= values[i];\n            }\n        }\n        return result.toString();\n    }\n}", "python": "def int_to_roman(num):\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = [''M'', ''CM'', ''D'', ''CD'', ''C'', ''XC'', ''L'', ''XL'', ''X'', ''IX'', ''V'', ''IV'', ''I'']\n    \n    result = []\n    \n    for i in range(len(values)):\n        while num >= values[i]:\n            result.append(symbols[i])\n            num -= values[i]\n    \n    return ''''.join(result)"}', '[{"input": "3", "hidden": false, "expected": "\"III\""}, {"input": "58", "hidden": false, "expected": "\"LVIII\""}, {"input": "1994", "hidden": true, "expected": "\"MCMXCIV\""}]', 57, 3);
INSERT INTO public.puzzles VALUES (1907, '3Sum', 'Find all unique triplets that sum to zero', 'medium', 33, 300, 3, 'Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.', '[{"input": "[-1,0,1,2,-1,-4]", "output": "[[-1,-1,2],[-1,0,1]]", "explanation": ""}, {"input": "[0,1,1]", "output": "[]", "explanation": "The only possible triplet does not sum up to 0."}, {"input": "[0,0,0]", "output": "[[0,0,0]]", "explanation": ""}]', '3 <= nums.length <= 3000', '["Sort the array first", "Use two pointers for each fixed element"]', '{"c": "int** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "def three_sum(nums):\n    # Your code here\n    return []"}', '{"c": "int compare(const void* a, const void* b) {\n    return *(int*)a - *(int*)b;\n}\n\nint** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    qsort(nums, numsSize, sizeof(int), compare);\n    \n    int** result = malloc(numsSize * numsSize * sizeof(int*));\n    *returnColumnSizes = malloc(numsSize * numsSize * sizeof(int));\n    *returnSize = 0;\n    \n    for (int i = 0; i < numsSize - 2; i++) {\n        if (i > 0 && nums[i] == nums[i-1]) continue;\n        \n        int left = i + 1, right = numsSize - 1;\n        while (left < right) {\n            int sum = nums[i] + nums[left] + nums[right];\n            if (sum == 0) {\n                result[*returnSize] = malloc(3 * sizeof(int));\n                result[*returnSize][0] = nums[i];\n                result[*returnSize][1] = nums[left];\n                result[*returnSize][2] = nums[right];\n                (*returnColumnSizes)[*returnSize] = 3;\n                (*returnSize)++;\n                \n                while (left < right && nums[left] == nums[left+1]) left++;\n                while (left < right && nums[right] == nums[right-1]) right--;\n                left++; right--;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return result;\n}", "java": "class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        Arrays.sort(nums);\n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < nums.length - 2; i++) {\n            if (i > 0 && nums[i] == nums[i-1]) continue;\n            \n            int left = i + 1, right = nums.length - 1;\n            while (left < right) {\n                int sum = nums[i] + nums[left] + nums[right];\n                if (sum == 0) {\n                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));\n                    \n                    while (left < right && nums[left] == nums[left+1]) left++;\n                    while (left < right && nums[right] == nums[right-1]) right--;\n                    left++; right--;\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return result;\n    }\n}", "python": "def three_sum(nums):\n    nums.sort()\n    result = []\n    \n    for i in range(len(nums) - 2):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        \n        left, right = i + 1, len(nums) - 1\n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            if total == 0:\n                result.append([nums[i], nums[left], nums[right]])\n                \n                while left < right and nums[left] == nums[left+1]:\n                    left += 1\n                while left < right and nums[right] == nums[right-1]:\n                    right -= 1\n                left += 1\n                right -= 1\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return result"}', '[{"input": "[-1,0,1,2,-1,-4]", "hidden": false, "expected": "[[-1,-1,2],[-1,0,1]]"}, {"input": "[0,1,1]", "hidden": false, "expected": "[]"}, {"input": "[0,0,0]", "hidden": true, "expected": "[[0,0,0]]"}]', 59, 4);
INSERT INTO public.puzzles VALUES (1908, 'Binary Tree Inorder Traversal', 'Return inorder traversal of binary tree', 'easy', 34, 150, 1, 'Given the root of a binary tree, return the inorder traversal of its nodes'' values.', '[{"input": "[1,null,2,3]", "output": "[1,3,2]", "explanation": ""}, {"input": "[]", "output": "[]", "explanation": ""}, {"input": "[1]", "output": "[1]", "explanation": ""}]', 'The number of nodes in the tree is in the range [0, 100]', '["Left, Root, Right order", "Use recursion or stack"]', '{"c": "int* inorderTraversal(struct TreeNode* root, int* returnSize) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "def inorder_traversal(root):\n    # Your code here\n    return []"}', '{"c": "void inorder(struct TreeNode* root, int* result, int* index) {\n    if (!root) return;\n    \n    inorder(root->left, result, index);\n    result[(*index)++] = root->val;\n    inorder(root->right, result, index);\n}\n\nint* inorderTraversal(struct TreeNode* root, int* returnSize) {\n    int* result = malloc(100 * sizeof(int));\n    *returnSize = 0;\n    inorder(root, result, returnSize);\n    return result;\n}", "java": "class Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> result = new ArrayList<>();\n        inorder(root, result);\n        return result;\n    }\n    \n    private void inorder(TreeNode root, List<Integer> result) {\n        if (root == null) return;\n        \n        inorder(root.left, result);\n        result.add(root.val);\n        inorder(root.right, result);\n    }\n}", "python": "def inorder_traversal(root):\n    result = []\n    \n    def inorder(node):\n        if not node:\n            return\n        \n        inorder(node.left)\n        result.append(node.val)\n        inorder(node.right)\n    \n    inorder(root)\n    return result"}', '[{"input": "[1,null,2,3]", "hidden": false, "expected": "[1,3,2]"}, {"input": "[]", "hidden": false, "expected": "[]"}, {"input": "[1]", "hidden": true, "expected": "[1]"}]', 60, 2);
INSERT INTO public.puzzles VALUES (1909, 'Path Sum', 'Check if tree has root-to-leaf path sum', 'easy', 34, 160, 1, 'Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.', '[{"input": "root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22", "output": "true", "explanation": "The root-to-leaf path with the target sum is shown."}, {"input": "root = [1,2,3], targetSum = 5", "output": "false", "explanation": "There two root-to-leaf paths in the tree."}, {"input": "root = [], targetSum = 0", "output": "false", "explanation": "Since the tree is empty, there are no root-to-leaf paths."}]', 'The number of nodes in the tree is in the range [0, 5000]', '["Use recursion", "Subtract current value from target"]', '{"c": "bool hasPathSum(struct TreeNode* root, int targetSum) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean hasPathSum(TreeNode root, int targetSum) {\n        // Your code here\n        return false;\n    }\n}", "python": "def has_path_sum(root, target_sum):\n    # Your code here\n    return False"}', '{"c": "bool hasPathSum(struct TreeNode* root, int targetSum) {\n    if (!root) return false;\n    \n    if (!root->left && !root->right) {\n        return targetSum == root->val;\n    }\n    \n    return hasPathSum(root->left, targetSum - root->val) ||\n           hasPathSum(root->right, targetSum - root->val);\n}", "java": "class Solution {\n    public boolean hasPathSum(TreeNode root, int targetSum) {\n        if (root == null) return false;\n        \n        if (root.left == null && root.right == null) {\n            return targetSum == root.val;\n        }\n        \n        return hasPathSum(root.left, targetSum - root.val) ||\n               hasPathSum(root.right, targetSum - root.val);\n    }\n}", "python": "def has_path_sum(root, target_sum):\n    if not root:\n        return False\n    \n    if not root.left and not root.right:\n        return target_sum == root.val\n    \n    return (has_path_sum(root.left, target_sum - root.val) or\n            has_path_sum(root.right, target_sum - root.val))"}', '[{"input": "[5,4,8,11,null,13,4,7,2,null,null,null,1], 22", "hidden": false, "expected": "true"}, {"input": "[1,2,3], 5", "hidden": false, "expected": "false"}, {"input": "[], 0", "hidden": true, "expected": "false"}]', 61, 2);
INSERT INTO public.puzzles VALUES (1910, 'Factorial Trailing Zeroes', 'Count trailing zeroes in factorial', 'medium', 32, 200, 2, 'Given an integer n, return the number of trailing zeroes in n!. Note that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.', '[{"input": "3", "output": "0", "explanation": "3! = 6, no trailing zero."}, {"input": "5", "output": "1", "explanation": "5! = 120, one trailing zero."}, {"input": "0", "output": "0", "explanation": ""}]', '0 <= n <= 10^4', '["Count factors of 5", "Divide by powers of 5"]', '{"c": "int trailingZeroes(int n) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int trailingZeroes(int n) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def trailing_zeroes(n):\n    # Your code here\n    return 0"}', '{"c": "int trailingZeroes(int n) {\n    int count = 0;\n    while (n >= 5) {\n        n /= 5;\n        count += n;\n    }\n    return count;\n}", "java": "class Solution {\n    public int trailingZeroes(int n) {\n        int count = 0;\n        while (n >= 5) {\n            n /= 5;\n            count += n;\n        }\n        return count;\n    }\n}", "python": "def trailing_zeroes(n):\n    count = 0\n    while n >= 5:\n        n //= 5\n        count += n\n    return count"}', '[{"input": "3", "hidden": false, "expected": "0"}, {"input": "5", "hidden": false, "expected": "1"}, {"input": "25", "hidden": true, "expected": "6"}]', 58, 3);
INSERT INTO public.puzzles VALUES (1911, 'Excel Sheet Column Number', 'Convert Excel column title to number', 'easy', 32, 130, 1, 'Given a string columnTitle that represents the column title as appear in an Excel sheet, return its corresponding column number.', '[{"input": "\"A\"", "output": "1", "explanation": ""}, {"input": "\"AB\"", "output": "28", "explanation": ""}, {"input": "\"ZY\"", "output": "701", "explanation": ""}]', '1 <= columnTitle.length <= 7', '["Use base-26 conversion", "A=1, B=2, ..., Z=26"]', '{"c": "int titleToNumber(char* columnTitle) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int titleToNumber(String columnTitle) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def title_to_number(column_title):\n    # Your code here\n    return 0"}', '{"c": "int titleToNumber(char* columnTitle) {\n    int result = 0;\n    for (int i = 0; columnTitle[i]; i++) {\n        result = result * 26 + (columnTitle[i] - ''A'' + 1);\n    }\n    return result;\n}", "java": "class Solution {\n    public int titleToNumber(String columnTitle) {\n        int result = 0;\n        for (char c : columnTitle.toCharArray()) {\n            result = result * 26 + (c - ''A'' + 1);\n        }\n        return result;\n    }\n}", "python": "def title_to_number(column_title):\n    result = 0\n    for char in column_title:\n        result = result * 26 + (ord(char) - ord(''A'') + 1)\n    return result"}', '[{"input": "\"A\"", "hidden": false, "expected": "1"}, {"input": "\"AB\"", "hidden": false, "expected": "28"}, {"input": "\"ZY\"", "hidden": true, "expected": "701"}]', 59, 2);
INSERT INTO public.puzzles VALUES (1912, 'Majority Element', 'Find majority element in array', 'easy', 32, 140, 1, 'Given an array nums of size n, return the majority element. The majority element is the element that appears more than ‚åän / 2‚åã times.', '[{"input": "[3,2,3]", "output": "3", "explanation": ""}, {"input": "[2,2,1,1,1,2,2]", "output": "2", "explanation": ""}]', 'n == nums.length, 1 <= n <= 5 * 10^4', '["Use Boyer-Moore voting", "Majority element always exists"]', '{"c": "int majorityElement(int* nums, int numsSize) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int majorityElement(int[] nums) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def majority_element(nums):\n    # Your code here\n    return 0"}', '{"c": "int majorityElement(int* nums, int numsSize) {\n    int candidate = nums[0], count = 1;\n    \n    for (int i = 1; i < numsSize; i++) {\n        if (count == 0) {\n            candidate = nums[i];\n            count = 1;\n        } else if (nums[i] == candidate) {\n            count++;\n        } else {\n            count--;\n        }\n    }\n    return candidate;\n}", "java": "class Solution {\n    public int majorityElement(int[] nums) {\n        int candidate = nums[0], count = 1;\n        \n        for (int i = 1; i < nums.length; i++) {\n            if (count == 0) {\n                candidate = nums[i];\n                count = 1;\n            } else if (nums[i] == candidate) {\n                count++;\n            } else {\n                count--;\n            }\n        }\n        return candidate;\n    }\n}", "python": "def majority_element(nums):\n    candidate, count = nums[0], 1\n    \n    for i in range(1, len(nums)):\n        if count == 0:\n            candidate = nums[i]\n            count = 1\n        elif nums[i] == candidate:\n            count += 1\n        else:\n            count -= 1\n    \n    return candidate"}', '[{"input": "[3,2,3]", "hidden": false, "expected": "3"}, {"input": "[2,2,1,1,1,2,2]", "hidden": false, "expected": "2"}, {"input": "[1]", "hidden": true, "expected": "1"}]', 60, 2);
INSERT INTO public.puzzles VALUES (1913, 'Container With Most Water', 'Find container that holds most water', 'medium', 33, 250, 3, 'You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]). Find two lines that together with the x-axis form a container that can hold the most water.', '[{"input": "[1,8,6,2,5,4,8,3,7]", "output": "49", "explanation": "The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49."}, {"input": "[1,1]", "output": "1", "explanation": ""}]', 'n >= 2', '["Use two pointers", "Move pointer with smaller height"]', '{"c": "int maxArea(int* height, int heightSize) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int maxArea(int[] height) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def max_area(height):\n    # Your code here\n    return 0"}', '{"c": "int maxArea(int* height, int heightSize) {\n    int left = 0, right = heightSize - 1;\n    int maxWater = 0;\n    \n    while (left < right) {\n        int h = height[left] < height[right] ? height[left] : height[right];\n        int water = h * (right - left);\n        if (water > maxWater) maxWater = water;\n        \n        if (height[left] < height[right]) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n    return maxWater;\n}", "java": "class Solution {\n    public int maxArea(int[] height) {\n        int left = 0, right = height.length - 1;\n        int maxWater = 0;\n        \n        while (left < right) {\n            int h = Math.min(height[left], height[right]);\n            int water = h * (right - left);\n            maxWater = Math.max(maxWater, water);\n            \n            if (height[left] < height[right]) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n        return maxWater;\n    }\n}", "python": "def max_area(height):\n    left, right = 0, len(height) - 1\n    max_water = 0\n    \n    while left < right:\n        h = min(height[left], height[right])\n        water = h * (right - left)\n        max_water = max(max_water, water)\n        \n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    \n    return max_water"}', '[{"input": "[1,8,6,2,5,4,8,3,7]", "hidden": false, "expected": "49"}, {"input": "[1,1]", "hidden": false, "expected": "1"}, {"input": "[4,3,2,1,4]", "hidden": true, "expected": "16"}]', 61, 4);
INSERT INTO public.puzzles VALUES (1914, 'Rotate Array', 'Rotate array to right by k steps', 'medium', 33, 200, 2, 'Given an array, rotate the array to the right by k steps, where k is non-negative.', '[{"input": "nums = [1,2,3,4,5,6,7], k = 3", "output": "[5,6,7,1,2,3,4]", "explanation": "rotate 1 steps to the right: [7,1,2,3,4,5,6], rotate 2 steps to the right: [6,7,1,2,3,4,5], rotate 3 steps to the right: [5,6,7,1,2,3,4]"}, {"input": "nums = [-1,-100,3,99], k = 2", "output": "[3,99,-1,-100]", "explanation": "rotate 1 steps to the right: [99,-1,-100,3], rotate 2 steps to the right: [3,99,-1,-100]"}]', '1 <= nums.length <= 10^5', '["Use array reversal", "Reverse whole array, then parts"]', '{"c": "void rotate(int* nums, int numsSize, int k) {\n    // Your code here\n}", "java": "class Solution {\n    public void rotate(int[] nums, int k) {\n        // Your code here\n    }\n}", "python": "def rotate(nums, k):\n    # Your code here\n    pass"}', '{"c": "void reverse(int* nums, int start, int end) {\n    while (start < end) {\n        int temp = nums[start];\n        nums[start] = nums[end];\n        nums[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nvoid rotate(int* nums, int numsSize, int k) {\n    k %= numsSize;\n    reverse(nums, 0, numsSize - 1);\n    reverse(nums, 0, k - 1);\n    reverse(nums, k, numsSize - 1);\n}", "java": "class Solution {\n    public void rotate(int[] nums, int k) {\n        k %= nums.length;\n        reverse(nums, 0, nums.length - 1);\n        reverse(nums, 0, k - 1);\n        reverse(nums, k, nums.length - 1);\n    }\n    \n    private void reverse(int[] nums, int start, int end) {\n        while (start < end) {\n            int temp = nums[start];\n            nums[start] = nums[end];\n            nums[end] = temp;\n            start++;\n            end--;\n        }\n    }\n}", "python": "def rotate(nums, k):\n    def reverse(start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n    \n    n = len(nums)\n    k %= n\n    reverse(0, n - 1)\n    reverse(0, k - 1)\n    reverse(k, n - 1)"}', '[{"input": "[1,2,3,4,5,6,7], 3", "hidden": false, "expected": "[5,6,7,1,2,3,4]"}, {"input": "[-1,-100,3,99], 2", "hidden": false, "expected": "[3,99,-1,-100]"}, {"input": "[1,2], 1", "hidden": true, "expected": "[2,1]"}]', 62, 3);
INSERT INTO public.puzzles VALUES (1915, 'Min Stack', 'Design stack with min operation', 'medium', 34, 220, 2, 'Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.', '[{"input": "[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\\n[[],[-2],[0],[-3],[],[],[],[]]", "output": "[null,null,null,null,-3,null,0,-2]", "explanation": "MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); // return -3 minStack.pop(); minStack.top();    // return 0 minStack.getMin(); // return -2"}]', '-2^31 <= val <= 2^31 - 1', '["Use auxiliary stack for minimums", "Keep track of min at each level"]', '{"c": "typedef struct {\n    // Your data structure here\n} MinStack;\n\nMinStack* minStackCreate() {\n    // Your code here\n    return NULL;\n}\n\nvoid minStackPush(MinStack* obj, int val) {\n    // Your code here\n}\n\nvoid minStackPop(MinStack* obj) {\n    // Your code here\n}\n\nint minStackTop(MinStack* obj) {\n    // Your code here\n    return 0;\n}\n\nint minStackGetMin(MinStack* obj) {\n    // Your code here\n    return 0;\n}\n\nvoid minStackFree(MinStack* obj) {\n    // Your code here\n}", "java": "class MinStack {\n\n    public MinStack() {\n        // Your code here\n    }\n    \n    public void push(int val) {\n        // Your code here\n    }\n    \n    public void pop() {\n        // Your code here\n    }\n    \n    public int top() {\n        // Your code here\n        return 0;\n    }\n    \n    public int getMin() {\n        // Your code here\n        return 0;\n    }\n}", "python": "class MinStack:\n\n    def __init__(self):\n        # Your code here\n        pass\n\n    def push(self, val: int) -> None:\n        # Your code here\n        pass\n\n    def pop(self) -> None:\n        # Your code here\n        pass\n\n    def top(self) -> int:\n        # Your code here\n        return 0\n\n    def getMin(self) -> int:\n        # Your code here\n        return 0"}', '{"c": "typedef struct {\n    int* stack;\n    int* minStack;\n    int top;\n    int capacity;\n} MinStack;\n\nMinStack* minStackCreate() {\n    MinStack* obj = malloc(sizeof(MinStack));\n    obj->capacity = 1000;\n    obj->stack = malloc(obj->capacity * sizeof(int));\n    obj->minStack = malloc(obj->capacity * sizeof(int));\n    obj->top = -1;\n    return obj;\n}\n\nvoid minStackPush(MinStack* obj, int val) {\n    obj->stack[++obj->top] = val;\n    if (obj->top == 0 || val <= obj->minStack[obj->top - 1]) {\n        obj->minStack[obj->top] = val;\n    } else {\n        obj->minStack[obj->top] = obj->minStack[obj->top - 1];\n    }\n}\n\nvoid minStackPop(MinStack* obj) {\n    obj->top--;\n}\n\nint minStackTop(MinStack* obj) {\n    return obj->stack[obj->top];\n}\n\nint minStackGetMin(MinStack* obj) {\n    return obj->minStack[obj->top];\n}\n\nvoid minStackFree(MinStack* obj) {\n    free(obj->stack);\n    free(obj->minStack);\n    free(obj);\n}", "java": "class MinStack {\n    private Stack<Integer> stack;\n    private Stack<Integer> minStack;\n\n    public MinStack() {\n        stack = new Stack<>();\n        minStack = new Stack<>();\n    }\n    \n    public void push(int val) {\n        stack.push(val);\n        if (minStack.isEmpty() || val <= minStack.peek()) {\n            minStack.push(val);\n        }\n    }\n    \n    public void pop() {\n        if (stack.peek().equals(minStack.peek())) {\n            minStack.pop();\n        }\n        stack.pop();\n    }\n    \n    public int top() {\n        return stack.peek();\n    }\n    \n    public int getMin() {\n        return minStack.peek();\n    }\n}", "python": "class MinStack:\n\n    def __init__(self):\n        self.stack = []\n        self.min_stack = []\n\n    def push(self, val: int) -> None:\n        self.stack.append(val)\n        if not self.min_stack or val <= self.min_stack[-1]:\n            self.min_stack.append(val)\n\n    def pop(self) -> None:\n        if self.stack[-1] == self.min_stack[-1]:\n            self.min_stack.pop()\n        self.stack.pop()\n\n    def top(self) -> int:\n        return self.stack[-1]\n\n    def getMin(self) -> int:\n        return self.min_stack[-1]"}', '[{"input": "push(-2), push(0), push(-3), getMin(), pop(), top(), getMin()", "hidden": false, "expected": "null, null, null, -3, null, 0, -2"}, {"input": "push(1), push(2), getMin(), pop(), getMin()", "hidden": false, "expected": "null, null, 1, null, 1"}, {"input": "push(0), push(1), push(0), getMin(), pop(), getMin()", "hidden": true, "expected": "null, null, null, 0, null, 0"}]', 63, 4);
INSERT INTO public.puzzles VALUES (1917, 'Valid Sudoku', 'Check if Sudoku board is valid', 'medium', 32, 220, 2, 'Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: Each row must contain the digits 1-9 without repetition. Each column must contain the digits 1-9 without repetition. Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.', '[{"input": "board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]", "output": "true", "explanation": ""}]', 'board.length == 9, board[i].length == 9', '["Use sets to track seen numbers", "Check rows, columns, and 3x3 boxes"]', '{"c": "bool isValidSudoku(char** board, int boardSize, int* boardColSize) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean isValidSudoku(char[][] board) {\n        // Your code here\n        return false;\n    }\n}", "python": "def is_valid_sudoku(board):\n    # Your code here\n    return False"}', '{"c": "bool isValidSudoku(char** board, int boardSize, int* boardColSize) {\n    bool rows[9][9] = {0}, cols[9][9] = {0}, boxes[9][9] = {0};\n    \n    for (int i = 0; i < 9; i++) {\n        for (int j = 0; j < 9; j++) {\n            if (board[i][j] != ''.'') {\n                int num = board[i][j] - ''1'';\n                int boxIndex = (i / 3) * 3 + j / 3;\n                \n                if (rows[i][num] || cols[j][num] || boxes[boxIndex][num]) {\n                    return false;\n                }\n                \n                rows[i][num] = cols[j][num] = boxes[boxIndex][num] = true;\n            }\n        }\n    }\n    return true;\n}", "java": "class Solution {\n    public boolean isValidSudoku(char[][] board) {\n        boolean[][] rows = new boolean[9][9];\n        boolean[][] cols = new boolean[9][9];\n        boolean[][] boxes = new boolean[9][9];\n        \n        for (int i = 0; i < 9; i++) {\n            for (int j = 0; j < 9; j++) {\n                if (board[i][j] != ''.'') {\n                    int num = board[i][j] - ''1'';\n                    int boxIndex = (i / 3) * 3 + j / 3;\n                    \n                    if (rows[i][num] || cols[j][num] || boxes[boxIndex][num]) {\n                        return false;\n                    }\n                    \n                    rows[i][num] = cols[j][num] = boxes[boxIndex][num] = true;\n                }\n            }\n        }\n        return true;\n    }\n}", "python": "def is_valid_sudoku(board):\n    rows = [set() for _ in range(9)]\n    cols = [set() for _ in range(9)]\n    boxes = [set() for _ in range(9)]\n    \n    for i in range(9):\n        for j in range(9):\n            if board[i][j] != ''.'':\n                num = board[i][j]\n                box_index = (i // 3) * 3 + j // 3\n                \n                if num in rows[i] or num in cols[j] or num in boxes[box_index]:\n                    return False\n                \n                rows[i].add(num)\n                cols[j].add(num)\n                boxes[box_index].add(num)\n    \n    return True"}', '[{"input": "Valid 9x9 Sudoku board", "hidden": false, "expected": "true"}, {"input": "Invalid board with duplicate in row", "hidden": false, "expected": "false"}, {"input": "Invalid board with duplicate in 3x3 box", "hidden": true, "expected": "false"}]', 65, 4);
INSERT INTO public.puzzles VALUES (1918, 'Next Permutation', 'Find next lexicographical permutation', 'medium', 33, 250, 3, 'A permutation of an array of integers is an arrangement of its members into a sequence or linear order. The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container.', '[{"input": "[1,2,3]", "output": "[1,3,2]", "explanation": ""}, {"input": "[3,2,1]", "output": "[1,2,3]", "explanation": ""}, {"input": "[1,1,5]", "output": "[1,5,1]", "explanation": ""}]', '1 <= nums.length <= 100', '["Find rightmost ascending pair", "Reverse suffix after swap"]', '{"c": "void nextPermutation(int* nums, int numsSize) {\n    // Your code here\n}", "java": "class Solution {\n    public void nextPermutation(int[] nums) {\n        // Your code here\n    }\n}", "python": "def next_permutation(nums):\n    # Your code here\n    pass"}', '{"c": "void reverse(int* nums, int start, int end) {\n    while (start < end) {\n        int temp = nums[start];\n        nums[start] = nums[end];\n        nums[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nvoid nextPermutation(int* nums, int numsSize) {\n    int i = numsSize - 2;\n    while (i >= 0 && nums[i] >= nums[i + 1]) {\n        i--;\n    }\n    \n    if (i >= 0) {\n        int j = numsSize - 1;\n        while (nums[j] <= nums[i]) {\n            j--;\n        }\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n    \n    reverse(nums, i + 1, numsSize - 1);\n}", "java": "class Solution {\n    public void nextPermutation(int[] nums) {\n        int i = nums.length - 2;\n        while (i >= 0 && nums[i] >= nums[i + 1]) {\n            i--;\n        }\n        \n        if (i >= 0) {\n            int j = nums.length - 1;\n            while (nums[j] <= nums[i]) {\n                j--;\n            }\n            swap(nums, i, j);\n        }\n        \n        reverse(nums, i + 1);\n    }\n    \n    private void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n    \n    private void reverse(int[] nums, int start) {\n        int i = start, j = nums.length - 1;\n        while (i < j) {\n            swap(nums, i, j);\n            i++;\n            j--;\n        }\n    }\n}", "python": "def next_permutation(nums):\n    i = len(nums) - 2\n    while i >= 0 and nums[i] >= nums[i + 1]:\n        i -= 1\n    \n    if i >= 0:\n        j = len(nums) - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        nums[i], nums[j] = nums[j], nums[i]\n    \n    nums[i + 1:] = reversed(nums[i + 1:])"}', '[{"input": "[1,2,3]", "hidden": false, "expected": "[1,3,2]"}, {"input": "[3,2,1]", "hidden": false, "expected": "[1,2,3]"}, {"input": "[1,1,5]", "hidden": true, "expected": "[1,5,1]"}]', 66, 4);
INSERT INTO public.puzzles VALUES (1919, 'Valid Binary Search Tree', 'Check if binary tree is valid BST', 'medium', 34, 200, 2, 'Given the root of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node''s key. The right subtree of a node contains only nodes with keys greater than the node''s key. Both the left and right subtrees must also be binary search trees.', '[{"input": "[2,1,3]", "output": "true", "explanation": ""}, {"input": "[5,1,4,null,null,3,6]", "output": "false", "explanation": "The root node''s value is 5 but its right child''s value is 4."}]', 'The number of nodes in the tree is in the range [1, 10^4]', '["Use min/max bounds", "Check bounds for each subtree"]', '{"c": "bool isValidBST(struct TreeNode* root) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean isValidBST(TreeNode root) {\n        // Your code here\n        return false;\n    }\n}", "python": "def is_valid_bst(root):\n    # Your code here\n    return False"}', '{"c": "bool validate(struct TreeNode* node, long minVal, long maxVal) {\n    if (!node) return true;\n    \n    if (node->val <= minVal || node->val >= maxVal) {\n        return false;\n    }\n    \n    return validate(node->left, minVal, node->val) &&\n           validate(node->right, node->val, maxVal);\n}\n\nbool isValidBST(struct TreeNode* root) {\n    return validate(root, LONG_MIN, LONG_MAX);\n}", "java": "class Solution {\n    public boolean isValidBST(TreeNode root) {\n        return validate(root, Long.MIN_VALUE, Long.MAX_VALUE);\n    }\n    \n    private boolean validate(TreeNode node, long minVal, long maxVal) {\n        if (node == null) return true;\n        \n        if (node.val <= minVal || node.val >= maxVal) {\n            return false;\n        }\n        \n        return validate(node.left, minVal, node.val) &&\n               validate(node.right, node.val, maxVal);\n    }\n}", "python": "def is_valid_bst(root):\n    def validate(node, min_val, max_val):\n        if not node:\n            return True\n        \n        if node.val <= min_val or node.val >= max_val:\n            return False\n        \n        return (validate(node.left, min_val, node.val) and\n                validate(node.right, node.val, max_val))\n    \n    return validate(root, float(''-inf''), float(''inf''))"}', '[{"input": "[2,1,3]", "hidden": false, "expected": "true"}, {"input": "[5,1,4,null,null,3,6]", "hidden": false, "expected": "false"}, {"input": "[1]", "hidden": true, "expected": "true"}]', 67, 3);
INSERT INTO public.puzzles VALUES (1920, 'Binary Tree Level Order Traversal', 'Return level order traversal of binary tree', 'medium', 34, 180, 2, 'Given the root of a binary tree, return the level order traversal of its nodes'' values. (i.e., from left to right, level by level).', '[{"input": "[3,9,20,null,null,15,7]", "output": "[[3],[9,20],[15,7]]", "explanation": ""}, {"input": "[1]", "output": "[[1]]", "explanation": ""}, {"input": "[]", "output": "[]", "explanation": ""}]', 'The number of nodes in the tree is in the range [0, 2000]', '["Use BFS with queue", "Process level by level"]', '{"c": "int** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "def level_order(root):\n    # Your code here\n    return []"}', '{"c": "int** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes) {\n    if (!root) {\n        *returnSize = 0;\n        return NULL;\n    }\n    \n    int** result = malloc(2000 * sizeof(int*));\n    *returnColumnSizes = malloc(2000 * sizeof(int));\n    *returnSize = 0;\n    \n    struct TreeNode* queue[2000];\n    int front = 0, rear = 0;\n    queue[rear++] = root;\n    \n    while (front < rear) {\n        int levelSize = rear - front;\n        result[*returnSize] = malloc(levelSize * sizeof(int));\n        (*returnColumnSizes)[*returnSize] = levelSize;\n        \n        for (int i = 0; i < levelSize; i++) {\n            struct TreeNode* node = queue[front++];\n            result[*returnSize][i] = node->val;\n            \n            if (node->left) queue[rear++] = node->left;\n            if (node->right) queue[rear++] = node->right;\n        }\n        (*returnSize)++;\n    }\n    return result;\n}", "java": "class Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (root == null) return result;\n        \n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        \n        while (!queue.isEmpty()) {\n            int levelSize = queue.size();\n            List<Integer> level = new ArrayList<>();\n            \n            for (int i = 0; i < levelSize; i++) {\n                TreeNode node = queue.poll();\n                level.add(node.val);\n                \n                if (node.left != null) queue.offer(node.left);\n                if (node.right != null) queue.offer(node.right);\n            }\n            result.add(level);\n        }\n        return result;\n    }\n}", "python": "def level_order(root):\n    if not root:\n        return []\n    \n    result = []\n    queue = [root]\n    \n    while queue:\n        level_size = len(queue)\n        level = []\n        \n        for _ in range(level_size):\n            node = queue.pop(0)\n            level.append(node.val)\n            \n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        \n        result.append(level)\n    \n    return result"}', '[{"input": "[3,9,20,null,null,15,7]", "hidden": false, "expected": "[[3],[9,20],[15,7]]"}, {"input": "[1]", "hidden": false, "expected": "[[1]]"}, {"input": "[]", "hidden": true, "expected": "[]"}]', 68, 3);
INSERT INTO public.puzzles VALUES (1921, 'Generate Parentheses', 'Generate all valid parentheses combinations', 'medium', 32, 220, 2, 'Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.', '[{"input": "3", "output": "[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]", "explanation": ""}, {"input": "1", "output": "[\"()\"]", "explanation": ""}]', '1 <= n <= 8', '["Use backtracking", "Track open and close count"]', '{"c": "char** generateParenthesis(int n, int* returnSize) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public List<String> generateParenthesis(int n) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "def generate_parenthesis(n):\n    # Your code here\n    return []"}', '{"c": "void backtrack(char** result, int* returnSize, char* current, int pos, int open, int close, int n) {\n    if (pos == 2 * n) {\n        current[pos] = ''\\0'';\n        result[*returnSize] = malloc((2 * n + 1) * sizeof(char));\n        strcpy(result[*returnSize], current);\n        (*returnSize)++;\n        return;\n    }\n    \n    if (open < n) {\n        current[pos] = ''('';\n        backtrack(result, returnSize, current, pos + 1, open + 1, close, n);\n    }\n    \n    if (close < open) {\n        current[pos] = '')'';\n        backtrack(result, returnSize, current, pos + 1, open, close + 1, n);\n    }\n}\n\nchar** generateParenthesis(int n, int* returnSize) {\n    char** result = malloc(10000 * sizeof(char*));\n    char* current = malloc((2 * n + 1) * sizeof(char));\n    *returnSize = 0;\n    backtrack(result, returnSize, current, 0, 0, 0, n);\n    free(current);\n    return result;\n}", "java": "class Solution {\n    public List<String> generateParenthesis(int n) {\n        List<String> result = new ArrayList<>();\n        backtrack(result, new StringBuilder(), 0, 0, n);\n        return result;\n    }\n    \n    private void backtrack(List<String> result, StringBuilder current, int open, int close, int n) {\n        if (current.length() == 2 * n) {\n            result.add(current.toString());\n            return;\n        }\n        \n        if (open < n) {\n            current.append(''('');\n            backtrack(result, current, open + 1, close, n);\n            current.deleteCharAt(current.length() - 1);\n        }\n        \n        if (close < open) {\n            current.append('')'');\n            backtrack(result, current, open, close + 1, n);\n            current.deleteCharAt(current.length() - 1);\n        }\n    }\n}", "python": "def generate_parenthesis(n):\n    result = []\n    \n    def backtrack(current, open_count, close_count):\n        if len(current) == 2 * n:\n            result.append(current)\n            return\n        \n        if open_count < n:\n            backtrack(current + ''('', open_count + 1, close_count)\n        \n        if close_count < open_count:\n            backtrack(current + '')'', open_count, close_count + 1)\n    \n    backtrack('''', 0, 0)\n    return result"}', '[{"input": "3", "hidden": false, "expected": "[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]"}, {"input": "1", "hidden": false, "expected": "[\"()\"]"}, {"input": "2", "hidden": true, "expected": "[\"(())\",\"()()\"]"}]', 69, 4);
INSERT INTO public.puzzles VALUES (1922, 'Letter Combinations of Phone Number', 'Generate letter combinations from phone digits', 'medium', 32, 200, 2, 'Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order. A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.', '[{"input": "\"23\"", "output": "[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]", "explanation": ""}, {"input": "\"\"", "output": "[]", "explanation": ""}, {"input": "\"2\"", "output": "[\"a\",\"b\",\"c\"]", "explanation": ""}]', '0 <= digits.length <= 4', '["Use backtracking", "Map digits to letters"]', '{"c": "char** letterCombinations(char* digits, int* returnSize) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public List<String> letterCombinations(String digits) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "def letter_combinations(digits):\n    # Your code here\n    return []"}', '{"c": "char* mapping[] = {\"\", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n\nvoid backtrack(char* digits, char** result, int* returnSize, char* current, int index) {\n    if (index == strlen(digits)) {\n        result[*returnSize] = malloc((strlen(digits) + 1) * sizeof(char));\n        strcpy(result[*returnSize], current);\n        (*returnSize)++;\n        return;\n    }\n    \n    int digit = digits[index] - ''0'';\n    char* letters = mapping[digit];\n    \n    for (int i = 0; letters[i]; i++) {\n        current[index] = letters[i];\n        current[index + 1] = ''\\0'';\n        backtrack(digits, result, returnSize, current, index + 1);\n    }\n}\n\nchar** letterCombinations(char* digits, int* returnSize) {\n    *returnSize = 0;\n    if (strlen(digits) == 0) return NULL;\n    \n    char** result = malloc(1000 * sizeof(char*));\n    char* current = malloc(5 * sizeof(char));\n    backtrack(digits, result, returnSize, current, 0);\n    free(current);\n    return result;\n}", "java": "class Solution {\n    private String[] mapping = {\"\", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n    \n    public List<String> letterCombinations(String digits) {\n        List<String> result = new ArrayList<>();\n        if (digits.length() == 0) return result;\n        \n        backtrack(digits, result, new StringBuilder(), 0);\n        return result;\n    }\n    \n    private void backtrack(String digits, List<String> result, StringBuilder current, int index) {\n        if (index == digits.length()) {\n            result.add(current.toString());\n            return;\n        }\n        \n        String letters = mapping[digits.charAt(index) - ''0''];\n        for (char c : letters.toCharArray()) {\n            current.append(c);\n            backtrack(digits, result, current, index + 1);\n            current.deleteCharAt(current.length() - 1);\n        }\n    }\n}", "python": "def letter_combinations(digits):\n    if not digits:\n        return []\n    \n    mapping = {\n        ''2'': ''abc'', ''3'': ''def'', ''4'': ''ghi'', ''5'': ''jkl'',\n        ''6'': ''mno'', ''7'': ''pqrs'', ''8'': ''tuv'', ''9'': ''wxyz''\n    }\n    \n    result = []\n    \n    def backtrack(current, index):\n        if index == len(digits):\n            result.append(current)\n            return\n        \n        letters = mapping[digits[index]]\n        for letter in letters:\n            backtrack(current + letter, index + 1)\n    \n    backtrack('''', 0)\n    return result"}', '[{"input": "\"23\"", "hidden": false, "expected": "[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]"}, {"input": "\"\"", "hidden": false, "expected": "[]"}, {"input": "\"2\"", "hidden": true, "expected": "[\"a\",\"b\",\"c\"]"}]', 70, 3);
INSERT INTO public.puzzles VALUES (1923, 'Longest Substring Without Repeating Characters', 'Find longest substring without repeating characters', 'medium', 33, 250, 3, 'Given a string s, find the length of the longest substring without repeating characters.', '[{"input": "\"abcabcbb\"", "output": "3", "explanation": "The answer is \"abc\", with the length of 3."}, {"input": "\"bbbbb\"", "output": "1", "explanation": "The answer is \"b\", with the length of 1."}, {"input": "\"pwwkew\"", "output": "3", "explanation": "The answer is \"wke\", with the length of 3."}]', '0 <= s.length <= 5 * 10^4', '["Use sliding window", "Track character positions"]', '{"c": "int lengthOfLongestSubstring(char* s) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def length_of_longest_substring(s):\n    # Your code here\n    return 0"}', '{"c": "int lengthOfLongestSubstring(char* s) {\n    int charIndex[128];\n    for (int i = 0; i < 128; i++) charIndex[i] = -1;\n    \n    int maxLength = 0, start = 0;\n    \n    for (int i = 0; s[i]; i++) {\n        if (charIndex[s[i]] >= start) {\n            start = charIndex[s[i]] + 1;\n        }\n        charIndex[s[i]] = i;\n        int currentLength = i - start + 1;\n        if (currentLength > maxLength) {\n            maxLength = currentLength;\n        }\n    }\n    return maxLength;\n}", "java": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        Map<Character, Integer> charIndex = new HashMap<>();\n        int maxLength = 0, start = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (charIndex.containsKey(c) && charIndex.get(c) >= start) {\n                start = charIndex.get(c) + 1;\n            }\n            charIndex.put(c, i);\n            maxLength = Math.max(maxLength, i - start + 1);\n        }\n        return maxLength;\n    }\n}", "python": "def length_of_longest_substring(s):\n    char_index = {}\n    max_length = start = 0\n    \n    for i, char in enumerate(s):\n        if char in char_index and char_index[char] >= start:\n            start = char_index[char] + 1\n        char_index[char] = i\n        max_length = max(max_length, i - start + 1)\n    \n    return max_length"}', '[{"input": "\"abcabcbb\"", "hidden": false, "expected": "3"}, {"input": "\"bbbbb\"", "hidden": false, "expected": "1"}, {"input": "\"pwwkew\"", "hidden": true, "expected": "3"}]', 71, 4);
INSERT INTO public.puzzles VALUES (1924, 'Lowest Common Ancestor of Binary Tree', 'Find LCA of two nodes in binary tree', 'medium', 34, 220, 2, 'Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. According to the definition of LCA on Wikipedia: "The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself)."', '[{"input": "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1", "output": "3", "explanation": "The LCA of nodes 5 and 1 is 3."}, {"input": "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4", "output": "5", "explanation": "The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition."}]', 'The number of nodes in the tree is in the range [2, 10^5]', '["Use post-order traversal", "Return node if it''s p or q"]', '{"c": "struct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        // Your code here\n        return null;\n    }\n}", "python": "def lowest_common_ancestor(root, p, q):\n    # Your code here\n    return None"}', '{"c": "struct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\n    if (!root || root == p || root == q) {\n        return root;\n    }\n    \n    struct TreeNode* left = lowestCommonAncestor(root->left, p, q);\n    struct TreeNode* right = lowestCommonAncestor(root->right, p, q);\n    \n    if (left && right) {\n        return root;\n    }\n    \n    return left ? left : right;\n}", "java": "class Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        if (root == null || root == p || root == q) {\n            return root;\n        }\n        \n        TreeNode left = lowestCommonAncestor(root.left, p, q);\n        TreeNode right = lowestCommonAncestor(root.right, p, q);\n        \n        if (left != null && right != null) {\n            return root;\n        }\n        \n        return left != null ? left : right;\n    }\n}", "python": "def lowest_common_ancestor(root, p, q):\n    if not root or root == p or root == q:\n        return root\n    \n    left = lowest_common_ancestor(root.left, p, q)\n    right = lowest_common_ancestor(root.right, p, q)\n    \n    if left and right:\n        return root\n    \n    return left if left else right"}', '[{"input": "[3,5,1,6,2,0,8,null,null,7,4], 5, 1", "hidden": false, "expected": "3"}, {"input": "[3,5,1,6,2,0,8,null,null,7,4], 5, 4", "hidden": false, "expected": "5"}, {"input": "[1,2], 1, 2", "hidden": true, "expected": "1"}]', 72, 4);
INSERT INTO public.puzzles VALUES (1925, 'Permutations', 'Generate all permutations of array', 'medium', 32, 200, 2, 'Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.', '[{"input": "[1,2,3]", "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]", "explanation": ""}, {"input": "[0,1]", "output": "[[0,1],[1,0]]", "explanation": ""}, {"input": "[1]", "output": "[[1]]", "explanation": ""}]', '1 <= nums.length <= 6', '["Use backtracking", "Swap elements to generate permutations"]', '{"c": "int** permute(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "def permute(nums):\n    # Your code here\n    return []"}', '{"c": "void backtrack(int** result, int* returnSize, int** returnColumnSizes, int* nums, int numsSize, int* current, int* used, int index) {\n    if (index == numsSize) {\n        result[*returnSize] = malloc(numsSize * sizeof(int));\n        for (int i = 0; i < numsSize; i++) {\n            result[*returnSize][i] = current[i];\n        }\n        (*returnColumnSizes)[*returnSize] = numsSize;\n        (*returnSize)++;\n        return;\n    }\n    \n    for (int i = 0; i < numsSize; i++) {\n        if (!used[i]) {\n            current[index] = nums[i];\n            used[i] = 1;\n            backtrack(result, returnSize, returnColumnSizes, nums, numsSize, current, used, index + 1);\n            used[i] = 0;\n        }\n    }\n}\n\nint** permute(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    int factorial = 1;\n    for (int i = 1; i <= numsSize; i++) factorial *= i;\n    \n    int** result = malloc(factorial * sizeof(int*));\n    *returnColumnSizes = malloc(factorial * sizeof(int));\n    int* current = malloc(numsSize * sizeof(int));\n    int* used = calloc(numsSize, sizeof(int));\n    *returnSize = 0;\n    \n    backtrack(result, returnSize, returnColumnSizes, nums, numsSize, current, used, 0);\n    \n    free(current);\n    free(used);\n    return result;\n}", "java": "class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        List<List<Integer>> result = new ArrayList<>();\n        backtrack(result, new ArrayList<>(), nums);\n        return result;\n    }\n    \n    private void backtrack(List<List<Integer>> result, List<Integer> current, int[] nums) {\n        if (current.size() == nums.length) {\n            result.add(new ArrayList<>(current));\n            return;\n        }\n        \n        for (int num : nums) {\n            if (current.contains(num)) continue;\n            current.add(num);\n            backtrack(result, current, nums);\n            current.remove(current.size() - 1);\n        }\n    }\n}", "python": "def permute(nums):\n    result = []\n    \n    def backtrack(current):\n        if len(current) == len(nums):\n            result.append(current[:])\n            return\n        \n        for num in nums:\n            if num not in current:\n                current.append(num)\n                backtrack(current)\n                current.pop()\n    \n    backtrack([])\n    return result"}', '[{"input": "[1,2,3]", "hidden": false, "expected": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]"}, {"input": "[0,1]", "hidden": false, "expected": "[[0,1],[1,0]]"}, {"input": "[1]", "hidden": true, "expected": "[[1]]"}]', 73, 3);
INSERT INTO public.puzzles VALUES (1926, 'Subsets', 'Generate all possible subsets', 'medium', 32, 190, 2, 'Given an integer array nums of unique elements, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order.', '[{"input": "[1,2,3]", "output": "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]", "explanation": ""}, {"input": "[0]", "output": "[[],[0]]", "explanation": ""}]', '1 <= nums.length <= 10', '["Use backtracking", "Include or exclude each element"]', '{"c": "int** subsets(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "def subsets(nums):\n    # Your code here\n    return []"}', '{"c": "void backtrack(int** result, int* returnSize, int** returnColumnSizes, int* nums, int numsSize, int* current, int currentSize, int start) {\n    result[*returnSize] = malloc(currentSize * sizeof(int));\n    for (int i = 0; i < currentSize; i++) {\n        result[*returnSize][i] = current[i];\n    }\n    (*returnColumnSizes)[*returnSize] = currentSize;\n    (*returnSize)++;\n    \n    for (int i = start; i < numsSize; i++) {\n        current[currentSize] = nums[i];\n        backtrack(result, returnSize, returnColumnSizes, nums, numsSize, current, currentSize + 1, i + 1);\n    }\n}\n\nint** subsets(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    int totalSubsets = 1 << numsSize;\n    int** result = malloc(totalSubsets * sizeof(int*));\n    *returnColumnSizes = malloc(totalSubsets * sizeof(int));\n    int* current = malloc(numsSize * sizeof(int));\n    *returnSize = 0;\n    \n    backtrack(result, returnSize, returnColumnSizes, nums, numsSize, current, 0, 0);\n    \n    free(current);\n    return result;\n}", "java": "class Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        List<List<Integer>> result = new ArrayList<>();\n        backtrack(result, new ArrayList<>(), nums, 0);\n        return result;\n    }\n    \n    private void backtrack(List<List<Integer>> result, List<Integer> current, int[] nums, int start) {\n        result.add(new ArrayList<>(current));\n        \n        for (int i = start; i < nums.length; i++) {\n            current.add(nums[i]);\n            backtrack(result, current, nums, i + 1);\n            current.remove(current.size() - 1);\n        }\n    }\n}", "python": "def subsets(nums):\n    result = []\n    \n    def backtrack(current, start):\n        result.append(current[:])\n        \n        for i in range(start, len(nums)):\n            current.append(nums[i])\n            backtrack(current, i + 1)\n            current.pop()\n    \n    backtrack([], 0)\n    return result"}', '[{"input": "[1,2,3]", "hidden": false, "expected": "[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]"}, {"input": "[0]", "hidden": false, "expected": "[[],[0]]"}, {"input": "[1,2]", "hidden": true, "expected": "[[],[1],[2],[1,2]]"}]', 74, 3);
INSERT INTO public.puzzles VALUES (1927, 'Combination Sum', 'Find combinations that sum to target', 'medium', 32, 210, 2, 'Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order. The same number may be chosen from candidates an unlimited number of times.', '[{"input": "candidates = [2,3,6,7], target = 7", "output": "[[2,2,3],[7]]", "explanation": "2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times. 7 is a candidate, and 7 = 7."}, {"input": "candidates = [2,3,5], target = 8", "output": "[[2,2,2,2],[2,3,3],[3,5]]", "explanation": ""}, {"input": "candidates = [2], target = 1", "output": "[]", "explanation": ""}]', '1 <= candidates.length <= 30', '["Use backtracking", "Allow reusing same element"]', '{"c": "int** combinationSum(int* candidates, int candidatesSize, int target, int* returnSize, int** returnColumnSizes) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "def combination_sum(candidates, target):\n    # Your code here\n    return []"}', '{"c": "void backtrack(int** result, int* returnSize, int** returnColumnSizes, int* candidates, int candidatesSize, int* current, int currentSize, int target, int start) {\n    if (target == 0) {\n        result[*returnSize] = malloc(currentSize * sizeof(int));\n        for (int i = 0; i < currentSize; i++) {\n            result[*returnSize][i] = current[i];\n        }\n        (*returnColumnSizes)[*returnSize] = currentSize;\n        (*returnSize)++;\n        return;\n    }\n    \n    for (int i = start; i < candidatesSize; i++) {\n        if (candidates[i] <= target) {\n            current[currentSize] = candidates[i];\n            backtrack(result, returnSize, returnColumnSizes, candidates, candidatesSize, current, currentSize + 1, target - candidates[i], i);\n        }\n    }\n}\n\nint** combinationSum(int* candidates, int candidatesSize, int target, int* returnSize, int** returnColumnSizes) {\n    int** result = malloc(1000 * sizeof(int*));\n    *returnColumnSizes = malloc(1000 * sizeof(int));\n    int* current = malloc(target * sizeof(int));\n    *returnSize = 0;\n    \n    backtrack(result, returnSize, returnColumnSizes, candidates, candidatesSize, current, 0, target, 0);\n    \n    free(current);\n    return result;\n}", "java": "class Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        List<List<Integer>> result = new ArrayList<>();\n        backtrack(result, new ArrayList<>(), candidates, target, 0);\n        return result;\n    }\n    \n    private void backtrack(List<List<Integer>> result, List<Integer> current, int[] candidates, int target, int start) {\n        if (target == 0) {\n            result.add(new ArrayList<>(current));\n            return;\n        }\n        \n        for (int i = start; i < candidates.length; i++) {\n            if (candidates[i] <= target) {\n                current.add(candidates[i]);\n                backtrack(result, current, candidates, target - candidates[i], i);\n                current.remove(current.size() - 1);\n            }\n        }\n    }\n}", "python": "def combination_sum(candidates, target):\n    result = []\n    \n    def backtrack(current, target, start):\n        if target == 0:\n            result.append(current[:])\n            return\n        \n        for i in range(start, len(candidates)):\n            if candidates[i] <= target:\n                current.append(candidates[i])\n                backtrack(current, target - candidates[i], i)\n                current.pop()\n    \n    backtrack([], target, 0)\n    return result"}', '[{"input": "[2,3,6,7], 7", "hidden": false, "expected": "[[2,2,3],[7]]"}, {"input": "[2,3,5], 8", "hidden": false, "expected": "[[2,2,2,2],[2,3,3],[3,5]]"}, {"input": "[2], 1", "hidden": true, "expected": "[]"}]', 74, 3);
INSERT INTO public.puzzles VALUES (1928, 'Word Search', 'Find word in 2D board', 'medium', 32, 230, 2, 'Given an m x n grid of characters board and a string word, return true if word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.', '[{"input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"", "output": "true", "explanation": ""}, {"input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"", "output": "true", "explanation": ""}, {"input": "board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"", "output": "false", "explanation": ""}]', 'm == board.length, n = board[i].length', '["Use DFS backtracking", "Mark visited cells temporarily"]', '{"c": "bool exist(char** board, int boardSize, int* boardColSize, char* word) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean exist(char[][] board, String word) {\n        // Your code here\n        return false;\n    }\n}", "python": "def exist(board, word):\n    # Your code here\n    return False"}', '{"c": "bool dfs(char** board, int boardSize, int* boardColSize, char* word, int i, int j, int index) {\n    if (index == strlen(word)) return true;\n    if (i < 0 || i >= boardSize || j < 0 || j >= boardColSize[i] || board[i][j] != word[index]) {\n        return false;\n    }\n    \n    char temp = board[i][j];\n    board[i][j] = ''#'';\n    \n    bool found = dfs(board, boardSize, boardColSize, word, i+1, j, index+1) ||\n                 dfs(board, boardSize, boardColSize, word, i-1, j, index+1) ||\n                 dfs(board, boardSize, boardColSize, word, i, j+1, index+1) ||\n                 dfs(board, boardSize, boardColSize, word, i, j-1, index+1);\n    \n    board[i][j] = temp;\n    return found;\n}\n\nbool exist(char** board, int boardSize, int* boardColSize, char* word) {\n    for (int i = 0; i < boardSize; i++) {\n        for (int j = 0; j < boardColSize[i]; j++) {\n            if (dfs(board, boardSize, boardColSize, word, i, j, 0)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "java": "class Solution {\n    public boolean exist(char[][] board, String word) {\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[0].length; j++) {\n                if (dfs(board, word, i, j, 0)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    \n    private boolean dfs(char[][] board, String word, int i, int j, int index) {\n        if (index == word.length()) return true;\n        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(index)) {\n            return false;\n        }\n        \n        char temp = board[i][j];\n        board[i][j] = ''#'';\n        \n        boolean found = dfs(board, word, i+1, j, index+1) ||\n                       dfs(board, word, i-1, j, index+1) ||\n                       dfs(board, word, i, j+1, index+1) ||\n                       dfs(board, word, i, j-1, index+1);\n        \n        board[i][j] = temp;\n        return found;\n    }\n}", "python": "def exist(board, word):\n    def dfs(i, j, index):\n        if index == len(word):\n            return True\n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[index]:\n            return False\n        \n        temp = board[i][j]\n        board[i][j] = ''#''\n        \n        found = (dfs(i+1, j, index+1) or\n                dfs(i-1, j, index+1) or\n                dfs(i, j+1, index+1) or\n                dfs(i, j-1, index+1))\n        \n        board[i][j] = temp\n        return found\n    \n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if dfs(i, j, 0):\n                return True\n    return False"}', '[{"input": "[[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCCED\"", "hidden": false, "expected": "true"}, {"input": "[[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"SEE\"", "hidden": false, "expected": "true"}, {"input": "[[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], \"ABCB\"", "hidden": true, "expected": "false"}]', 75, 4);
INSERT INTO public.puzzles VALUES (1929, 'Product of Array Except Self', 'Calculate product except current element', 'medium', 33, 200, 2, 'Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer. You must write an algorithm that runs in O(n) time and without using the division operation.', '[{"input": "[1,2,3,4]", "output": "[24,12,8,6]", "explanation": ""}, {"input": "[-1,1,0,-3,3]", "output": "[0,0,9,0,0]", "explanation": ""}]', '2 <= nums.length <= 10^5', '["Use left and right products", "Two passes through array"]', '{"c": "int* productExceptSelf(int* nums, int numsSize, int* returnSize) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public int[] productExceptSelf(int[] nums) {\n        // Your code here\n        return new int[0];\n    }\n}", "python": "def product_except_self(nums):\n    # Your code here\n    return []"}', '{"c": "int* productExceptSelf(int* nums, int numsSize, int* returnSize) {\n    *returnSize = numsSize;\n    int* result = malloc(numsSize * sizeof(int));\n    \n    result[0] = 1;\n    for (int i = 1; i < numsSize; i++) {\n        result[i] = result[i-1] * nums[i-1];\n    }\n    \n    int right = 1;\n    for (int i = numsSize - 1; i >= 0; i--) {\n        result[i] *= right;\n        right *= nums[i];\n    }\n    \n    return result;\n}", "java": "class Solution {\n    public int[] productExceptSelf(int[] nums) {\n        int n = nums.length;\n        int[] result = new int[n];\n        \n        result[0] = 1;\n        for (int i = 1; i < n; i++) {\n            result[i] = result[i-1] * nums[i-1];\n        }\n        \n        int right = 1;\n        for (int i = n - 1; i >= 0; i--) {\n            result[i] *= right;\n            right *= nums[i];\n        }\n        \n        return result;\n    }\n}", "python": "def product_except_self(nums):\n    n = len(nums)\n    result = [1] * n\n    \n    for i in range(1, n):\n        result[i] = result[i-1] * nums[i-1]\n    \n    right = 1\n    for i in range(n-1, -1, -1):\n        result[i] *= right\n        right *= nums[i]\n    \n    return result"}', '[{"input": "[1,2,3,4]", "hidden": false, "expected": "[24,12,8,6]"}, {"input": "[-1,1,0,-3,3]", "hidden": false, "expected": "[0,0,9,0,0]"}, {"input": "[1,2]", "hidden": true, "expected": "[2,1]"}]', 76, 3);
INSERT INTO public.puzzles VALUES (1930, 'Serialize and Deserialize Binary Tree', 'Convert tree to string and back', 'hard', 34, 300, 3, 'Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. Design an algorithm to serialize and deserialize a binary tree.', '[{"input": "[1,2,3,null,null,4,5]", "output": "[1,2,3,null,null,4,5]", "explanation": "This is just one way to serialize a binary tree. You do not necessarily need to follow this format."}]', 'The number of nodes in the tree is in the range [0, 10^4]', '["Use preorder traversal", "Handle null nodes explicitly"]', '{"c": "char* serialize(struct TreeNode* root) {\n    // Your code here\n    return NULL;\n}\n\nstruct TreeNode* deserialize(char* data) {\n    // Your code here\n    return NULL;\n}", "java": "public class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        // Your code here\n        return \"\";\n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        // Your code here\n        return null;\n    }\n}", "python": "class Codec:\n\n    def serialize(self, root):\n        # Your code here\n        return \"\"\n        \n    def deserialize(self, data):\n        # Your code here\n        return None"}', '{"c": "void serializeHelper(struct TreeNode* root, char* result, int* index) {\n    if (!root) {\n        sprintf(result + *index, \"null,\");\n        *index += 5;\n        return;\n    }\n    \n    sprintf(result + *index, \"%d,\", root->val);\n    *index += strlen(result + *index - strlen(result + *index) + sprintf(result + *index, \"%d,\", root->val));\n    \n    serializeHelper(root->left, result, index);\n    serializeHelper(root->right, result, index);\n}\n\nchar* serialize(struct TreeNode* root) {\n    char* result = malloc(100000);\n    int index = 0;\n    serializeHelper(root, result, &index);\n    return result;\n}\n\nstruct TreeNode* deserializeHelper(char** data) {\n    char* token = strsep(data, \",\");\n    if (!token || strcmp(token, \"null\") == 0) {\n        return NULL;\n    }\n    \n    struct TreeNode* node = malloc(sizeof(struct TreeNode));\n    node->val = atoi(token);\n    node->left = deserializeHelper(data);\n    node->right = deserializeHelper(data);\n    \n    return node;\n}\n\nstruct TreeNode* deserialize(char* data) {\n    return deserializeHelper(&data);\n}", "java": "public class Codec {\n\n    public String serialize(TreeNode root) {\n        StringBuilder sb = new StringBuilder();\n        serializeHelper(root, sb);\n        return sb.toString();\n    }\n    \n    private void serializeHelper(TreeNode node, StringBuilder sb) {\n        if (node == null) {\n            sb.append(\"null,\");\n            return;\n        }\n        \n        sb.append(node.val).append(\",\");\n        serializeHelper(node.left, sb);\n        serializeHelper(node.right, sb);\n    }\n\n    public TreeNode deserialize(String data) {\n        String[] values = data.split(\",\");\n        int[] index = {0};\n        return deserializeHelper(values, index);\n    }\n    \n    private TreeNode deserializeHelper(String[] values, int[] index) {\n        if (index[0] >= values.length || values[index[0]].equals(\"null\")) {\n            index[0]++;\n            return null;\n        }\n        \n        TreeNode node = new TreeNode(Integer.parseInt(values[index[0]++]));\n        node.left = deserializeHelper(values, index);\n        node.right = deserializeHelper(values, index);\n        \n        return node;\n    }\n}", "python": "class Codec:\n\n    def serialize(self, root):\n        def preorder(node):\n            if not node:\n                return ''null,''\n            return str(node.val) + '','' + preorder(node.left) + preorder(node.right)\n        \n        return preorder(root)\n        \n    def deserialize(self, data):\n        def build():\n            val = next(values)\n            if val == ''null'':\n                return None\n            \n            node = TreeNode(int(val))\n            node.left = build()\n            node.right = build()\n            return node\n        \n        values = iter(data.split('',''))\n        return build()"}', '[{"input": "[1,2,3,null,null,4,5]", "hidden": false, "expected": "[1,2,3,null,null,4,5]"}, {"input": "[]", "hidden": false, "expected": "[]"}, {"input": "[1]", "hidden": true, "expected": "[1]"}]', 77, 5);
INSERT INTO public.puzzles VALUES (1931, 'Pow(x, n)', 'Implement power function', 'medium', 32, 190, 2, 'Implement pow(x, n), which calculates x raised to the power n (i.e., x^n).', '[{"input": "x = 2.00000, n = 10", "output": "1024.00000", "explanation": ""}, {"input": "x = 2.10000, n = 3", "output": "9.26100", "explanation": ""}, {"input": "x = 2.00000, n = -2", "output": "0.25000", "explanation": "2^-2 = 1/2^2 = 1/4 = 0.25"}]', '-100.0 < x < 100.0, -2^31 <= n <= 2^31-1', '["Use fast exponentiation", "Handle negative powers"]', '{"c": "double myPow(double x, int n) {\n    // Your code here\n    return 0.0;\n}", "java": "class Solution {\n    public double myPow(double x, int n) {\n        // Your code here\n        return 0.0;\n    }\n}", "python": "def my_pow(x, n):\n    # Your code here\n    return 0.0"}', '{"c": "double myPow(double x, int n) {\n    if (n == 0) return 1.0;\n    \n    long long N = n;\n    if (N < 0) {\n        x = 1 / x;\n        N = -N;\n    }\n    \n    double result = 1.0;\n    double currentPower = x;\n    \n    while (N > 0) {\n        if (N % 2 == 1) {\n            result *= currentPower;\n        }\n        currentPower *= currentPower;\n        N /= 2;\n    }\n    \n    return result;\n}", "java": "class Solution {\n    public double myPow(double x, int n) {\n        if (n == 0) return 1.0;\n        \n        long N = n;\n        if (N < 0) {\n            x = 1 / x;\n            N = -N;\n        }\n        \n        double result = 1.0;\n        double currentPower = x;\n        \n        while (N > 0) {\n            if (N % 2 == 1) {\n                result *= currentPower;\n            }\n            currentPower *= currentPower;\n            N /= 2;\n        }\n        \n        return result;\n    }\n}", "python": "def my_pow(x, n):\n    if n == 0:\n        return 1.0\n    \n    N = n\n    if N < 0:\n        x = 1 / x\n        N = -N\n    \n    result = 1.0\n    current_power = x\n    \n    while N > 0:\n        if N % 2 == 1:\n            result *= current_power\n        current_power *= current_power\n        N //= 2\n    \n    return result"}', '[{"input": "2.00000, 10", "hidden": false, "expected": "1024.00000"}, {"input": "2.10000, 3", "hidden": false, "expected": "9.26100"}, {"input": "2.00000, -2", "hidden": true, "expected": "0.25000"}]', 78, 3);
INSERT INTO public.puzzles VALUES (1932, 'Find First and Last Position', 'Find first and last position of element', 'medium', 33, 180, 2, 'Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value. If target is not found in the array, return [-1, -1]. You must write an algorithm with O(log n) runtime complexity.', '[{"input": "nums = [5,7,7,8,8,10], target = 8", "output": "[3,4]", "explanation": ""}, {"input": "nums = [5,7,7,8,8,10], target = 6", "output": "[-1,-1]", "explanation": ""}, {"input": "nums = [], target = 0", "output": "[-1,-1]", "explanation": ""}]', '0 <= nums.length <= 10^5', '["Use binary search twice", "Find leftmost and rightmost positions"]', '{"c": "int* searchRange(int* nums, int numsSize, int target, int* returnSize) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public int[] searchRange(int[] nums, int target) {\n        // Your code here\n        return new int[]{-1, -1};\n    }\n}", "python": "def search_range(nums, target):\n    # Your code here\n    return [-1, -1]"}', '{"c": "int findFirst(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1, result = -1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) {\n            result = mid;\n            right = mid - 1;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return result;\n}\n\nint findLast(int* nums, int numsSize, int target) {\n    int left = 0, right = numsSize - 1, result = -1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) {\n            result = mid;\n            left = mid + 1;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return result;\n}\n\nint* searchRange(int* nums, int numsSize, int target, int* returnSize) {\n    *returnSize = 2;\n    int* result = malloc(2 * sizeof(int));\n    result[0] = findFirst(nums, numsSize, target);\n    result[1] = findLast(nums, numsSize, target);\n    return result;\n}", "java": "class Solution {\n    public int[] searchRange(int[] nums, int target) {\n        int first = findFirst(nums, target);\n        int last = findLast(nums, target);\n        return new int[]{first, last};\n    }\n    \n    private int findFirst(int[] nums, int target) {\n        int left = 0, right = nums.length - 1, result = -1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) {\n                result = mid;\n                right = mid - 1;\n            } else if (nums[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return result;\n    }\n    \n    private int findLast(int[] nums, int target) {\n        int left = 0, right = nums.length - 1, result = -1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) {\n                result = mid;\n                left = mid + 1;\n            } else if (nums[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return result;\n    }\n}", "python": "def search_range(nums, target):\n    def find_first():\n        left, right = 0, len(nums) - 1\n        result = -1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                result = mid\n                right = mid - 1\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return result\n    \n    def find_last():\n        left, right = 0, len(nums) - 1\n        result = -1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                result = mid\n                left = mid + 1\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return result\n    \n    return [find_first(), find_last()]"}', '[{"input": "[5,7,7,8,8,10], 8", "hidden": false, "expected": "[3,4]"}, {"input": "[5,7,7,8,8,10], 6", "hidden": false, "expected": "[-1,-1]"}, {"input": "[], 0", "hidden": true, "expected": "[-1,-1]"}]', 79, 3);
INSERT INTO public.puzzles VALUES (1933, 'Flatten Binary Tree to Linked List', 'Flatten tree to right-skewed linked list', 'medium', 34, 200, 2, 'Given the root of a binary tree, flatten the tree into a "linked list": The "linked list" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null. The "linked list" should be in the same order as a pre-order traversal of the binary tree.', '[{"input": "[1,2,5,3,4,null,6]", "output": "[1,null,2,null,3,null,4,null,5,null,6]", "explanation": ""}, {"input": "[]", "output": "[]", "explanation": ""}, {"input": "[0]", "output": "[0]", "explanation": ""}]', 'The number of nodes in the tree is in the range [0, 2000]', '["Use preorder traversal", "Modify tree in-place"]', '{"c": "void flatten(struct TreeNode* root) {\n    // Your code here\n}", "java": "class Solution {\n    public void flatten(TreeNode root) {\n        // Your code here\n    }\n}", "python": "def flatten(root):\n    # Your code here\n    pass"}', '{"c": "void flatten(struct TreeNode* root) {\n    if (!root) return;\n    \n    flatten(root->left);\n    flatten(root->right);\n    \n    struct TreeNode* temp = root->right;\n    root->right = root->left;\n    root->left = NULL;\n    \n    struct TreeNode* current = root;\n    while (current->right) {\n        current = current->right;\n    }\n    current->right = temp;\n}", "java": "class Solution {\n    public void flatten(TreeNode root) {\n        if (root == null) return;\n        \n        flatten(root.left);\n        flatten(root.right);\n        \n        TreeNode temp = root.right;\n        root.right = root.left;\n        root.left = null;\n        \n        TreeNode current = root;\n        while (current.right != null) {\n            current = current.right;\n        }\n        current.right = temp;\n    }\n}", "python": "def flatten(root):\n    if not root:\n        return\n    \n    flatten(root.left)\n    flatten(root.right)\n    \n    temp = root.right\n    root.right = root.left\n    root.left = None\n    \n    current = root\n    while current.right:\n        current = current.right\n    current.right = temp"}', '[{"input": "[1,2,5,3,4,null,6]", "hidden": false, "expected": "[1,null,2,null,3,null,4,null,5,null,6]"}, {"input": "[]", "hidden": false, "expected": "[]"}, {"input": "[0]", "hidden": true, "expected": "[0]"}]', 80, 3);
INSERT INTO public.puzzles VALUES (1934, 'Kth Largest Element in Array', 'Find kth largest element efficiently', 'medium', 34, 190, 2, 'Given an integer array nums and an integer k, return the kth largest element in the array. Note that it is the kth largest element in the sorted order, not the kth distinct element. Can you solve it without sorting?', '[{"input": "nums = [3,2,1,5,6,4], k = 2", "output": "5", "explanation": ""}, {"input": "nums = [3,2,3,1,2,4,5,5,6], k = 4", "output": "4", "explanation": ""}]', '1 <= k <= nums.length <= 10^5', '["Use quickselect algorithm", "Partition around pivot"]', '{"c": "int findKthLargest(int* nums, int numsSize, int k) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def find_kth_largest(nums, k):\n    # Your code here\n    return 0"}', '{"c": "void swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint partition(int* nums, int left, int right) {\n    int pivot = nums[right];\n    int i = left;\n    \n    for (int j = left; j < right; j++) {\n        if (nums[j] >= pivot) {\n            swap(&nums[i], &nums[j]);\n            i++;\n        }\n    }\n    swap(&nums[i], &nums[right]);\n    return i;\n}\n\nint quickSelect(int* nums, int left, int right, int k) {\n    int pivotIndex = partition(nums, left, right);\n    \n    if (pivotIndex == k - 1) {\n        return nums[pivotIndex];\n    } else if (pivotIndex < k - 1) {\n        return quickSelect(nums, pivotIndex + 1, right, k);\n    } else {\n        return quickSelect(nums, left, pivotIndex - 1, k);\n    }\n}\n\nint findKthLargest(int* nums, int numsSize, int k) {\n    return quickSelect(nums, 0, numsSize - 1, k);\n}", "java": "class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        return quickSelect(nums, 0, nums.length - 1, k);\n    }\n    \n    private int quickSelect(int[] nums, int left, int right, int k) {\n        int pivotIndex = partition(nums, left, right);\n        \n        if (pivotIndex == k - 1) {\n            return nums[pivotIndex];\n        } else if (pivotIndex < k - 1) {\n            return quickSelect(nums, pivotIndex + 1, right, k);\n        } else {\n            return quickSelect(nums, left, pivotIndex - 1, k);\n        }\n    }\n    \n    private int partition(int[] nums, int left, int right) {\n        int pivot = nums[right];\n        int i = left;\n        \n        for (int j = left; j < right; j++) {\n            if (nums[j] >= pivot) {\n                swap(nums, i, j);\n                i++;\n            }\n        }\n        swap(nums, i, right);\n        return i;\n    }\n    \n    private void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}", "python": "def find_kth_largest(nums, k):\n    def quickselect(left, right, k):\n        pivot_index = partition(left, right)\n        \n        if pivot_index == k - 1:\n            return nums[pivot_index]\n        elif pivot_index < k - 1:\n            return quickselect(pivot_index + 1, right, k)\n        else:\n            return quickselect(left, pivot_index - 1, k)\n    \n    def partition(left, right):\n        pivot = nums[right]\n        i = left\n        \n        for j in range(left, right):\n            if nums[j] >= pivot:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n        \n        nums[i], nums[right] = nums[right], nums[i]\n        return i\n    \n    return quickselect(0, len(nums) - 1, k)"}', '[{"input": "[3,2,1,5,6,4], 2", "hidden": false, "expected": "5"}, {"input": "[3,2,3,1,2,4,5,5,6], 4", "hidden": false, "expected": "4"}, {"input": "[1], 1", "hidden": true, "expected": "1"}]', 81, 3);
INSERT INTO public.puzzles VALUES (1935, 'Spiral Matrix', 'Return elements in spiral order', 'medium', 32, 200, 2, 'Given an m x n matrix, return all elements of the matrix in spiral order.', '[{"input": "[[1,2,3],[4,5,6],[7,8,9]]", "output": "[1,2,3,6,9,8,7,4,5]", "explanation": ""}, {"input": "[[1,2,3,4],[5,6,7,8],[9,10,11,12]]", "output": "[1,2,3,4,8,12,11,10,9,5,6,7]", "explanation": ""}]', 'm == matrix.length, n == matrix[i].length', '["Track boundaries", "Move in spiral direction"]', '{"c": "int* spiralOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public List<Integer> spiralOrder(int[][] matrix) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "def spiral_order(matrix):\n    # Your code here\n    return []"}', '{"c": "int* spiralOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize) {\n    if (matrixSize == 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    \n    int m = matrixSize, n = matrixColSize[0];\n    int* result = malloc(m * n * sizeof(int));\n    *returnSize = 0;\n    \n    int top = 0, bottom = m - 1, left = 0, right = n - 1;\n    \n    while (top <= bottom && left <= right) {\n        for (int j = left; j <= right; j++) {\n            result[(*returnSize)++] = matrix[top][j];\n        }\n        top++;\n        \n        for (int i = top; i <= bottom; i++) {\n            result[(*returnSize)++] = matrix[i][right];\n        }\n        right--;\n        \n        if (top <= bottom) {\n            for (int j = right; j >= left; j--) {\n                result[(*returnSize)++] = matrix[bottom][j];\n            }\n            bottom--;\n        }\n        \n        if (left <= right) {\n            for (int i = bottom; i >= top; i--) {\n                result[(*returnSize)++] = matrix[i][left];\n            }\n            left++;\n        }\n    }\n    \n    return result;\n}", "java": "class Solution {\n    public List<Integer> spiralOrder(int[][] matrix) {\n        List<Integer> result = new ArrayList<>();\n        if (matrix.length == 0) return result;\n        \n        int m = matrix.length, n = matrix[0].length;\n        int top = 0, bottom = m - 1, left = 0, right = n - 1;\n        \n        while (top <= bottom && left <= right) {\n            for (int j = left; j <= right; j++) {\n                result.add(matrix[top][j]);\n            }\n            top++;\n            \n            for (int i = top; i <= bottom; i++) {\n                result.add(matrix[i][right]);\n            }\n            right--;\n            \n            if (top <= bottom) {\n                for (int j = right; j >= left; j--) {\n                    result.add(matrix[bottom][j]);\n                }\n                bottom--;\n            }\n            \n            if (left <= right) {\n                for (int i = bottom; i >= top; i--) {\n                    result.add(matrix[i][left]);\n                }\n                left++;\n            }\n        }\n        \n        return result;\n    }\n}", "python": "def spiral_order(matrix):\n    if not matrix:\n        return []\n    \n    result = []\n    m, n = len(matrix), len(matrix[0])\n    top, bottom, left, right = 0, m - 1, 0, n - 1\n    \n    while top <= bottom and left <= right:\n        for j in range(left, right + 1):\n            result.append(matrix[top][j])\n        top += 1\n        \n        for i in range(top, bottom + 1):\n            result.append(matrix[i][right])\n        right -= 1\n        \n        if top <= bottom:\n            for j in range(right, left - 1, -1):\n                result.append(matrix[bottom][j])\n            bottom -= 1\n        \n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result.append(matrix[i][left])\n            left += 1\n    \n    return result"}', '[{"input": "[[1,2,3],[4,5,6],[7,8,9]]", "hidden": false, "expected": "[1,2,3,6,9,8,7,4,5]"}, {"input": "[[1,2,3,4],[5,6,7,8],[9,10,11,12]]", "hidden": false, "expected": "[1,2,3,4,8,12,11,10,9,5,6,7]"}, {"input": "[[1,2,3]]", "hidden": true, "expected": "[1,2,3]"}]', 82, 3);
INSERT INTO public.puzzles VALUES (1936, 'Jump Game', 'Check if can reach last index', 'medium', 33, 180, 2, 'You are given an integer array nums. You are initially positioned at the array''s first index, and each element in the array represents your maximum jump length at that position. Return true if you can reach the last index, or false otherwise.', '[{"input": "[2,3,1,1,4]", "output": "true", "explanation": "Jump 1 step from index 0 to 1, then 3 steps to the last index."}, {"input": "[3,2,1,0,4]", "output": "false", "explanation": "You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index."}]', '1 <= nums.length <= 10^4', '["Track maximum reachable position", "Greedy approach"]', '{"c": "bool canJump(int* nums, int numsSize) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean canJump(int[] nums) {\n        // Your code here\n        return false;\n    }\n}", "python": "def can_jump(nums):\n    # Your code here\n    return False"}', '{"c": "bool canJump(int* nums, int numsSize) {\n    int maxReach = 0;\n    \n    for (int i = 0; i < numsSize; i++) {\n        if (i > maxReach) {\n            return false;\n        }\n        \n        int newReach = i + nums[i];\n        if (newReach > maxReach) {\n            maxReach = newReach;\n        }\n        \n        if (maxReach >= numsSize - 1) {\n            return true;\n        }\n    }\n    \n    return maxReach >= numsSize - 1;\n}", "java": "class Solution {\n    public boolean canJump(int[] nums) {\n        int maxReach = 0;\n        \n        for (int i = 0; i < nums.length; i++) {\n            if (i > maxReach) {\n                return false;\n            }\n            \n            maxReach = Math.max(maxReach, i + nums[i]);\n            \n            if (maxReach >= nums.length - 1) {\n                return true;\n            }\n        }\n        \n        return maxReach >= nums.length - 1;\n    }\n}", "python": "def can_jump(nums):\n    max_reach = 0\n    \n    for i in range(len(nums)):\n        if i > max_reach:\n            return False\n        \n        max_reach = max(max_reach, i + nums[i])\n        \n        if max_reach >= len(nums) - 1:\n            return True\n    \n    return max_reach >= len(nums) - 1"}', '[{"input": "[2,3,1,1,4]", "hidden": false, "expected": "true"}, {"input": "[3,2,1,0,4]", "hidden": false, "expected": "false"}, {"input": "[0]", "hidden": true, "expected": "true"}]', 83, 3);
INSERT INTO public.puzzles VALUES (1937, 'Sort Colors', 'Sort array with 3 colors in-place', 'medium', 34, 170, 2, 'Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.', '[{"input": "[2,0,2,1,1,0]", "output": "[0,0,1,1,2,2]", "explanation": ""}, {"input": "[2,0,1]", "output": "[0,1,2]", "explanation": ""}]', 'n == nums.length, 1 <= n <= 300', '["Use Dutch flag algorithm", "Three pointers approach"]', '{"c": "void sortColors(int* nums, int numsSize) {\n    // Your code here\n}", "java": "class Solution {\n    public void sortColors(int[] nums) {\n        // Your code here\n    }\n}", "python": "def sort_colors(nums):\n    # Your code here\n    pass"}', '{"c": "void sortColors(int* nums, int numsSize) {\n    int low = 0, mid = 0, high = numsSize - 1;\n    \n    while (mid <= high) {\n        if (nums[mid] == 0) {\n            int temp = nums[low];\n            nums[low] = nums[mid];\n            nums[mid] = temp;\n            low++;\n            mid++;\n        } else if (nums[mid] == 1) {\n            mid++;\n        } else {\n            int temp = nums[mid];\n            nums[mid] = nums[high];\n            nums[high] = temp;\n            high--;\n        }\n    }\n}", "java": "class Solution {\n    public void sortColors(int[] nums) {\n        int low = 0, mid = 0, high = nums.length - 1;\n        \n        while (mid <= high) {\n            if (nums[mid] == 0) {\n                swap(nums, low, mid);\n                low++;\n                mid++;\n            } else if (nums[mid] == 1) {\n                mid++;\n            } else {\n                swap(nums, mid, high);\n                high--;\n            }\n        }\n    }\n    \n    private void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}", "python": "def sort_colors(nums):\n    low = mid = 0\n    high = len(nums) - 1\n    \n    while mid <= high:\n        if nums[mid] == 0:\n            nums[low], nums[mid] = nums[mid], nums[low]\n            low += 1\n            mid += 1\n        elif nums[mid] == 1:\n            mid += 1\n        else:\n            nums[mid], nums[high] = nums[high], nums[mid]\n            high -= 1"}', '[{"input": "[2,0,2,1,1,0]", "hidden": false, "expected": "[0,0,1,1,2,2]"}, {"input": "[2,0,1]", "hidden": false, "expected": "[0,1,2]"}, {"input": "[0]", "hidden": true, "expected": "[0]"}]', 84, 3);
INSERT INTO public.puzzles VALUES (1938, 'Top K Frequent Elements', 'Find k most frequent elements', 'medium', 34, 200, 2, 'Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.', '[{"input": "nums = [1,1,1,2,2,3], k = 2", "output": "[1,2]", "explanation": ""}, {"input": "nums = [1], k = 1", "output": "[1]", "explanation": ""}]', '1 <= nums.length <= 10^5, k is in the range [1, the number of unique elements in the array]', '["Use frequency map", "Bucket sort by frequency"]', '{"c": "int* topKFrequent(int* nums, int numsSize, int k, int* returnSize) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public int[] topKFrequent(int[] nums, int k) {\n        // Your code here\n        return new int[0];\n    }\n}", "python": "def top_k_frequent(nums, k):\n    # Your code here\n    return []"}', '{"c": "typedef struct {\n    int num;\n    int freq;\n} Element;\n\nint compare(const void* a, const void* b) {\n    return ((Element*)b)->freq - ((Element*)a)->freq;\n}\n\nint* topKFrequent(int* nums, int numsSize, int k, int* returnSize) {\n    // Simplified implementation for demonstration\n    int* result = malloc(k * sizeof(int));\n    *returnSize = k;\n    \n    // Basic frequency counting and sorting\n    Element elements[numsSize];\n    int uniqueCount = 0;\n    \n    // Count frequencies (simplified)\n    for (int i = 0; i < numsSize; i++) {\n        int found = 0;\n        for (int j = 0; j < uniqueCount; j++) {\n            if (elements[j].num == nums[i]) {\n                elements[j].freq++;\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            elements[uniqueCount].num = nums[i];\n            elements[uniqueCount].freq = 1;\n            uniqueCount++;\n        }\n    }\n    \n    qsort(elements, uniqueCount, sizeof(Element), compare);\n    \n    for (int i = 0; i < k; i++) {\n        result[i] = elements[i].num;\n    }\n    \n    return result;\n}", "java": "class Solution {\n    public int[] topKFrequent(int[] nums, int k) {\n        Map<Integer, Integer> freqMap = new HashMap<>();\n        for (int num : nums) {\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n        \n        List<Integer>[] buckets = new List[nums.length + 1];\n        for (int key : freqMap.keySet()) {\n            int freq = freqMap.get(key);\n            if (buckets[freq] == null) {\n                buckets[freq] = new ArrayList<>();\n            }\n            buckets[freq].add(key);\n        }\n        \n        int[] result = new int[k];\n        int index = 0;\n        \n        for (int i = buckets.length - 1; i >= 0 && index < k; i--) {\n            if (buckets[i] != null) {\n                for (int num : buckets[i]) {\n                    if (index < k) {\n                        result[index++] = num;\n                    }\n                }\n            }\n        }\n        \n        return result;\n    }\n}", "python": "def top_k_frequent(nums, k):\n    from collections import Counter\n    \n    counter = Counter(nums)\n    buckets = [[] for _ in range(len(nums) + 1)]\n    \n    for num, freq in counter.items():\n        buckets[freq].append(num)\n    \n    result = []\n    for i in range(len(buckets) - 1, -1, -1):\n        for num in buckets[i]:\n            if len(result) < k:\n                result.append(num)\n    \n    return result"}', '[{"input": "[1,1,1,2,2,3], 2", "hidden": false, "expected": "[1,2]"}, {"input": "[1], 1", "hidden": false, "expected": "[1]"}, {"input": "[1,2], 2", "hidden": true, "expected": "[1,2]"}]', 85, 3);
INSERT INTO public.puzzles VALUES (1939, 'Set Matrix Zeroes', 'Set entire row and column to zero', 'medium', 32, 190, 2, 'Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0''s. You must do it in place.', '[{"input": "[[1,1,1],[1,0,1],[1,1,1]]", "output": "[[1,0,1],[0,0,0],[1,0,1]]", "explanation": ""}, {"input": "[[0,1,2,0],[3,4,5,2],[1,3,1,5]]", "output": "[[0,0,0,0],[0,4,5,0],[0,3,1,0]]", "explanation": ""}]', 'm == matrix.length, n == matrix[0].length', '["Use first row and column as markers", "Handle edge cases carefully"]', '{"c": "void setZeroes(int** matrix, int matrixSize, int* matrixColSize) {\n    // Your code here\n}", "java": "class Solution {\n    public void setZeroes(int[][] matrix) {\n        // Your code here\n    }\n}", "python": "def set_zeroes(matrix):\n    # Your code here\n    pass"}', '{"c": "void setZeroes(int** matrix, int matrixSize, int* matrixColSize) {\n    int m = matrixSize, n = matrixColSize[0];\n    bool firstRowZero = false, firstColZero = false;\n    \n    for (int j = 0; j < n; j++) {\n        if (matrix[0][j] == 0) {\n            firstRowZero = true;\n            break;\n        }\n    }\n    \n    for (int i = 0; i < m; i++) {\n        if (matrix[i][0] == 0) {\n            firstColZero = true;\n            break;\n        }\n    }\n    \n    for (int i = 1; i < m; i++) {\n        for (int j = 1; j < n; j++) {\n            if (matrix[i][j] == 0) {\n                matrix[i][0] = 0;\n                matrix[0][j] = 0;\n            }\n        }\n    }\n    \n    for (int i = 1; i < m; i++) {\n        for (int j = 1; j < n; j++) {\n            if (matrix[i][0] == 0 || matrix[0][j] == 0) {\n                matrix[i][j] = 0;\n            }\n        }\n    }\n    \n    if (firstRowZero) {\n        for (int j = 0; j < n; j++) {\n            matrix[0][j] = 0;\n        }\n    }\n    \n    if (firstColZero) {\n        for (int i = 0; i < m; i++) {\n            matrix[i][0] = 0;\n        }\n    }\n}", "java": "class Solution {\n    public void setZeroes(int[][] matrix) {\n        int m = matrix.length, n = matrix[0].length;\n        boolean firstRowZero = false, firstColZero = false;\n        \n        for (int j = 0; j < n; j++) {\n            if (matrix[0][j] == 0) {\n                firstRowZero = true;\n                break;\n            }\n        }\n        \n        for (int i = 0; i < m; i++) {\n            if (matrix[i][0] == 0) {\n                firstColZero = true;\n                break;\n            }\n        }\n        \n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                if (matrix[i][j] == 0) {\n                    matrix[i][0] = 0;\n                    matrix[0][j] = 0;\n                }\n            }\n        }\n        \n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                if (matrix[i][0] == 0 || matrix[0][j] == 0) {\n                    matrix[i][j] = 0;\n                }\n            }\n        }\n        \n        if (firstRowZero) {\n            for (int j = 0; j < n; j++) {\n                matrix[0][j] = 0;\n            }\n        }\n        \n        if (firstColZero) {\n            for (int i = 0; i < m; i++) {\n                matrix[i][0] = 0;\n            }\n        }\n    }\n}", "python": "def set_zeroes(matrix):\n    m, n = len(matrix), len(matrix[0])\n    first_row_zero = any(matrix[0][j] == 0 for j in range(n))\n    first_col_zero = any(matrix[i][0] == 0 for i in range(m))\n    \n    for i in range(1, m):\n        for j in range(1, n):\n            if matrix[i][j] == 0:\n                matrix[i][0] = 0\n                matrix[0][j] = 0\n    \n    for i in range(1, m):\n        for j in range(1, n):\n            if matrix[i][0] == 0 or matrix[0][j] == 0:\n                matrix[i][j] = 0\n    \n    if first_row_zero:\n        for j in range(n):\n            matrix[0][j] = 0\n    \n    if first_col_zero:\n        for i in range(m):\n            matrix[i][0] = 0"}', '[{"input": "[[1,1,1],[1,0,1],[1,1,1]]", "hidden": false, "expected": "[[1,0,1],[0,0,0],[1,0,1]]"}, {"input": "[[0,1,2,0],[3,4,5,2],[1,3,1,5]]", "hidden": false, "expected": "[[0,0,0,0],[0,4,5,0],[0,3,1,0]]"}, {"input": "[[1,2,3],[4,0,6]]", "hidden": true, "expected": "[[1,0,3],[0,0,0]]"}]', 86, 3);
INSERT INTO public.puzzles VALUES (1940, 'Gas Station', 'Find starting gas station for circular trip', 'medium', 32, 200, 2, 'There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i]. You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations. Given two integer arrays gas and cost, return the starting gas station''s index if you can travel around the circuit once in the clockwise direction, otherwise return -1.', '[{"input": "gas = [1,2,3,4,5], cost = [3,4,5,1,2]", "output": "3", "explanation": "Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4..."}, {"input": "gas = [2,3,4], cost = [3,4,3]", "output": "-1", "explanation": "You can''t start at station 0 or 1, as there is not enough gas to travel to the next station."}]', 'gas.length == n, cost.length == n, 1 <= n <= 10^5', '["Check if total gas >= total cost", "Use greedy approach"]', '{"c": "int canCompleteCircuit(int* gas, int gasSize, int* cost, int costSize) {\n    // Your code here\n    return -1;\n}", "java": "class Solution {\n    public int canCompleteCircuit(int[] gas, int[] cost) {\n        // Your code here\n        return -1;\n    }\n}", "python": "def can_complete_circuit(gas, cost):\n    # Your code here\n    return -1"}', '{"c": "int canCompleteCircuit(int* gas, int gasSize, int* cost, int costSize) {\n    int totalGas = 0, totalCost = 0;\n    for (int i = 0; i < gasSize; i++) {\n        totalGas += gas[i];\n        totalCost += cost[i];\n    }\n    \n    if (totalGas < totalCost) return -1;\n    \n    int currentGas = 0, start = 0;\n    for (int i = 0; i < gasSize; i++) {\n        currentGas += gas[i] - cost[i];\n        if (currentGas < 0) {\n            currentGas = 0;\n            start = i + 1;\n        }\n    }\n    \n    return start;\n}", "java": "class Solution {\n    public int canCompleteCircuit(int[] gas, int[] cost) {\n        int totalGas = 0, totalCost = 0;\n        for (int i = 0; i < gas.length; i++) {\n            totalGas += gas[i];\n            totalCost += cost[i];\n        }\n        \n        if (totalGas < totalCost) return -1;\n        \n        int currentGas = 0, start = 0;\n        for (int i = 0; i < gas.length; i++) {\n            currentGas += gas[i] - cost[i];\n            if (currentGas < 0) {\n                currentGas = 0;\n                start = i + 1;\n            }\n        }\n        \n        return start;\n    }\n}", "python": "def can_complete_circuit(gas, cost):\n    if sum(gas) < sum(cost):\n        return -1\n    \n    current_gas = 0\n    start = 0\n    \n    for i in range(len(gas)):\n        current_gas += gas[i] - cost[i]\n        if current_gas < 0:\n            current_gas = 0\n            start = i + 1\n    \n    return start"}', '[{"input": "[1,2,3,4,5], [3,4,5,1,2]", "hidden": false, "expected": "3"}, {"input": "[2,3,4], [3,4,3]", "hidden": false, "expected": "-1"}, {"input": "[5,1,2,3,4], [4,4,1,5,1]", "hidden": true, "expected": "4"}]', 87, 3);
INSERT INTO public.puzzles VALUES (1941, 'Minimum Window Substring', 'Find minimum window containing all characters', 'hard', 33, 300, 3, 'Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such window, return the empty string "".', '[{"input": "s = \"ADOBECODEBANC\", t = \"ABC\"", "output": "\"BANC\"", "explanation": "The minimum window substring \"BANC\" includes ''A'', ''B'', and ''C'' from string t."}, {"input": "s = \"a\", t = \"a\"", "output": "\"a\"", "explanation": "The entire string s is the minimum window."}, {"input": "s = \"a\", t = \"aa\"", "output": "\"\"", "explanation": "Both ''a''s from t must be included in the window."}]', 'm == s.length, n == t.length, 1 <= m, n <= 10^5', '["Use sliding window", "Track character frequencies"]', '{"c": "char* minWindow(char* s, char* t) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public String minWindow(String s, String t) {\n        // Your code here\n        return \"\";\n    }\n}", "python": "def min_window(s, t):\n    # Your code here\n    return \"\""}', '{"c": "char* minWindow(char* s, char* t) {\n    if (!s || !t || strlen(s) == 0 || strlen(t) == 0) return \"\";\n    \n    int tCount[256] = {0};\n    int windowCount[256] = {0};\n    \n    for (int i = 0; t[i]; i++) {\n        tCount[t[i]]++;\n    }\n    \n    int required = 0;\n    for (int i = 0; i < 256; i++) {\n        if (tCount[i] > 0) required++;\n    }\n    \n    int left = 0, right = 0;\n    int formed = 0;\n    int minLen = INT_MAX;\n    int minLeft = 0;\n    \n    while (right < strlen(s)) {\n        char c = s[right];\n        windowCount[c]++;\n        \n        if (tCount[c] > 0 && windowCount[c] == tCount[c]) {\n            formed++;\n        }\n        \n        while (left <= right && formed == required) {\n            if (right - left + 1 < minLen) {\n                minLen = right - left + 1;\n                minLeft = left;\n            }\n            \n            char leftChar = s[left];\n            windowCount[leftChar]--;\n            if (tCount[leftChar] > 0 && windowCount[leftChar] < tCount[leftChar]) {\n                formed--;\n            }\n            left++;\n        }\n        right++;\n    }\n    \n    if (minLen == INT_MAX) return \"\";\n    \n    char* result = malloc(minLen + 1);\n    strncpy(result, s + minLeft, minLen);\n    result[minLen] = ''\\0'';\n    return result;\n}", "java": "class Solution {\n    public String minWindow(String s, String t) {\n        if (s.length() == 0 || t.length() == 0) return \"\";\n        \n        Map<Character, Integer> dictT = new HashMap<>();\n        for (char c : t.toCharArray()) {\n            dictT.put(c, dictT.getOrDefault(c, 0) + 1);\n        }\n        \n        int required = dictT.size();\n        int left = 0, right = 0;\n        int formed = 0;\n        \n        Map<Character, Integer> windowCounts = new HashMap<>();\n        \n        int[] ans = {-1, 0, 0};\n        \n        while (right < s.length()) {\n            char c = s.charAt(right);\n            windowCounts.put(c, windowCounts.getOrDefault(c, 0) + 1);\n            \n            if (dictT.containsKey(c) && windowCounts.get(c).intValue() == dictT.get(c).intValue()) {\n                formed++;\n            }\n            \n            while (left <= right && formed == required) {\n                if (ans[0] == -1 || right - left + 1 < ans[0]) {\n                    ans[0] = right - left + 1;\n                    ans[1] = left;\n                    ans[2] = right;\n                }\n                \n                char leftChar = s.charAt(left);\n                windowCounts.put(leftChar, windowCounts.get(leftChar) - 1);\n                if (dictT.containsKey(leftChar) && windowCounts.get(leftChar).intValue() < dictT.get(leftChar).intValue()) {\n                    formed--;\n                }\n                left++;\n            }\n            right++;\n        }\n        \n        return ans[0] == -1 ? \"\" : s.substring(ans[1], ans[2] + 1);\n    }\n}", "python": "def min_window(s, t):\n    if not s or not t:\n        return \"\"\n    \n    from collections import Counter, defaultdict\n    \n    dict_t = Counter(t)\n    required = len(dict_t)\n    \n    left = right = 0\n    formed = 0\n    \n    window_counts = defaultdict(int)\n    \n    ans = float(''inf''), None, None\n    \n    while right < len(s):\n        character = s[right]\n        window_counts[character] += 1\n        \n        if character in dict_t and window_counts[character] == dict_t[character]:\n            formed += 1\n        \n        while left <= right and formed == required:\n            if right - left + 1 < ans[0]:\n                ans = (right - left + 1, left, right)\n            \n            character = s[left]\n            window_counts[character] -= 1\n            if character in dict_t and window_counts[character] < dict_t[character]:\n                formed -= 1\n            \n            left += 1\n        \n        right += 1\n    \n    return \"\" if ans[0] == float(''inf'') else s[ans[1]:ans[2] + 1]"}', '[{"input": "\"ADOBECODEBANC\", \"ABC\"", "hidden": false, "expected": "\"BANC\""}, {"input": "\"a\", \"a\"", "hidden": false, "expected": "\"a\""}, {"input": "\"a\", \"aa\"", "hidden": true, "expected": "\"\""}]', 88, 5);
INSERT INTO public.puzzles VALUES (1942, 'Course Schedule', 'Check if can finish all courses', 'medium', 34, 220, 2, 'There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. Return true if you can finish all courses. Otherwise, return false.', '[{"input": "numCourses = 2, prerequisites = [[1,0]]", "output": "true", "explanation": "There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible."}, {"input": "numCourses = 2, prerequisites = [[1,0],[0,1]]", "output": "false", "explanation": "There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible."}]', '1 <= numCourses <= 2000', '["Use topological sort", "Detect cycles in directed graph"]', '{"c": "bool canFinish(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        // Your code here\n        return false;\n    }\n}", "python": "def can_finish(num_courses, prerequisites):\n    # Your code here\n    return False"}', '{"c": "bool canFinish(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize) {\n    int* indegree = calloc(numCourses, sizeof(int));\n    int** adjList = malloc(numCourses * sizeof(int*));\n    int* adjSizes = calloc(numCourses, sizeof(int));\n    \n    for (int i = 0; i < numCourses; i++) {\n        adjList[i] = malloc(numCourses * sizeof(int));\n    }\n    \n    for (int i = 0; i < prerequisitesSize; i++) {\n        int course = prerequisites[i][0];\n        int prereq = prerequisites[i][1];\n        adjList[prereq][adjSizes[prereq]++] = course;\n        indegree[course]++;\n    }\n    \n    int* queue = malloc(numCourses * sizeof(int));\n    int front = 0, rear = 0;\n    \n    for (int i = 0; i < numCourses; i++) {\n        if (indegree[i] == 0) {\n            queue[rear++] = i;\n        }\n    }\n    \n    int count = 0;\n    while (front < rear) {\n        int course = queue[front++];\n        count++;\n        \n        for (int i = 0; i < adjSizes[course]; i++) {\n            int nextCourse = adjList[course][i];\n            indegree[nextCourse]--;\n            if (indegree[nextCourse] == 0) {\n                queue[rear++] = nextCourse;\n            }\n        }\n    }\n    \n    for (int i = 0; i < numCourses; i++) {\n        free(adjList[i]);\n    }\n    free(adjList);\n    free(adjSizes);\n    free(indegree);\n    free(queue);\n    \n    return count == numCourses;\n}", "java": "class Solution {\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n        int[] indegree = new int[numCourses];\n        List<Integer>[] adjList = new List[numCourses];\n        \n        for (int i = 0; i < numCourses; i++) {\n            adjList[i] = new ArrayList<>();\n        }\n        \n        for (int[] prereq : prerequisites) {\n            int course = prereq[0];\n            int prereqCourse = prereq[1];\n            adjList[prereqCourse].add(course);\n            indegree[course]++;\n        }\n        \n        Queue<Integer> queue = new LinkedList<>();\n        for (int i = 0; i < numCourses; i++) {\n            if (indegree[i] == 0) {\n                queue.offer(i);\n            }\n        }\n        \n        int count = 0;\n        while (!queue.isEmpty()) {\n            int course = queue.poll();\n            count++;\n            \n            for (int nextCourse : adjList[course]) {\n                indegree[nextCourse]--;\n                if (indegree[nextCourse] == 0) {\n                    queue.offer(nextCourse);\n                }\n            }\n        }\n        \n        return count == numCourses;\n    }\n}", "python": "def can_finish(num_courses, prerequisites):\n    from collections import defaultdict, deque\n    \n    indegree = [0] * num_courses\n    adj_list = defaultdict(list)\n    \n    for course, prereq in prerequisites:\n        adj_list[prereq].append(course)\n        indegree[course] += 1\n    \n    queue = deque([i for i in range(num_courses) if indegree[i] == 0])\n    count = 0\n    \n    while queue:\n        course = queue.popleft()\n        count += 1\n        \n        for next_course in adj_list[course]:\n            indegree[next_course] -= 1\n            if indegree[next_course] == 0:\n                queue.append(next_course)\n    \n    return count == num_courses"}', '[{"input": "2, [[1,0]]", "hidden": false, "expected": "true"}, {"input": "2, [[1,0],[0,1]]", "hidden": false, "expected": "false"}, {"input": "1, []", "hidden": true, "expected": "true"}]', 89, 4);
INSERT INTO public.puzzles VALUES (1943, 'Insert Interval', 'Insert interval and merge overlapping ones', 'medium', 32, 210, 2, 'You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval. Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals.', '[{"input": "intervals = [[1,3],[6,9]], newInterval = [2,5]", "output": "[[1,5],[6,9]]", "explanation": ""}, {"input": "intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]", "output": "[[1,2],[3,10],[12,16]]", "explanation": "Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10]."}]', '0 <= intervals.length <= 10^4', '["Find insertion position", "Merge overlapping intervals"]', '{"c": "int** insert(int** intervals, int intervalsSize, int* intervalsColSize, int* newInterval, int newIntervalSize, int* returnSize, int** returnColumnSizes) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public int[][] insert(int[][] intervals, int[] newInterval) {\n        // Your code here\n        return new int[0][];\n    }\n}", "python": "def insert(intervals, new_interval):\n    # Your code here\n    return []"}', '{"c": "int** insert(int** intervals, int intervalsSize, int* intervalsColSize, int* newInterval, int newIntervalSize, int* returnSize, int** returnColumnSizes) {\n    int** result = malloc((intervalsSize + 1) * sizeof(int*));\n    *returnColumnSizes = malloc((intervalsSize + 1) * sizeof(int));\n    *returnSize = 0;\n    \n    int i = 0;\n    \n    // Add intervals before newInterval\n    while (i < intervalsSize && intervals[i][1] < newInterval[0]) {\n        result[*returnSize] = malloc(2 * sizeof(int));\n        result[*returnSize][0] = intervals[i][0];\n        result[*returnSize][1] = intervals[i][1];\n        (*returnColumnSizes)[*returnSize] = 2;\n        (*returnSize)++;\n        i++;\n    }\n    \n    // Merge overlapping intervals\n    while (i < intervalsSize && intervals[i][0] <= newInterval[1]) {\n        newInterval[0] = newInterval[0] < intervals[i][0] ? newInterval[0] : intervals[i][0];\n        newInterval[1] = newInterval[1] > intervals[i][1] ? newInterval[1] : intervals[i][1];\n        i++;\n    }\n    \n    result[*returnSize] = malloc(2 * sizeof(int));\n    result[*returnSize][0] = newInterval[0];\n    result[*returnSize][1] = newInterval[1];\n    (*returnColumnSizes)[*returnSize] = 2;\n    (*returnSize)++;\n    \n    // Add remaining intervals\n    while (i < intervalsSize) {\n        result[*returnSize] = malloc(2 * sizeof(int));\n        result[*returnSize][0] = intervals[i][0];\n        result[*returnSize][1] = intervals[i][1];\n        (*returnColumnSizes)[*returnSize] = 2;\n        (*returnSize)++;\n        i++;\n    }\n    \n    return result;\n}", "java": "class Solution {\n    public int[][] insert(int[][] intervals, int[] newInterval) {\n        List<int[]> result = new ArrayList<>();\n        int i = 0;\n        \n        // Add intervals before newInterval\n        while (i < intervals.length && intervals[i][1] < newInterval[0]) {\n            result.add(intervals[i]);\n            i++;\n        }\n        \n        // Merge overlapping intervals\n        while (i < intervals.length && intervals[i][0] <= newInterval[1]) {\n            newInterval[0] = Math.min(newInterval[0], intervals[i][0]);\n            newInterval[1] = Math.max(newInterval[1], intervals[i][1]);\n            i++;\n        }\n        \n        result.add(newInterval);\n        \n        // Add remaining intervals\n        while (i < intervals.length) {\n            result.add(intervals[i]);\n            i++;\n        }\n        \n        return result.toArray(new int[result.size()][]);\n    }\n}", "python": "def insert(intervals, new_interval):\n    result = []\n    i = 0\n    \n    # Add intervals before new_interval\n    while i < len(intervals) and intervals[i][1] < new_interval[0]:\n        result.append(intervals[i])\n        i += 1\n    \n    # Merge overlapping intervals\n    while i < len(intervals) and intervals[i][0] <= new_interval[1]:\n        new_interval[0] = min(new_interval[0], intervals[i][0])\n        new_interval[1] = max(new_interval[1], intervals[i][1])\n        i += 1\n    \n    result.append(new_interval)\n    \n    # Add remaining intervals\n    while i < len(intervals):\n        result.append(intervals[i])\n        i += 1\n    \n    return result"}', '[{"input": "[[1,3],[6,9]], [2,5]", "hidden": false, "expected": "[[1,5],[6,9]]"}, {"input": "[[1,2],[3,5],[6,7],[8,10],[12,16]], [4,8]", "hidden": false, "expected": "[[1,2],[3,10],[12,16]]"}, {"input": "[], [5,7]", "hidden": true, "expected": "[[5,7]]"}]', 90, 3);
INSERT INTO public.puzzles VALUES (1944, 'Sliding Window Maximum', 'Find maximum in each sliding window', 'hard', 33, 300, 3, 'You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.', '[{"input": "nums = [1,3,-1,-3,5,3,6,7], k = 3", "output": "[3,3,5,5,6,7]", "explanation": "Window position                Max\\n---------------               -----\\n[1  3  -1] -3  5  3  6  7       3\\n 1 [3  -1  -3] 5  3  6  7       3\\n 1  3 [-1  -3  5] 3  6  7       5\\n 1  3  -1 [-3  5  3] 6  7       5\\n 1  3  -1  -3 [5  3  6] 7       6\\n 1  3  -1  -3  5 [3  6  7]      7"}, {"input": "nums = [1], k = 1", "output": "[1]", "explanation": ""}]', '1 <= nums.length <= 10^5, 1 <= k <= nums.length', '["Use deque", "Store indices in decreasing order"]', '{"c": "int* maxSlidingWindow(int* nums, int numsSize, int k, int* returnSize) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        // Your code here\n        return new int[0];\n    }\n}", "python": "def max_sliding_window(nums, k):\n    # Your code here\n    return []"}', '{"c": "int* maxSlidingWindow(int* nums, int numsSize, int k, int* returnSize) {\n    if (numsSize == 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    \n    int* result = malloc((numsSize - k + 1) * sizeof(int));\n    int* deque = malloc(numsSize * sizeof(int));\n    int front = 0, rear = 0;\n    *returnSize = 0;\n    \n    for (int i = 0; i < numsSize; i++) {\n        // Remove elements outside window\n        while (front < rear && deque[front] < i - k + 1) {\n            front++;\n        }\n        \n        // Remove smaller elements from rear\n        while (front < rear && nums[deque[rear - 1]] <= nums[i]) {\n            rear--;\n        }\n        \n        deque[rear++] = i;\n        \n        // Add to result if window is complete\n        if (i >= k - 1) {\n            result[(*returnSize)++] = nums[deque[front]];\n        }\n    }\n    \n    free(deque);\n    return result;\n}", "java": "class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        if (nums.length == 0) return new int[0];\n        \n        int[] result = new int[nums.length - k + 1];\n        Deque<Integer> deque = new LinkedList<>();\n        int resultIndex = 0;\n        \n        for (int i = 0; i < nums.length; i++) {\n            // Remove elements outside window\n            while (!deque.isEmpty() && deque.peekFirst() < i - k + 1) {\n                deque.removeFirst();\n            }\n            \n            // Remove smaller elements from rear\n            while (!deque.isEmpty() && nums[deque.peekLast()] <= nums[i]) {\n                deque.removeLast();\n            }\n            \n            deque.addLast(i);\n            \n            // Add to result if window is complete\n            if (i >= k - 1) {\n                result[resultIndex++] = nums[deque.peekFirst()];\n            }\n        }\n        \n        return result;\n    }\n}", "python": "def max_sliding_window(nums, k):\n    from collections import deque\n    \n    if not nums:\n        return []\n    \n    result = []\n    dq = deque()\n    \n    for i in range(len(nums)):\n        # Remove elements outside window\n        while dq and dq[0] < i - k + 1:\n            dq.popleft()\n        \n        # Remove smaller elements from rear\n        while dq and nums[dq[-1]] <= nums[i]:\n            dq.pop()\n        \n        dq.append(i)\n        \n        # Add to result if window is complete\n        if i >= k - 1:\n            result.append(nums[dq[0]])\n    \n    return result"}', '[{"input": "[1,3,-1,-3,5,3,6,7], 3", "hidden": false, "expected": "[3,3,5,5,6,7]"}, {"input": "[1], 1", "hidden": false, "expected": "[1]"}, {"input": "[1,-1], 1", "hidden": true, "expected": "[1,-1]"}]', 91, 5);
INSERT INTO public.puzzles VALUES (1945, 'LRU Cache', 'Implement Least Recently Used cache', 'medium', 34, 250, 2, 'Design a data structure that follows the constraints of a Least Recently Used (LRU) cache. Implement the LRUCache class with get(key) and put(key, value) methods that run in O(1) time complexity.', '[{"input": "[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]", "output": "[null, null, null, 1, null, -1, null, -1, 3, 4]", "explanation": "LRUCache lRUCache = new LRUCache(2); lRUCache.put(1, 1); // cache is {1=1} lRUCache.put(2, 2); // cache is {1=1, 2=2} lRUCache.get(1);    // return 1 lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3} lRUCache.get(2);    // returns -1 (not found) lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3} lRUCache.get(1);    // return -1 (not found) lRUCache.get(3);    // return 3 lRUCache.get(4);    // return 4"}]', '1 <= capacity <= 3000, 0 <= key <= 10^4, 0 <= value <= 10^5', '["Use hash map + doubly linked list", "Hash map for O(1) access, list for O(1) removal"]', '{"c": "typedef struct {\n    // Your data structure here\n} LRUCache;\n\nLRUCache* lRUCacheCreate(int capacity) {\n    // Your code here\n    return NULL;\n}\n\nint lRUCacheGet(LRUCache* obj, int key) {\n    // Your code here\n    return -1;\n}\n\nvoid lRUCachePut(LRUCache* obj, int key, int value) {\n    // Your code here\n}\n\nvoid lRUCacheFree(LRUCache* obj) {\n    // Your code here\n}", "java": "class LRUCache {\n\n    public LRUCache(int capacity) {\n        // Your code here\n    }\n    \n    public int get(int key) {\n        // Your code here\n        return -1;\n    }\n    \n    public void put(int key, int value) {\n        // Your code here\n    }\n}", "python": "class LRUCache:\n\n    def __init__(self, capacity: int):\n        # Your code here\n        pass\n\n    def get(self, key: int) -> int:\n        # Your code here\n        return -1\n\n    def put(self, key: int, value: int) -> None:\n        # Your code here\n        pass"}', '{"c": "typedef struct Node {\n    int key;\n    int value;\n    struct Node* prev;\n    struct Node* next;\n} Node;\n\ntypedef struct {\n    int capacity;\n    int size;\n    Node* head;\n    Node* tail;\n    Node** map;\n} LRUCache;\n\nNode* createNode(int key, int value) {\n    Node* node = malloc(sizeof(Node));\n    node->key = key;\n    node->value = value;\n    node->prev = NULL;\n    node->next = NULL;\n    return node;\n}\n\nvoid addToHead(LRUCache* obj, Node* node) {\n    node->prev = obj->head;\n    node->next = obj->head->next;\n    obj->head->next->prev = node;\n    obj->head->next = node;\n}\n\nvoid removeNode(Node* node) {\n    node->prev->next = node->next;\n    node->next->prev = node->prev;\n}\n\nNode* removeTail(LRUCache* obj) {\n    Node* lastNode = obj->tail->prev;\n    removeNode(lastNode);\n    return lastNode;\n}\n\nvoid moveToHead(LRUCache* obj, Node* node) {\n    removeNode(node);\n    addToHead(obj, node);\n}\n\nLRUCache* lRUCacheCreate(int capacity) {\n    LRUCache* cache = malloc(sizeof(LRUCache));\n    cache->capacity = capacity;\n    cache->size = 0;\n    cache->head = createNode(0, 0);\n    cache->tail = createNode(0, 0);\n    cache->head->next = cache->tail;\n    cache->tail->prev = cache->head;\n    cache->map = calloc(10001, sizeof(Node*));\n    return cache;\n}\n\nint lRUCacheGet(LRUCache* obj, int key) {\n    Node* node = obj->map[key];\n    if (node == NULL) {\n        return -1;\n    }\n    moveToHead(obj, node);\n    return node->value;\n}\n\nvoid lRUCachePut(LRUCache* obj, int key, int value) {\n    Node* node = obj->map[key];\n    if (node == NULL) {\n        Node* newNode = createNode(key, value);\n        obj->map[key] = newNode;\n        addToHead(obj, newNode);\n        obj->size++;\n        \n        if (obj->size > obj->capacity) {\n            Node* tail = removeTail(obj);\n            obj->map[tail->key] = NULL;\n            free(tail);\n            obj->size--;\n        }\n    } else {\n        node->value = value;\n        moveToHead(obj, node);\n    }\n}\n\nvoid lRUCacheFree(LRUCache* obj) {\n    free(obj->map);\n    free(obj->head);\n    free(obj->tail);\n    free(obj);\n}", "java": "class LRUCache {\n    class Node {\n        int key, value;\n        Node prev, next;\n        \n        Node(int key, int value) {\n            this.key = key;\n            this.value = value;\n        }\n    }\n    \n    private int capacity;\n    private Map<Integer, Node> map;\n    private Node head, tail;\n    \n    public LRUCache(int capacity) {\n        this.capacity = capacity;\n        this.map = new HashMap<>();\n        this.head = new Node(0, 0);\n        this.tail = new Node(0, 0);\n        head.next = tail;\n        tail.prev = head;\n    }\n    \n    private void addToHead(Node node) {\n        node.prev = head;\n        node.next = head.next;\n        head.next.prev = node;\n        head.next = node;\n    }\n    \n    private void removeNode(Node node) {\n        node.prev.next = node.next;\n        node.next.prev = node.prev;\n    }\n    \n    private Node removeTail() {\n        Node lastNode = tail.prev;\n        removeNode(lastNode);\n        return lastNode;\n    }\n    \n    private void moveToHead(Node node) {\n        removeNode(node);\n        addToHead(node);\n    }\n    \n    public int get(int key) {\n        Node node = map.get(key);\n        if (node == null) {\n            return -1;\n        }\n        moveToHead(node);\n        return node.value;\n    }\n    \n    public void put(int key, int value) {\n        Node node = map.get(key);\n        if (node == null) {\n            Node newNode = new Node(key, value);\n            map.put(key, newNode);\n            addToHead(newNode);\n            \n            if (map.size() > capacity) {\n                Node tail = removeTail();\n                map.remove(tail.key);\n            }\n        } else {\n            node.value = value;\n            moveToHead(node);\n        }\n    }\n}", "python": "class LRUCache:\n    class Node:\n        def __init__(self, key=0, value=0):\n            self.key = key\n            self.value = value\n            self.prev = None\n            self.next = None\n\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.cache = {}\n        self.head = self.Node()\n        self.tail = self.Node()\n        self.head.next = self.tail\n        self.tail.prev = self.head\n    \n    def _add_to_head(self, node):\n        node.prev = self.head\n        node.next = self.head.next\n        self.head.next.prev = node\n        self.head.next = node\n    \n    def _remove_node(self, node):\n        node.prev.next = node.next\n        node.next.prev = node.prev\n    \n    def _remove_tail(self):\n        last_node = self.tail.prev\n        self._remove_node(last_node)\n        return last_node\n    \n    def _move_to_head(self, node):\n        self._remove_node(node)\n        self._add_to_head(node)\n\n    def get(self, key: int) -> int:\n        node = self.cache.get(key)\n        if not node:\n            return -1\n        self._move_to_head(node)\n        return node.value\n\n    def put(self, key: int, value: int) -> None:\n        node = self.cache.get(key)\n        if not node:\n            new_node = self.Node(key, value)\n            self.cache[key] = new_node\n            self._add_to_head(new_node)\n            \n            if len(self.cache) > self.capacity:\n                tail = self._remove_tail()\n                del self.cache[tail.key]\n        else:\n            node.value = value\n            self._move_to_head(node)"}', '[{"input": "capacity=2, operations: put(1,1), put(2,2), get(1), put(3,3), get(2), put(4,4), get(1), get(3), get(4)", "hidden": false, "expected": "null, null, null, 1, null, -1, null, -1, 3, 4"}, {"input": "capacity=1, operations: put(2,1), get(2)", "hidden": false, "expected": "null, null, 1"}, {"input": "capacity=2, operations: get(2), put(2,6), get(1), put(1,5), put(1,2), get(1), get(2)", "hidden": true, "expected": "-1, null, -1, null, null, 2, 6"}]', 92, 4);
INSERT INTO public.puzzles VALUES (1946, 'Unique Paths', 'Count unique paths in grid', 'medium', 32, 180, 2, 'There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time. Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.', '[{"input": "m = 3, n = 7", "output": "28", "explanation": ""}, {"input": "m = 3, n = 2", "output": "3", "explanation": "From the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1. Right -> Down -> Down 2. Down -> Down -> Right 3. Down -> Right -> Down"}]', '1 <= m, n <= 100', '["Use dynamic programming", "paths[i][j] = paths[i-1][j] + paths[i][j-1]"]', '{"c": "int uniquePaths(int m, int n) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int uniquePaths(int m, int n) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def unique_paths(m, n):\n    # Your code here\n    return 0"}', '{"c": "int uniquePaths(int m, int n) {\n    int dp[m][n];\n    \n    for (int i = 0; i < m; i++) {\n        dp[i][0] = 1;\n    }\n    \n    for (int j = 0; j < n; j++) {\n        dp[0][j] = 1;\n    }\n    \n    for (int i = 1; i < m; i++) {\n        for (int j = 1; j < n; j++) {\n            dp[i][j] = dp[i-1][j] + dp[i][j-1];\n        }\n    }\n    \n    return dp[m-1][n-1];\n}", "java": "class Solution {\n    public int uniquePaths(int m, int n) {\n        int[][] dp = new int[m][n];\n        \n        for (int i = 0; i < m; i++) {\n            dp[i][0] = 1;\n        }\n        \n        for (int j = 0; j < n; j++) {\n            dp[0][j] = 1;\n        }\n        \n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                dp[i][j] = dp[i-1][j] + dp[i][j-1];\n            }\n        }\n        \n        return dp[m-1][n-1];\n    }\n}", "python": "def unique_paths(m, n):\n    dp = [[1] * n for _ in range(m)]\n    \n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    \n    return dp[m-1][n-1]"}', '[{"input": "3, 7", "hidden": false, "expected": "28"}, {"input": "3, 2", "hidden": false, "expected": "3"}, {"input": "1, 1", "hidden": true, "expected": "1"}]', 93, 3);
INSERT INTO public.puzzles VALUES (1947, 'House Robber', 'Maximum money robbed without adjacent houses', 'medium', 33, 180, 2, 'You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night. Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.', '[{"input": "[1,2,3,1]", "output": "4", "explanation": "Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4."}, {"input": "[2,7,9,3,1]", "output": "12", "explanation": "Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12."}]', '1 <= nums.length <= 100', '["Use dynamic programming", "Choice: rob current house or not"]', '{"c": "int rob(int* nums, int numsSize) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int rob(int[] nums) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def rob(nums):\n    # Your code here\n    return 0"}', '{"c": "int rob(int* nums, int numsSize) {\n    if (numsSize == 0) return 0;\n    if (numsSize == 1) return nums[0];\n    \n    int prev2 = nums[0];\n    int prev1 = nums[0] > nums[1] ? nums[0] : nums[1];\n    \n    for (int i = 2; i < numsSize; i++) {\n        int current = (prev2 + nums[i] > prev1) ? prev2 + nums[i] : prev1;\n        prev2 = prev1;\n        prev1 = current;\n    }\n    \n    return prev1;\n}", "java": "class Solution {\n    public int rob(int[] nums) {\n        if (nums.length == 0) return 0;\n        if (nums.length == 1) return nums[0];\n        \n        int prev2 = nums[0];\n        int prev1 = Math.max(nums[0], nums[1]);\n        \n        for (int i = 2; i < nums.length; i++) {\n            int current = Math.max(prev1, prev2 + nums[i]);\n            prev2 = prev1;\n            prev1 = current;\n        }\n        \n        return prev1;\n    }\n}", "python": "def rob(nums):\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    prev2 = nums[0]\n    prev1 = max(nums[0], nums[1])\n    \n    for i in range(2, len(nums)):\n        current = max(prev1, prev2 + nums[i])\n        prev2, prev1 = prev1, current\n    \n    return prev1"}', '[{"input": "[1,2,3,1]", "hidden": false, "expected": "4"}, {"input": "[2,7,9,3,1]", "hidden": false, "expected": "12"}, {"input": "[5,1,3,9]", "hidden": true, "expected": "14"}]', 94, 3);
INSERT INTO public.puzzles VALUES (1948, 'Word Ladder', 'Find shortest transformation sequence', 'hard', 34, 280, 3, 'A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that: Every adjacent pair of words differs by a single letter. Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList. sk == endWord. Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.', '[{"input": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]", "output": "5", "explanation": "One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\", which is 5 words long."}, {"input": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]", "output": "0", "explanation": "The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence."}]', '1 <= beginWord.length <= 10, endWord.length == beginWord.length', '["Use BFS", "Build graph of one-letter differences"]', '{"c": "int ladderLength(char* beginWord, char* endWord, char** wordList, int wordListSize) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def ladder_length(begin_word, end_word, word_list):\n    # Your code here\n    return 0"}', '{"c": "bool isOneCharDiff(char* word1, char* word2) {\n    int diff = 0;\n    for (int i = 0; word1[i]; i++) {\n        if (word1[i] != word2[i]) {\n            diff++;\n            if (diff > 1) return false;\n        }\n    }\n    return diff == 1;\n}\n\nint ladderLength(char* beginWord, char* endWord, char** wordList, int wordListSize) {\n    bool endWordInList = false;\n    for (int i = 0; i < wordListSize; i++) {\n        if (strcmp(wordList[i], endWord) == 0) {\n            endWordInList = true;\n            break;\n        }\n    }\n    if (!endWordInList) return 0;\n    \n    char** queue = malloc((wordListSize + 1) * sizeof(char*));\n    bool* visited = calloc(wordListSize, sizeof(bool));\n    int front = 0, rear = 0;\n    \n    queue[rear++] = beginWord;\n    int level = 1;\n    \n    while (front < rear) {\n        int size = rear - front;\n        for (int i = 0; i < size; i++) {\n            char* current = queue[front++];\n            \n            if (strcmp(current, endWord) == 0) {\n                free(queue);\n                free(visited);\n                return level;\n            }\n            \n            for (int j = 0; j < wordListSize; j++) {\n                if (!visited[j] && isOneCharDiff(current, wordList[j])) {\n                    visited[j] = true;\n                    queue[rear++] = wordList[j];\n                }\n            }\n        }\n        level++;\n    }\n    \n    free(queue);\n    free(visited);\n    return 0;\n}", "java": "class Solution {\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        Set<String> wordSet = new HashSet<>(wordList);\n        if (!wordSet.contains(endWord)) return 0;\n        \n        Queue<String> queue = new LinkedList<>();\n        Set<String> visited = new HashSet<>();\n        \n        queue.offer(beginWord);\n        visited.add(beginWord);\n        int level = 1;\n        \n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            \n            for (int i = 0; i < size; i++) {\n                String current = queue.poll();\n                \n                if (current.equals(endWord)) {\n                    return level;\n                }\n                \n                for (int j = 0; j < current.length(); j++) {\n                    char[] chars = current.toCharArray();\n                    \n                    for (char c = ''a''; c <= ''z''; c++) {\n                        chars[j] = c;\n                        String newWord = new String(chars);\n                        \n                        if (wordSet.contains(newWord) && !visited.contains(newWord)) {\n                            visited.add(newWord);\n                            queue.offer(newWord);\n                        }\n                    }\n                }\n            }\n            level++;\n        }\n        \n        return 0;\n    }\n}", "python": "def ladder_length(begin_word, end_word, word_list):\n    from collections import deque\n    \n    word_set = set(word_list)\n    if end_word not in word_set:\n        return 0\n    \n    queue = deque([begin_word])\n    visited = {begin_word}\n    level = 1\n    \n    while queue:\n        for _ in range(len(queue)):\n            current = queue.popleft()\n            \n            if current == end_word:\n                return level\n            \n            for i in range(len(current)):\n                for c in ''abcdefghijklmnopqrstuvwxyz'':\n                    new_word = current[:i] + c + current[i+1:]\n                    \n                    if new_word in word_set and new_word not in visited:\n                        visited.add(new_word)\n                        queue.append(new_word)\n        \n        level += 1\n    \n    return 0"}', '[{"input": "\"hit\", \"cog\", [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]", "hidden": false, "expected": "5"}, {"input": "\"hit\", \"cog\", [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]", "hidden": false, "expected": "0"}, {"input": "\"a\", \"c\", [\"a\",\"b\",\"c\"]", "hidden": true, "expected": "2"}]', 95, 5);
INSERT INTO public.puzzles VALUES (1949, 'Rotate Image', 'Rotate n x n matrix 90 degrees clockwise', 'medium', 32, 190, 2, 'You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.', '[{"input": "[[1,2,3],[4,5,6],[7,8,9]]", "output": "[[7,4,1],[8,5,2],[9,6,3]]", "explanation": ""}, {"input": "[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]", "output": "[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]", "explanation": ""}]', 'n == matrix.length == matrix[i].length', '["Transpose then reverse each row", "Or rotate in layers"]', '{"c": "void rotate(int** matrix, int matrixSize, int* matrixColSize) {\n    // Your code here\n}", "java": "class Solution {\n    public void rotate(int[][] matrix) {\n        // Your code here\n    }\n}", "python": "def rotate(matrix):\n    # Your code here\n    pass"}', '{"c": "void rotate(int** matrix, int matrixSize, int* matrixColSize) {\n    int n = matrixSize;\n    \n    // Transpose\n    for (int i = 0; i < n; i++) {\n        for (int j = i; j < n; j++) {\n            int temp = matrix[i][j];\n            matrix[i][j] = matrix[j][i];\n            matrix[j][i] = temp;\n        }\n    }\n    \n    // Reverse each row\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n / 2; j++) {\n            int temp = matrix[i][j];\n            matrix[i][j] = matrix[i][n - 1 - j];\n            matrix[i][n - 1 - j] = temp;\n        }\n    }\n}", "java": "class Solution {\n    public void rotate(int[][] matrix) {\n        int n = matrix.length;\n        \n        // Transpose\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = temp;\n            }\n        }\n        \n        // Reverse each row\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n / 2; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[i][n - 1 - j];\n                matrix[i][n - 1 - j] = temp;\n            }\n        }\n    }\n}", "python": "def rotate(matrix):\n    n = len(matrix)\n    \n    # Transpose\n    for i in range(n):\n        for j in range(i, n):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    \n    # Reverse each row\n    for i in range(n):\n        matrix[i].reverse()"}', '[{"input": "[[1,2,3],[4,5,6],[7,8,9]]", "hidden": false, "expected": "[[7,4,1],[8,5,2],[9,6,3]]"}, {"input": "[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]", "hidden": false, "expected": "[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]"}, {"input": "[[1,2],[3,4]]", "hidden": true, "expected": "[[3,1],[4,2]]"}]', 96, 3);
INSERT INTO public.puzzles VALUES (1950, 'Coin Change', 'Minimum coins to make amount', 'medium', 33, 200, 2, 'You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.', '[{"input": "coins = [1,3,4], amount = 6", "output": "2", "explanation": "The answer is 2: we can use [3,3]."}, {"input": "coins = [2], amount = 3", "output": "-1", "explanation": "The amount of 3 cannot be made up just with coins of 2."}, {"input": "coins = [1], amount = 0", "output": "0", "explanation": "The amount is 0, so 0 coins are needed."}]', '1 <= coins.length <= 12, 1 <= coins[i] <= 2^31 - 1, 0 <= amount <= 10^4', '["Use dynamic programming", "dp[i] = min(dp[i-coin] + 1) for all coins"]', '{"c": "int coinChange(int* coins, int coinsSize, int amount) {\n    // Your code here\n    return -1;\n}", "java": "class Solution {\n    public int coinChange(int[] coins, int amount) {\n        // Your code here\n        return -1;\n    }\n}", "python": "def coin_change(coins, amount):\n    # Your code here\n    return -1"}', '{"c": "int coinChange(int* coins, int coinsSize, int amount) {\n    if (amount == 0) return 0;\n    \n    int* dp = malloc((amount + 1) * sizeof(int));\n    for (int i = 0; i <= amount; i++) {\n        dp[i] = amount + 1;\n    }\n    dp[0] = 0;\n    \n    for (int i = 1; i <= amount; i++) {\n        for (int j = 0; j < coinsSize; j++) {\n            if (coins[j] <= i) {\n                dp[i] = dp[i] < dp[i - coins[j]] + 1 ? dp[i] : dp[i - coins[j]] + 1;\n            }\n        }\n    }\n    \n    int result = dp[amount] > amount ? -1 : dp[amount];\n    free(dp);\n    return result;\n}", "java": "class Solution {\n    public int coinChange(int[] coins, int amount) {\n        if (amount == 0) return 0;\n        \n        int[] dp = new int[amount + 1];\n        Arrays.fill(dp, amount + 1);\n        dp[0] = 0;\n        \n        for (int i = 1; i <= amount; i++) {\n            for (int coin : coins) {\n                if (coin <= i) {\n                    dp[i] = Math.min(dp[i], dp[i - coin] + 1);\n                }\n            }\n        }\n        \n        return dp[amount] > amount ? -1 : dp[amount];\n    }\n}", "python": "def coin_change(coins, amount):\n    if amount == 0:\n        return 0\n    \n    dp = [amount + 1] * (amount + 1)\n    dp[0] = 0\n    \n    for i in range(1, amount + 1):\n        for coin in coins:\n            if coin <= i:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    \n    return dp[amount] if dp[amount] <= amount else -1"}', '[{"input": "[1,3,4], 6", "hidden": false, "expected": "2"}, {"input": "[2], 3", "hidden": false, "expected": "-1"}, {"input": "[1], 0", "hidden": true, "expected": "0"}]', 97, 3);
INSERT INTO public.puzzles VALUES (1951, 'Design Add and Search Words Data Structure', 'Implement trie with wildcard search', 'medium', 34, 230, 2, 'Design a data structure that supports adding new words and finding if a string matches any previously added string. Implement the WordDictionary class with addWord(word) and search(word) methods. search(word) can search for a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.', '[{"input": "[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]", "output": "[null,null,null,null,false,true,true,true]", "explanation": "WordDictionary wordDictionary = new WordDictionary(); wordDictionary.addWord(\"bad\"); wordDictionary.addWord(\"dad\"); wordDictionary.addWord(\"mad\"); wordDictionary.search(\"pad\"); // return False wordDictionary.search(\"bad\"); // return True wordDictionary.search(\".ad\"); // return True wordDictionary.search(\"b..\"); // return True"}]', '1 <= word.length <= 25', '["Use trie data structure", "DFS for wildcard matching"]', '{"c": "typedef struct {\n    // Your data structure here\n} WordDictionary;\n\nWordDictionary* wordDictionaryCreate() {\n    // Your code here\n    return NULL;\n}\n\nvoid wordDictionaryAddWord(WordDictionary* obj, char* word) {\n    // Your code here\n}\n\nbool wordDictionarySearch(WordDictionary* obj, char* word) {\n    // Your code here\n    return false;\n}\n\nvoid wordDictionaryFree(WordDictionary* obj) {\n    // Your code here\n}", "java": "class WordDictionary {\n\n    public WordDictionary() {\n        // Your code here\n    }\n    \n    public void addWord(String word) {\n        // Your code here\n    }\n    \n    public boolean search(String word) {\n        // Your code here\n        return false;\n    }\n}", "python": "class WordDictionary:\n\n    def __init__(self):\n        # Your code here\n        pass\n\n    def addWord(self, word: str) -> None:\n        # Your code here\n        pass\n\n    def search(self, word: str) -> bool:\n        # Your code here\n        return False"}', '{"c": "typedef struct TrieNode {\n    struct TrieNode* children[26];\n    bool isEnd;\n} TrieNode;\n\ntypedef struct {\n    TrieNode* root;\n} WordDictionary;\n\nTrieNode* createNode() {\n    TrieNode* node = malloc(sizeof(TrieNode));\n    for (int i = 0; i < 26; i++) {\n        node->children[i] = NULL;\n    }\n    node->isEnd = false;\n    return node;\n}\n\nbool searchHelper(TrieNode* node, char* word, int index) {\n    if (word[index] == ''\\0'') {\n        return node->isEnd;\n    }\n    \n    if (word[index] == ''.'') {\n        for (int i = 0; i < 26; i++) {\n            if (node->children[i] && searchHelper(node->children[i], word, index + 1)) {\n                return true;\n            }\n        }\n        return false;\n    } else {\n        int charIndex = word[index] - ''a'';\n        if (node->children[charIndex]) {\n            return searchHelper(node->children[charIndex], word, index + 1);\n        }\n        return false;\n    }\n}\n\nWordDictionary* wordDictionaryCreate() {\n    WordDictionary* dict = malloc(sizeof(WordDictionary));\n    dict->root = createNode();\n    return dict;\n}\n\nvoid wordDictionaryAddWord(WordDictionary* obj, char* word) {\n    TrieNode* current = obj->root;\n    for (int i = 0; word[i]; i++) {\n        int index = word[i] - ''a'';\n        if (!current->children[index]) {\n            current->children[index] = createNode();\n        }\n        current = current->children[index];\n    }\n    current->isEnd = true;\n}\n\nbool wordDictionarySearch(WordDictionary* obj, char* word) {\n    return searchHelper(obj->root, word, 0);\n}\n\nvoid wordDictionaryFree(WordDictionary* obj) {\n    // Free implementation\n    free(obj);\n}", "java": "class WordDictionary {\n    class TrieNode {\n        TrieNode[] children = new TrieNode[26];\n        boolean isEnd = false;\n    }\n    \n    private TrieNode root;\n    \n    public WordDictionary() {\n        root = new TrieNode();\n    }\n    \n    public void addWord(String word) {\n        TrieNode current = root;\n        for (char c : word.toCharArray()) {\n            int index = c - ''a'';\n            if (current.children[index] == null) {\n                current.children[index] = new TrieNode();\n            }\n            current = current.children[index];\n        }\n        current.isEnd = true;\n    }\n    \n    public boolean search(String word) {\n        return searchHelper(root, word, 0);\n    }\n    \n    private boolean searchHelper(TrieNode node, String word, int index) {\n        if (index == word.length()) {\n            return node.isEnd;\n        }\n        \n        char c = word.charAt(index);\n        if (c == ''.'') {\n            for (TrieNode child : node.children) {\n                if (child != null && searchHelper(child, word, index + 1)) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            int charIndex = c - ''a'';\n            if (node.children[charIndex] != null) {\n                return searchHelper(node.children[charIndex], word, index + 1);\n            }\n            return false;\n        }\n    }\n}", "python": "class WordDictionary:\n    class TrieNode:\n        def __init__(self):\n            self.children = {}\n            self.is_end = False\n\n    def __init__(self):\n        self.root = self.TrieNode()\n\n    def addWord(self, word: str) -> None:\n        current = self.root\n        for char in word:\n            if char not in current.children:\n                current.children[char] = self.TrieNode()\n            current = current.children[char]\n        current.is_end = True\n\n    def search(self, word: str) -> bool:\n        def search_helper(node, index):\n            if index == len(word):\n                return node.is_end\n            \n            char = word[index]\n            if char == ''.'':\n                for child in node.children.values():\n                    if search_helper(child, index + 1):\n                        return True\n                return False\n            else:\n                if char in node.children:\n                    return search_helper(node.children[char], index + 1)\n                return False\n        \n        return search_helper(self.root, 0)"}', '[{"input": "addWord(\"bad\"), addWord(\"dad\"), addWord(\"mad\"), search(\"pad\"), search(\"bad\"), search(\".ad\"), search(\"b..\")", "hidden": false, "expected": "null, null, null, false, true, true, true"}, {"input": "addWord(\"at\"), addWord(\"and\"), addWord(\"an\"), addWord(\"add\"), search(\"a\"), search(\".at\")", "hidden": false, "expected": "null, null, null, null, false, false"}, {"input": "addWord(\"a\"), search(\".\")", "hidden": true, "expected": "null, true"}]', 98, 4);
INSERT INTO public.puzzles VALUES (1953, 'Longest Increasing Subsequence', 'Find length of longest increasing subsequence', 'medium', 33, 200, 2, 'Given an integer array nums, return the length of the longest strictly increasing subsequence. A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements.', '[{"input": "[10,9,2,5,3,7,101,18]", "output": "4", "explanation": "The longest increasing subsequence is [2,3,7,18], therefore the length is 4."}, {"input": "[0,1,0,3,2,3]", "output": "4", "explanation": ""}, {"input": "[7,7,7,7,7,7,7]", "output": "1", "explanation": ""}]', '1 <= nums.length <= 2500', '["Use dynamic programming", "dp[i] = max length ending at i"]', '{"c": "int lengthOfLIS(int* nums, int numsSize) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int lengthOfLIS(int[] nums) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def length_of_lis(nums):\n    # Your code here\n    return 0"}', '{"c": "int lengthOfLIS(int* nums, int numsSize) {\n    if (numsSize == 0) return 0;\n    \n    int* dp = malloc(numsSize * sizeof(int));\n    for (int i = 0; i < numsSize; i++) {\n        dp[i] = 1;\n    }\n    \n    int maxLen = 1;\n    for (int i = 1; i < numsSize; i++) {\n        for (int j = 0; j < i; j++) {\n            if (nums[j] < nums[i]) {\n                dp[i] = dp[i] > dp[j] + 1 ? dp[i] : dp[j] + 1;\n            }\n        }\n        maxLen = maxLen > dp[i] ? maxLen : dp[i];\n    }\n    \n    free(dp);\n    return maxLen;\n}", "java": "class Solution {\n    public int lengthOfLIS(int[] nums) {\n        if (nums.length == 0) return 0;\n        \n        int[] dp = new int[nums.length];\n        Arrays.fill(dp, 1);\n        \n        int maxLen = 1;\n        for (int i = 1; i < nums.length; i++) {\n            for (int j = 0; j < i; j++) {\n                if (nums[j] < nums[i]) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n            maxLen = Math.max(maxLen, dp[i]);\n        }\n        \n        return maxLen;\n    }\n}", "python": "def length_of_lis(nums):\n    if not nums:\n        return 0\n    \n    dp = [1] * len(nums)\n    \n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[j] < nums[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)"}', '[{"input": "[10,9,2,5,3,7,101,18]", "hidden": false, "expected": "4"}, {"input": "[0,1,0,3,2,3]", "hidden": false, "expected": "4"}, {"input": "[7,7,7,7,7,7,7]", "hidden": true, "expected": "1"}]', 100, 3);
INSERT INTO public.puzzles VALUES (1954, 'Binary Tree Right Side View', 'Return values of nodes you can see from right side', 'medium', 34, 190, 2, 'Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.', '[{"input": "[1,2,3,null,5,null,4]", "output": "[1,3,4]", "explanation": ""}, {"input": "[1,null,3]", "output": "[1,3]", "explanation": ""}, {"input": "[]", "output": "[]", "explanation": ""}]', 'The number of nodes in the tree is in the range [0, 100]', '["Use level-order traversal", "Take rightmost node at each level"]', '{"c": "struct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n};\n\nint* rightSideView(struct TreeNode* root, int* returnSize) {\n    // Your code here\n    return NULL;\n}", "java": "public class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\nclass Solution {\n    public List<Integer> rightSideView(TreeNode root) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef right_side_view(root):\n    # Your code here\n    return []"}', '{"c": "int* rightSideView(struct TreeNode* root, int* returnSize) {\n    if (!root) {\n        *returnSize = 0;\n        return NULL;\n    }\n    \n    int* result = malloc(100 * sizeof(int));\n    struct TreeNode** queue = malloc(10000 * sizeof(struct TreeNode*));\n    int front = 0, rear = 0;\n    *returnSize = 0;\n    \n    queue[rear++] = root;\n    \n    while (front < rear) {\n        int size = rear - front;\n        \n        for (int i = 0; i < size; i++) {\n            struct TreeNode* node = queue[front++];\n            \n            if (i == size - 1) {\n                result[(*returnSize)++] = node->val;\n            }\n            \n            if (node->left) queue[rear++] = node->left;\n            if (node->right) queue[rear++] = node->right;\n        }\n    }\n    \n    free(queue);\n    return result;\n}", "java": "class Solution {\n    public List<Integer> rightSideView(TreeNode root) {\n        List<Integer> result = new ArrayList<>();\n        if (root == null) return result;\n        \n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        \n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            \n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                \n                if (i == size - 1) {\n                    result.add(node.val);\n                }\n                \n                if (node.left != null) queue.offer(node.left);\n                if (node.right != null) queue.offer(node.right);\n            }\n        }\n        \n        return result;\n    }\n}", "python": "def right_side_view(root):\n    if not root:\n        return []\n    \n    from collections import deque\n    result = []\n    queue = deque([root])\n    \n    while queue:\n        size = len(queue)\n        \n        for i in range(size):\n            node = queue.popleft()\n            \n            if i == size - 1:\n                result.append(node.val)\n            \n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n    \n    return result"}', '[{"input": "[1,2,3,null,5,null,4]", "hidden": false, "expected": "[1,3,4]"}, {"input": "[1,null,3]", "hidden": false, "expected": "[1,3]"}, {"input": "[]", "hidden": true, "expected": "[]"}]', 101, 3);
INSERT INTO public.puzzles VALUES (1956, 'Edit Distance', 'Minimum operations to convert string1 to string2', 'hard', 33, 280, 3, 'Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2. You have the following three operations permitted on a word: Insert a character, Delete a character, Replace a character.', '[{"input": "word1 = \"horse\", word2 = \"ros\"", "output": "3", "explanation": "horse -> rorse (replace ''h'' with ''r''), rorse -> rose (remove ''r''), rose -> ros (remove ''e'')"}, {"input": "word1 = \"intention\", word2 = \"execution\"", "output": "5", "explanation": "intention -> inention (remove ''t''), inention -> enention (replace ''i'' with ''e''), enention -> exention (replace ''n'' with ''x''), exention -> exection (replace ''n'' with ''c''), exection -> execution (insert ''u'')"}]', '0 <= word1.length, word2.length <= 500', '["Use dynamic programming", "dp[i][j] = min edit distance for first i chars of word1 and first j chars of word2"]', '{"c": "int minDistance(char* word1, char* word2) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int minDistance(String word1, String word2) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def min_distance(word1, word2):\n    # Your code here\n    return 0"}', '{"c": "int minDistance(char* word1, char* word2) {\n    int m = strlen(word1), n = strlen(word2);\n    int** dp = malloc((m + 1) * sizeof(int*));\n    for (int i = 0; i <= m; i++) {\n        dp[i] = malloc((n + 1) * sizeof(int));\n    }\n    \n    // Initialize base cases\n    for (int i = 0; i <= m; i++) dp[i][0] = i;\n    for (int j = 0; j <= n; j++) dp[0][j] = j;\n    \n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (word1[i-1] == word2[j-1]) {\n                dp[i][j] = dp[i-1][j-1];\n            } else {\n                int replace = dp[i-1][j-1] + 1;\n                int insert = dp[i][j-1] + 1;\n                int delete = dp[i-1][j] + 1;\n                dp[i][j] = replace < insert ? replace : insert;\n                dp[i][j] = dp[i][j] < delete ? dp[i][j] : delete;\n            }\n        }\n    }\n    \n    int result = dp[m][n];\n    for (int i = 0; i <= m; i++) free(dp[i]);\n    free(dp);\n    return result;\n}", "java": "class Solution {\n    public int minDistance(String word1, String word2) {\n        int m = word1.length(), n = word2.length();\n        int[][] dp = new int[m + 1][n + 1];\n        \n        // Initialize base cases\n        for (int i = 0; i <= m; i++) dp[i][0] = i;\n        for (int j = 0; j <= n; j++) dp[0][j] = j;\n        \n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (word1.charAt(i-1) == word2.charAt(j-1)) {\n                    dp[i][j] = dp[i-1][j-1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i-1][j-1], Math.min(dp[i][j-1], dp[i-1][j]));\n                }\n            }\n        }\n        \n        return dp[m][n];\n    }\n}", "python": "def min_distance(word1, word2):\n    m, n = len(word1), len(word2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Initialize base cases\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if word1[i-1] == word2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j-1], dp[i][j-1], dp[i-1][j])\n    \n    return dp[m][n]"}', '[{"input": "\"horse\", \"ros\"", "hidden": false, "expected": "3"}, {"input": "\"intention\", \"execution\"", "hidden": false, "expected": "5"}, {"input": "\"\", \"a\"", "hidden": true, "expected": "1"}]', 103, 5);
INSERT INTO public.puzzles VALUES (1959, 'Subarray Sum Equals K', 'Count subarrays with sum equal to k', 'medium', 33, 200, 2, 'Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k. A subarray is a contiguous non-empty sequence of elements within an array.', '[{"input": "nums = [1,1,1], k = 2", "output": "2", "explanation": ""}, {"input": "nums = [1,2,3], k = 3", "output": "2", "explanation": ""}]', '1 <= nums.length <= 2 * 10^4', '["Use prefix sum", "Track cumulative sums in hash map"]', '{"c": "int subarraySum(int* nums, int numsSize, int k) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int subarraySum(int[] nums, int k) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def subarray_sum(nums, k):\n    # Your code here\n    return 0"}', '{"c": "int subarraySum(int* nums, int numsSize, int k) {\n    int count = 0;\n    \n    for (int i = 0; i < numsSize; i++) {\n        int sum = 0;\n        for (int j = i; j < numsSize; j++) {\n            sum += nums[j];\n            if (sum == k) {\n                count++;\n            }\n        }\n    }\n    \n    return count;\n}", "java": "class Solution {\n    public int subarraySum(int[] nums, int k) {\n        Map<Integer, Integer> prefixSumCount = new HashMap<>();\n        prefixSumCount.put(0, 1);\n        \n        int count = 0;\n        int prefixSum = 0;\n        \n        for (int num : nums) {\n            prefixSum += num;\n            \n            if (prefixSumCount.containsKey(prefixSum - k)) {\n                count += prefixSumCount.get(prefixSum - k);\n            }\n            \n            prefixSumCount.put(prefixSum, prefixSumCount.getOrDefault(prefixSum, 0) + 1);\n        }\n        \n        return count;\n    }\n}", "python": "def subarray_sum(nums, k):\n    from collections import defaultdict\n    \n    prefix_sum_count = defaultdict(int)\n    prefix_sum_count[0] = 1\n    \n    count = 0\n    prefix_sum = 0\n    \n    for num in nums:\n        prefix_sum += num\n        \n        if prefix_sum - k in prefix_sum_count:\n            count += prefix_sum_count[prefix_sum - k]\n        \n        prefix_sum_count[prefix_sum] += 1\n    \n    return count"}', '[{"input": "[1,1,1], 2", "hidden": false, "expected": "2"}, {"input": "[1,2,3], 3", "hidden": false, "expected": "2"}, {"input": "[1], 0", "hidden": true, "expected": "0"}]', 106, 3);
INSERT INTO public.puzzles VALUES (1960, 'Find Median from Data Stream', 'Design data structure to find median in stream', 'hard', 34, 300, 3, 'The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values. Implement the MedianFinder class with addNum(num) to add an integer from the data stream to the data structure and findMedian() to return the median of all elements so far.', '[{"input": "[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\\n[[], [1], [2], [], [3], []]", "output": "[null, null, null, 1.5, null, 2.0]", "explanation": "MedianFinder medianFinder = new MedianFinder(); medianFinder.addNum(1);    // arr = [1] medianFinder.addNum(2);    // arr = [1, 2] medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2) medianFinder.addNum(3);    // arr[1, 2, 3] medianFinder.findMedian(); // return 2.0"}]', '-10^5 <= num <= 10^5', '["Use two heaps", "Max heap for smaller half, min heap for larger half"]', '{"c": "typedef struct {\n    // Your data structure here\n} MedianFinder;\n\nMedianFinder* medianFinderCreate() {\n    // Your code here\n    return NULL;\n}\n\nvoid medianFinderAddNum(MedianFinder* obj, int num) {\n    // Your code here\n}\n\ndouble medianFinderFindMedian(MedianFinder* obj) {\n    // Your code here\n    return 0.0;\n}\n\nvoid medianFinderFree(MedianFinder* obj) {\n    // Your code here\n}", "java": "class MedianFinder {\n\n    public MedianFinder() {\n        // Your code here\n    }\n    \n    public void addNum(int num) {\n        // Your code here\n    }\n    \n    public double findMedian() {\n        // Your code here\n        return 0.0;\n    }\n}", "python": "class MedianFinder:\n\n    def __init__(self):\n        # Your code here\n        pass\n\n    def addNum(self, num: int) -> None:\n        # Your code here\n        pass\n\n    def findMedian(self) -> float:\n        # Your code here\n        return 0.0"}', '{"c": "// Simplified implementation using arrays\ntypedef struct {\n    int* data;\n    int size;\n    int capacity;\n} MedianFinder;\n\nMedianFinder* medianFinderCreate() {\n    MedianFinder* finder = malloc(sizeof(MedianFinder));\n    finder->capacity = 1000;\n    finder->data = malloc(finder->capacity * sizeof(int));\n    finder->size = 0;\n    return finder;\n}\n\nvoid medianFinderAddNum(MedianFinder* obj, int num) {\n    int i = obj->size;\n    while (i > 0 && obj->data[i-1] > num) {\n        obj->data[i] = obj->data[i-1];\n        i--;\n    }\n    obj->data[i] = num;\n    obj->size++;\n}\n\ndouble medianFinderFindMedian(MedianFinder* obj) {\n    if (obj->size % 2 == 1) {\n        return obj->data[obj->size / 2];\n    } else {\n        return (obj->data[obj->size / 2 - 1] + obj->data[obj->size / 2]) / 2.0;\n    }\n}\n\nvoid medianFinderFree(MedianFinder* obj) {\n    free(obj->data);\n    free(obj);\n}", "java": "class MedianFinder {\n    private PriorityQueue<Integer> maxHeap;\n    private PriorityQueue<Integer> minHeap;\n\n    public MedianFinder() {\n        maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n        minHeap = new PriorityQueue<>();\n    }\n    \n    public void addNum(int num) {\n        if (maxHeap.isEmpty() || num <= maxHeap.peek()) {\n            maxHeap.offer(num);\n        } else {\n            minHeap.offer(num);\n        }\n        \n        // Balance heaps\n        if (maxHeap.size() > minHeap.size() + 1) {\n            minHeap.offer(maxHeap.poll());\n        } else if (minHeap.size() > maxHeap.size() + 1) {\n            maxHeap.offer(minHeap.poll());\n        }\n    }\n    \n    public double findMedian() {\n        if (maxHeap.size() == minHeap.size()) {\n            return (maxHeap.peek() + minHeap.peek()) / 2.0;\n        } else if (maxHeap.size() > minHeap.size()) {\n            return maxHeap.peek();\n        } else {\n            return minHeap.peek();\n        }\n    }\n}", "python": "class MedianFinder:\n    def __init__(self):\n        import heapq\n        self.max_heap = []  # For smaller half (negated for max heap)\n        self.min_heap = []  # For larger half\n\n    def addNum(self, num: int) -> None:\n        import heapq\n        \n        if not self.max_heap or num <= -self.max_heap[0]:\n            heapq.heappush(self.max_heap, -num)\n        else:\n            heapq.heappush(self.min_heap, num)\n        \n        # Balance heaps\n        if len(self.max_heap) > len(self.min_heap) + 1:\n            heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))\n        elif len(self.min_heap) > len(self.max_heap) + 1:\n            heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))\n\n    def findMedian(self) -> float:\n        if len(self.max_heap) == len(self.min_heap):\n            return (-self.max_heap[0] + self.min_heap[0]) / 2.0\n        elif len(self.max_heap) > len(self.min_heap):\n            return -self.max_heap[0]\n        else:\n            return self.min_heap[0]"}', '[{"input": "addNum(1), addNum(2), findMedian(), addNum(3), findMedian()", "hidden": false, "expected": "null, null, 1.5, null, 2.0"}, {"input": "addNum(-1), addNum(-2), findMedian(), addNum(-3), findMedian()", "hidden": false, "expected": "null, null, -1.5, null, -2.0"}, {"input": "addNum(6), findMedian(), addNum(10), findMedian(), addNum(2), findMedian()", "hidden": true, "expected": "null, 6.0, null, 8.0, null, 6.0"}]', 107, 5);
INSERT INTO public.puzzles VALUES (1961, 'Palindromic Substrings', 'Count number of palindromic substrings', 'medium', 33, 180, 2, 'Given a string s, return the number of palindromic substrings in it. A string is a palindrome when it reads the same backward as forward. A substring is a contiguous sequence of characters within the string.', '[{"input": "\"abc\"", "output": "3", "explanation": "Three palindromic strings: \"a\", \"b\", \"c\"."}, {"input": "\"aaa\"", "output": "6", "explanation": "Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\"."}]', '1 <= s.length <= 1000', '["Expand around centers", "Consider both odd and even length palindromes"]', '{"c": "int countSubstrings(char* s) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int countSubstrings(String s) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def count_substrings(s):\n    # Your code here\n    return 0"}', '{"c": "int expandAroundCenter(char* s, int left, int right) {\n    int count = 0;\n    int len = strlen(s);\n    \n    while (left >= 0 && right < len && s[left] == s[right]) {\n        count++;\n        left--;\n        right++;\n    }\n    \n    return count;\n}\n\nint countSubstrings(char* s) {\n    int count = 0;\n    int len = strlen(s);\n    \n    for (int i = 0; i < len; i++) {\n        // Odd length palindromes\n        count += expandAroundCenter(s, i, i);\n        // Even length palindromes\n        count += expandAroundCenter(s, i, i + 1);\n    }\n    \n    return count;\n}", "java": "class Solution {\n    public int countSubstrings(String s) {\n        int count = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            // Odd length palindromes\n            count += expandAroundCenter(s, i, i);\n            // Even length palindromes\n            count += expandAroundCenter(s, i, i + 1);\n        }\n        \n        return count;\n    }\n    \n    private int expandAroundCenter(String s, int left, int right) {\n        int count = 0;\n        \n        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {\n            count++;\n            left--;\n            right++;\n        }\n        \n        return count;\n    }\n}", "python": "def count_substrings(s):\n    def expand_around_center(left, right):\n        count = 0\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n        return count\n    \n    count = 0\n    for i in range(len(s)):\n        # Odd length palindromes\n        count += expand_around_center(i, i)\n        # Even length palindromes\n        count += expand_around_center(i, i + 1)\n    \n    return count"}', '[{"input": "\"abc\"", "hidden": false, "expected": "3"}, {"input": "\"aaa\"", "hidden": false, "expected": "6"}, {"input": "\"racecar\"", "hidden": true, "expected": "10"}]', 108, 3);
INSERT INTO public.puzzles VALUES (1962, 'Implement Trie (Prefix Tree)', 'Implement trie data structure', 'medium', 34, 220, 2, 'A trie (pronounced as "try") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker. Implement the Trie class with insert(word), search(word), and startsWith(prefix) methods.', '[{"input": "[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]", "output": "[null, null, true, false, true, null, true]", "explanation": "Trie trie = new Trie(); trie.insert(\"apple\"); trie.search(\"apple\");   // return True trie.search(\"app\");     // return False trie.startsWith(\"app\"); // return True trie.insert(\"app\"); trie.search(\"app\");     // return True"}]', '1 <= word.length, prefix.length <= 2000', '["Use tree of nodes", "Each node has 26 children for letters"]', '{"c": "typedef struct {\n    // Your data structure here\n} Trie;\n\nTrie* trieCreate() {\n    // Your code here\n    return NULL;\n}\n\nvoid trieInsert(Trie* obj, char* word) {\n    // Your code here\n}\n\nbool trieSearch(Trie* obj, char* word) {\n    // Your code here\n    return false;\n}\n\nbool trieStartsWith(Trie* obj, char* prefix) {\n    // Your code here\n    return false;\n}\n\nvoid trieFree(Trie* obj) {\n    // Your code here\n}", "java": "class Trie {\n\n    public Trie() {\n        // Your code here\n    }\n    \n    public void insert(String word) {\n        // Your code here\n    }\n    \n    public boolean search(String word) {\n        // Your code here\n        return false;\n    }\n    \n    public boolean startsWith(String prefix) {\n        // Your code here\n        return false;\n    }\n}", "python": "class Trie:\n\n    def __init__(self):\n        # Your code here\n        pass\n\n    def insert(self, word: str) -> None:\n        # Your code here\n        pass\n\n    def search(self, word: str) -> bool:\n        # Your code here\n        return False\n\n    def startsWith(self, prefix: str) -> bool:\n        # Your code here\n        return False"}', '{"c": "typedef struct TrieNode {\n    struct TrieNode* children[26];\n    bool isEnd;\n} TrieNode;\n\ntypedef struct {\n    TrieNode* root;\n} Trie;\n\nTrieNode* createNode() {\n    TrieNode* node = malloc(sizeof(TrieNode));\n    for (int i = 0; i < 26; i++) {\n        node->children[i] = NULL;\n    }\n    node->isEnd = false;\n    return node;\n}\n\nTrie* trieCreate() {\n    Trie* trie = malloc(sizeof(Trie));\n    trie->root = createNode();\n    return trie;\n}\n\nvoid trieInsert(Trie* obj, char* word) {\n    TrieNode* current = obj->root;\n    for (int i = 0; word[i]; i++) {\n        int index = word[i] - ''a'';\n        if (!current->children[index]) {\n            current->children[index] = createNode();\n        }\n        current = current->children[index];\n    }\n    current->isEnd = true;\n}\n\nbool trieSearch(Trie* obj, char* word) {\n    TrieNode* current = obj->root;\n    for (int i = 0; word[i]; i++) {\n        int index = word[i] - ''a'';\n        if (!current->children[index]) {\n            return false;\n        }\n        current = current->children[index];\n    }\n    return current->isEnd;\n}\n\nbool trieStartsWith(Trie* obj, char* prefix) {\n    TrieNode* current = obj->root;\n    for (int i = 0; prefix[i]; i++) {\n        int index = prefix[i] - ''a'';\n        if (!current->children[index]) {\n            return false;\n        }\n        current = current->children[index];\n    }\n    return true;\n}\n\nvoid trieFree(Trie* obj) {\n    free(obj);\n}", "java": "class Trie {\n    class TrieNode {\n        TrieNode[] children = new TrieNode[26];\n        boolean isEnd = false;\n    }\n    \n    private TrieNode root;\n\n    public Trie() {\n        root = new TrieNode();\n    }\n    \n    public void insert(String word) {\n        TrieNode current = root;\n        for (char c : word.toCharArray()) {\n            int index = c - ''a'';\n            if (current.children[index] == null) {\n                current.children[index] = new TrieNode();\n            }\n            current = current.children[index];\n        }\n        current.isEnd = true;\n    }\n    \n    public boolean search(String word) {\n        TrieNode current = root;\n        for (char c : word.toCharArray()) {\n            int index = c - ''a'';\n            if (current.children[index] == null) {\n                return false;\n            }\n            current = current.children[index];\n        }\n        return current.isEnd;\n    }\n    \n    public boolean startsWith(String prefix) {\n        TrieNode current = root;\n        for (char c : prefix.toCharArray()) {\n            int index = c - ''a'';\n            if (current.children[index] == null) {\n                return false;\n            }\n            current = current.children[index];\n        }\n        return true;\n    }\n}", "python": "class Trie:\n    class TrieNode:\n        def __init__(self):\n            self.children = {}\n            self.is_end = False\n\n    def __init__(self):\n        self.root = self.TrieNode()\n\n    def insert(self, word: str) -> None:\n        current = self.root\n        for char in word:\n            if char not in current.children:\n                current.children[char] = self.TrieNode()\n            current = current.children[char]\n        current.is_end = True\n\n    def search(self, word: str) -> bool:\n        current = self.root\n        for char in word:\n            if char not in current.children:\n                return False\n            current = current.children[char]\n        return current.is_end\n\n    def startsWith(self, prefix: str) -> bool:\n        current = self.root\n        for char in prefix:\n            if char not in current.children:\n                return False\n            current = current.children[char]\n        return True"}', '[{"input": "insert(\"apple\"), search(\"apple\"), search(\"app\"), startsWith(\"app\"), insert(\"app\"), search(\"app\")", "hidden": false, "expected": "null, true, false, true, null, true"}, {"input": "insert(\"hello\"), search(\"hell\"), startsWith(\"hellll\"), search(\"hellll\"), startsWith(\"hello\"), search(\"hello\")", "hidden": false, "expected": "null, false, false, false, true, true"}, {"input": "insert(\"word\"), insert(\"world\"), search(\"word\"), search(\"world\"), startsWith(\"wo\")", "hidden": true, "expected": "null, null, true, true, true"}]', 109, 4);
INSERT INTO public.puzzles VALUES (1963, 'Knapsack Problem', 'Maximum value in knapsack with weight limit', 'medium', 33, 220, 2, 'You are given weights and values of n items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. In other words, given two integer arrays val[0..n-1] and wt[0..n-1] which represent values and weights associated with n items respectively. Also given an integer W which represents knapsack capacity, find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than or equal to W.', '[{"input": "W = 50, weights = [10, 20, 30], values = [60, 100, 120]", "output": "220", "explanation": "By taking items of weight 20 and 30 kg, we get total weight of 50kg and value of 220."}, {"input": "W = 10, weights = [5, 4, 6], values = [10, 40, 30]", "output": "50", "explanation": "By taking items of weight 4 and 5 kg, we get total weight of 9kg and value of 50."}]', '1 <= n <= 1000, 1 <= W <= 1000', '["Use dynamic programming", "dp[i][w] = maximum value with first i items and weight limit w"]', '{"c": "int knapsack(int W, int* weights, int* values, int n) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int knapsack(int W, int[] weights, int[] values, int n) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def knapsack(W, weights, values, n):\n    # Your code here\n    return 0"}', '{"c": "int knapsack(int W, int* weights, int* values, int n) {\n    int** dp = malloc((n + 1) * sizeof(int*));\n    for (int i = 0; i <= n; i++) {\n        dp[i] = malloc((W + 1) * sizeof(int));\n    }\n    \n    for (int i = 0; i <= n; i++) {\n        for (int w = 0; w <= W; w++) {\n            if (i == 0 || w == 0) {\n                dp[i][w] = 0;\n            } else if (weights[i-1] <= w) {\n                int include = values[i-1] + dp[i-1][w - weights[i-1]];\n                int exclude = dp[i-1][w];\n                dp[i][w] = include > exclude ? include : exclude;\n            } else {\n                dp[i][w] = dp[i-1][w];\n            }\n        }\n    }\n    \n    int result = dp[n][W];\n    for (int i = 0; i <= n; i++) free(dp[i]);\n    free(dp);\n    return result;\n}", "java": "class Solution {\n    public int knapsack(int W, int[] weights, int[] values, int n) {\n        int[][] dp = new int[n + 1][W + 1];\n        \n        for (int i = 0; i <= n; i++) {\n            for (int w = 0; w <= W; w++) {\n                if (i == 0 || w == 0) {\n                    dp[i][w] = 0;\n                } else if (weights[i-1] <= w) {\n                    dp[i][w] = Math.max(values[i-1] + dp[i-1][w - weights[i-1]], dp[i-1][w]);\n                } else {\n                    dp[i][w] = dp[i-1][w];\n                }\n            }\n        }\n        \n        return dp[n][W];\n    }\n}", "python": "def knapsack(W, weights, values, n):\n    dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)]\n    \n    for i in range(n + 1):\n        for w in range(W + 1):\n            if i == 0 or w == 0:\n                dp[i][w] = 0\n            elif weights[i-1] <= w:\n                dp[i][w] = max(values[i-1] + dp[i-1][w - weights[i-1]], dp[i-1][w])\n            else:\n                dp[i][w] = dp[i-1][w]\n    \n    return dp[n][W]"}', '[{"input": "50, [10, 20, 30], [60, 100, 120], 3", "hidden": false, "expected": "220"}, {"input": "10, [5, 4, 6], [10, 40, 30], 3", "hidden": false, "expected": "50"}, {"input": "15, [1, 3, 4, 5], [1, 4, 5, 7], 4", "hidden": true, "expected": "9"}]', 110, 4);
INSERT INTO public.puzzles VALUES (1964, 'Design Twitter', 'Design simplified version of Twitter', 'medium', 34, 240, 2, 'Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and see the 10 most recent tweets in the user''s news feed. Implement the Twitter class with postTweet(userId, tweetId), getNewsFeed(userId), follow(followerId, followeeId), and unfollow(followerId, followeeId) methods.', '[{"input": "[\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]\\n[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]", "output": "[null, null, [5], null, null, [6, 5], null, [5]]", "explanation": "Twitter twitter = new Twitter(); twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5). twitter.getNewsFeed(1); // User 1''s news feed should return a list with 1 tweet id -> [5]. Return [5]. twitter.follow(1, 2); // User 1 follows user 2. twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6). twitter.getNewsFeed(1); // User 1''s news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should come before tweet id 5 because it is posted after tweet id 5. twitter.unfollow(1, 2); // User 1 unfollows user 2. twitter.getNewsFeed(1); // User 1''s news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2."}]', '1 <= userId, followerId, followeeId <= 500', '["Use hash map for users", "Use merge k sorted lists for news feed"]', '{"c": "typedef struct {\n    // Your data structure here\n} Twitter;\n\nTwitter* twitterCreate() {\n    // Your code here\n    return NULL;\n}\n\nvoid twitterPostTweet(Twitter* obj, int userId, int tweetId) {\n    // Your code here\n}\n\nint* twitterGetNewsFeed(Twitter* obj, int userId, int* returnSize) {\n    // Your code here\n    return NULL;\n}\n\nvoid twitterFollow(Twitter* obj, int followerId, int followeeId) {\n    // Your code here\n}\n\nvoid twitterUnfollow(Twitter* obj, int followerId, int followeeId) {\n    // Your code here\n}\n\nvoid twitterFree(Twitter* obj) {\n    // Your code here\n}", "java": "class Twitter {\n\n    public Twitter() {\n        // Your code here\n    }\n    \n    public void postTweet(int userId, int tweetId) {\n        // Your code here\n    }\n    \n    public List<Integer> getNewsFeed(int userId) {\n        // Your code here\n        return new ArrayList<>();\n    }\n    \n    public void follow(int followerId, int followeeId) {\n        // Your code here\n    }\n    \n    public void unfollow(int followerId, int followeeId) {\n        // Your code here\n    }\n}", "python": "class Twitter:\n\n    def __init__(self):\n        # Your code here\n        pass\n\n    def postTweet(self, userId: int, tweetId: int) -> None:\n        # Your code here\n        pass\n\n    def getNewsFeed(self, userId: int) -> List[int]:\n        # Your code here\n        return []\n\n    def follow(self, followerId: int, followeeId: int) -> None:\n        # Your code here\n        pass\n\n    def unfollow(self, followerId: int, followeeId: int) -> None:\n        # Your code here\n        pass"}', '{"c": "// Simplified implementation\ntypedef struct Tweet {\n    int tweetId;\n    int timestamp;\n    struct Tweet* next;\n} Tweet;\n\ntypedef struct {\n    Tweet* tweets[501];\n    bool following[501][501];\n    int timestamp;\n} Twitter;\n\nTwitter* twitterCreate() {\n    Twitter* twitter = malloc(sizeof(Twitter));\n    for (int i = 0; i < 501; i++) {\n        twitter->tweets[i] = NULL;\n        for (int j = 0; j < 501; j++) {\n            twitter->following[i][j] = false;\n        }\n    }\n    twitter->timestamp = 0;\n    return twitter;\n}\n\nvoid twitterPostTweet(Twitter* obj, int userId, int tweetId) {\n    Tweet* newTweet = malloc(sizeof(Tweet));\n    newTweet->tweetId = tweetId;\n    newTweet->timestamp = obj->timestamp++;\n    newTweet->next = obj->tweets[userId];\n    obj->tweets[userId] = newTweet;\n}\n\nint* twitterGetNewsFeed(Twitter* obj, int userId, int* returnSize) {\n    int* result = malloc(10 * sizeof(int));\n    *returnSize = 0;\n    \n    // Simplified: just get user''s own tweets\n    Tweet* current = obj->tweets[userId];\n    while (current && *returnSize < 10) {\n        result[(*returnSize)++] = current->tweetId;\n        current = current->next;\n    }\n    \n    return result;\n}\n\nvoid twitterFollow(Twitter* obj, int followerId, int followeeId) {\n    if (followerId != followeeId) {\n        obj->following[followerId][followeeId] = true;\n    }\n}\n\nvoid twitterUnfollow(Twitter* obj, int followerId, int followeeId) {\n    obj->following[followerId][followeeId] = false;\n}\n\nvoid twitterFree(Twitter* obj) {\n    free(obj);\n}", "java": "class Twitter {\n    class Tweet {\n        int tweetId;\n        int timestamp;\n        Tweet next;\n        \n        Tweet(int tweetId, int timestamp) {\n            this.tweetId = tweetId;\n            this.timestamp = timestamp;\n        }\n    }\n    \n    private Map<Integer, Tweet> tweets;\n    private Map<Integer, Set<Integer>> following;\n    private int timestamp;\n\n    public Twitter() {\n        tweets = new HashMap<>();\n        following = new HashMap<>();\n        timestamp = 0;\n    }\n    \n    public void postTweet(int userId, int tweetId) {\n        Tweet newTweet = new Tweet(tweetId, timestamp++);\n        newTweet.next = tweets.get(userId);\n        tweets.put(userId, newTweet);\n    }\n    \n    public List<Integer> getNewsFeed(int userId) {\n        List<Integer> result = new ArrayList<>();\n        PriorityQueue<Tweet> pq = new PriorityQueue<>((a, b) -> b.timestamp - a.timestamp);\n        \n        // Add user''s own tweets\n        if (tweets.containsKey(userId)) {\n            pq.offer(tweets.get(userId));\n        }\n        \n        // Add followed users'' tweets\n        if (following.containsKey(userId)) {\n            for (int followeeId : following.get(userId)) {\n                if (tweets.containsKey(followeeId)) {\n                    pq.offer(tweets.get(followeeId));\n                }\n            }\n        }\n        \n        while (!pq.isEmpty() && result.size() < 10) {\n            Tweet tweet = pq.poll();\n            result.add(tweet.tweetId);\n            if (tweet.next != null) {\n                pq.offer(tweet.next);\n            }\n        }\n        \n        return result;\n    }\n    \n    public void follow(int followerId, int followeeId) {\n        if (followerId != followeeId) {\n            following.computeIfAbsent(followerId, k -> new HashSet<>()).add(followeeId);\n        }\n    }\n    \n    public void unfollow(int followerId, int followeeId) {\n        if (following.containsKey(followerId)) {\n            following.get(followerId).remove(followeeId);\n        }\n    }\n}", "python": "class Twitter:\n    def __init__(self):\n        from collections import defaultdict\n        import heapq\n        \n        self.tweets = defaultdict(list)\n        self.following = defaultdict(set)\n        self.timestamp = 0\n\n    def postTweet(self, userId: int, tweetId: int) -> None:\n        self.tweets[userId].append((self.timestamp, tweetId))\n        self.timestamp += 1\n\n    def getNewsFeed(self, userId: int):\n        import heapq\n        \n        # Get all relevant users (self + following)\n        relevant_users = [userId]\n        if userId in self.following:\n            relevant_users.extend(self.following[userId])\n        \n        # Collect all tweets from relevant users\n        all_tweets = []\n        for user in relevant_users:\n            all_tweets.extend(self.tweets[user])\n        \n        # Sort by timestamp (descending) and take top 10\n        all_tweets.sort(reverse=True)\n        return [tweetId for _, tweetId in all_tweets[:10]]\n\n    def follow(self, followerId: int, followeeId: int) -> None:\n        if followerId != followeeId:\n            self.following[followerId].add(followeeId)\n\n    def unfollow(self, followerId: int, followeeId: int) -> None:\n        self.following[followerId].discard(followeeId)"}', '[{"input": "postTweet(1, 5), getNewsFeed(1), follow(1, 2), postTweet(2, 6), getNewsFeed(1), unfollow(1, 2), getNewsFeed(1)", "hidden": false, "expected": "null, [5], null, null, [6, 5], null, [5]"}, {"input": "postTweet(1, 1), postTweet(2, 2), follow(1, 2), getNewsFeed(1)", "hidden": false, "expected": "null, null, null, [2, 1]"}, {"input": "postTweet(1, 4), postTweet(2, 5), unfollow(1, 2), getNewsFeed(1)", "hidden": true, "expected": "null, null, null, [4]"}]', 111, 4);
INSERT INTO public.puzzles VALUES (1966, 'Regular Expression Matching', 'Implement regular expression matching with ''.'' and ''*''', 'hard', 33, 300, 3, 'Given an input string s and a pattern p, implement regular expression matching with support for ''.'' and ''*'' where: ''.'' Matches any single character. ''*'' Matches zero or more of the preceding element. The matching should cover the entire input string (not partial).', '[{"input": "s = \"aa\", p = \"a\"", "output": "false", "explanation": "\"a\" does not match the entire string \"aa\"."}, {"input": "s = \"aa\", p = \"a*\"", "output": "true", "explanation": "\"*\" means zero or more of the preceding element, ''a''. Therefore, by repeating ''a'' once, it becomes \"aa\"."}, {"input": "s = \"ab\", p = \".*\"", "output": "true", "explanation": "\".*\" means \"zero or more (*) of any character (.)\"."}]', '1 <= s.length <= 20, 1 <= p.length <= 30', '["Use dynamic programming", "Handle ''.'' and ''*'' cases separately"]', '{"c": "bool isMatch(char* s, char* p) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean isMatch(String s, String p) {\n        // Your code here\n        return false;\n    }\n}", "python": "def is_match(s, p):\n    # Your code here\n    return False"}', '{"c": "bool isMatch(char* s, char* p) {\n    int m = strlen(s), n = strlen(p);\n    bool** dp = malloc((m + 1) * sizeof(bool*));\n    for (int i = 0; i <= m; i++) {\n        dp[i] = malloc((n + 1) * sizeof(bool));\n        for (int j = 0; j <= n; j++) {\n            dp[i][j] = false;\n        }\n    }\n    \n    dp[0][0] = true;\n    \n    // Handle patterns like a*, a*b*, a*b*c*\n    for (int j = 2; j <= n; j += 2) {\n        if (p[j-1] == ''*'') {\n            dp[0][j] = dp[0][j-2];\n        }\n    }\n    \n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (p[j-1] == ''*'') {\n                dp[i][j] = dp[i][j-2] || (dp[i-1][j] && (s[i-1] == p[j-2] || p[j-2] == ''.''));\n            } else {\n                dp[i][j] = dp[i-1][j-1] && (s[i-1] == p[j-1] || p[j-1] == ''.'');\n            }\n        }\n    }\n    \n    bool result = dp[m][n];\n    for (int i = 0; i <= m; i++) free(dp[i]);\n    free(dp);\n    return result;\n}", "java": "class Solution {\n    public boolean isMatch(String s, String p) {\n        int m = s.length(), n = p.length();\n        boolean[][] dp = new boolean[m + 1][n + 1];\n        \n        dp[0][0] = true;\n        \n        // Handle patterns like a*, a*b*, a*b*c*\n        for (int j = 2; j <= n; j += 2) {\n            if (p.charAt(j - 1) == ''*'') {\n                dp[0][j] = dp[0][j - 2];\n            }\n        }\n        \n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (p.charAt(j - 1) == ''*'') {\n                    dp[i][j] = dp[i][j - 2] || (dp[i - 1][j] && (s.charAt(i - 1) == p.charAt(j - 2) || p.charAt(j - 2) == ''.''));\n                } else {\n                    dp[i][j] = dp[i - 1][j - 1] && (s.charAt(i - 1) == p.charAt(j - 1) || p.charAt(j - 1) == ''.'');\n                }\n            }\n        }\n        \n        return dp[m][n];\n    }\n}", "python": "def is_match(s, p):\n    m, n = len(s), len(p)\n    dp = [[False] * (n + 1) for _ in range(m + 1)]\n    \n    dp[0][0] = True\n    \n    # Handle patterns like a*, a*b*, a*b*c*\n    for j in range(2, n + 1, 2):\n        if p[j - 1] == ''*'':\n            dp[0][j] = dp[0][j - 2]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if p[j - 1] == ''*'':\n                dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] and (s[i - 1] == p[j - 2] or p[j - 2] == ''.''))\n            else:\n                dp[i][j] = dp[i - 1][j - 1] and (s[i - 1] == p[j - 1] or p[j - 1] == ''.'')\n    \n    return dp[m][n]"}', '[{"input": "\"aa\", \"a\"", "hidden": false, "expected": "false"}, {"input": "\"aa\", \"a*\"", "hidden": false, "expected": "true"}, {"input": "\"ab\", \".*\"", "hidden": true, "expected": "true"}]', 113, 5);
INSERT INTO public.puzzles VALUES (1967, 'Design Hit Counter', 'Design hit counter for past 5 minutes', 'medium', 34, 210, 2, 'Design a hit counter which counts the number of hits received in the past 5 minutes (i.e., the past 300 seconds). Your system should accept a timestamp parameter (in seconds granularity), and you may assume that calls are being made to the system in chronological order (i.e., timestamp is monotonically increasing). Several hits may arrive roughly at the same time. Implement the HitCounter class with hit(timestamp) and getHits(timestamp) methods.', '[{"input": "[\"HitCounter\", \"hit\", \"hit\", \"hit\", \"getHits\", \"hit\", \"getHits\", \"getHits\"]\\n[[], [1], [2], [3], [4], [300], [300], [301]]", "output": "[null, null, null, null, 3, null, 4, 3]", "explanation": "HitCounter hitCounter = new HitCounter(); hitCounter.hit(1);       // hit at timestamp 1. hitCounter.hit(2);       // hit at timestamp 2. hitCounter.hit(3);       // hit at timestamp 3. hitCounter.getHits(4);   // get hits at timestamp 4, return 3. hitCounter.hit(300);     // hit at timestamp 300. hitCounter.getHits(300); // get hits at timestamp 300, return 4. hitCounter.getHits(301); // get hits at timestamp 301, return 3."}]', '1 <= timestamp <= 2 * 10^9', '["Use circular buffer", "Track timestamps and counts"]', '{"c": "typedef struct {\n    // Your data structure here\n} HitCounter;\n\nHitCounter* hitCounterCreate() {\n    // Your code here\n    return NULL;\n}\n\nvoid hitCounterHit(HitCounter* obj, int timestamp) {\n    // Your code here\n}\n\nint hitCounterGetHits(HitCounter* obj, int timestamp) {\n    // Your code here\n    return 0;\n}\n\nvoid hitCounterFree(HitCounter* obj) {\n    // Your code here\n}", "java": "class HitCounter {\n\n    public HitCounter() {\n        // Your code here\n    }\n    \n    public void hit(int timestamp) {\n        // Your code here\n    }\n    \n    public int getHits(int timestamp) {\n        // Your code here\n        return 0;\n    }\n}", "python": "class HitCounter:\n\n    def __init__(self):\n        # Your code here\n        pass\n\n    def hit(self, timestamp: int) -> None:\n        # Your code here\n        pass\n\n    def getHits(self, timestamp: int) -> int:\n        # Your code here\n        return 0"}', '{"c": "typedef struct {\n    int times[300];\n    int hits[300];\n} HitCounter;\n\nHitCounter* hitCounterCreate() {\n    HitCounter* counter = malloc(sizeof(HitCounter));\n    for (int i = 0; i < 300; i++) {\n        counter->times[i] = 0;\n        counter->hits[i] = 0;\n    }\n    return counter;\n}\n\nvoid hitCounterHit(HitCounter* obj, int timestamp) {\n    int index = timestamp % 300;\n    if (obj->times[index] != timestamp) {\n        obj->times[index] = timestamp;\n        obj->hits[index] = 1;\n    } else {\n        obj->hits[index]++;\n    }\n}\n\nint hitCounterGetHits(HitCounter* obj, int timestamp) {\n    int total = 0;\n    for (int i = 0; i < 300; i++) {\n        if (timestamp - obj->times[i] < 300) {\n            total += obj->hits[i];\n        }\n    }\n    return total;\n}\n\nvoid hitCounterFree(HitCounter* obj) {\n    free(obj);\n}", "java": "class HitCounter {\n    private int[] times;\n    private int[] hits;\n\n    public HitCounter() {\n        times = new int[300];\n        hits = new int[300];\n    }\n    \n    public void hit(int timestamp) {\n        int index = timestamp % 300;\n        if (times[index] != timestamp) {\n            times[index] = timestamp;\n            hits[index] = 1;\n        } else {\n            hits[index]++;\n        }\n    }\n    \n    public int getHits(int timestamp) {\n        int total = 0;\n        for (int i = 0; i < 300; i++) {\n            if (timestamp - times[i] < 300) {\n                total += hits[i];\n            }\n        }\n        return total;\n    }\n}", "python": "class HitCounter:\n    def __init__(self):\n        self.times = [0] * 300\n        self.hits = [0] * 300\n\n    def hit(self, timestamp: int) -> None:\n        index = timestamp % 300\n        if self.times[index] != timestamp:\n            self.times[index] = timestamp\n            self.hits[index] = 1\n        else:\n            self.hits[index] += 1\n\n    def getHits(self, timestamp: int) -> int:\n        total = 0\n        for i in range(300):\n            if timestamp - self.times[i] < 300:\n                total += self.hits[i]\n        return total"}', '[{"input": "hit(1), hit(2), hit(3), getHits(4), hit(300), getHits(300), getHits(301)", "hidden": false, "expected": "null, null, null, 3, null, 4, 3"}, {"input": "hit(1), getHits(1), getHits(301)", "hidden": false, "expected": "null, 1, 0"}, {"input": "hit(100), hit(200), hit(300), getHits(300)", "hidden": true, "expected": "null, null, null, 3"}]', 114, 4);
INSERT INTO public.puzzles VALUES (1968, 'Maximal Rectangle', 'Find largest rectangle in binary matrix', 'hard', 33, 320, 3, 'Given a rows x cols binary matrix filled with 0''s and 1''s, find the largest rectangle containing only 1''s and return its area.', '[{"input": "[[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]", "output": "6", "explanation": "The maximal rectangle is shown in the above picture."}, {"input": "[]", "output": "0", "explanation": ""}, {"input": "[[\"0\"]]", "output": "0", "explanation": ""}, {"input": "[[\"1\"]]", "output": "1", "explanation": ""}]', 'rows == matrix.length, cols == matrix[i].length', '["Use largest rectangle in histogram", "Convert to histogram for each row"]', '{"c": "int maximalRectangle(char** matrix, int matrixSize, int* matrixColSize) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int maximalRectangle(char[][] matrix) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def maximal_rectangle(matrix):\n    # Your code here\n    return 0"}', '{"c": "int largestRectangleArea(int* heights, int heightsSize) {\n    int* stack = malloc(heightsSize * sizeof(int));\n    int top = -1;\n    int maxArea = 0;\n    \n    for (int i = 0; i <= heightsSize; i++) {\n        int h = (i == heightsSize) ? 0 : heights[i];\n        \n        while (top >= 0 && heights[stack[top]] > h) {\n            int height = heights[stack[top--]];\n            int width = (top >= 0) ? i - stack[top] - 1 : i;\n            int area = height * width;\n            maxArea = maxArea > area ? maxArea : area;\n        }\n        \n        stack[++top] = i;\n    }\n    \n    free(stack);\n    return maxArea;\n}\n\nint maximalRectangle(char** matrix, int matrixSize, int* matrixColSize) {\n    if (matrixSize == 0 || matrixColSize[0] == 0) return 0;\n    \n    int cols = matrixColSize[0];\n    int* heights = calloc(cols, sizeof(int));\n    int maxArea = 0;\n    \n    for (int i = 0; i < matrixSize; i++) {\n        for (int j = 0; j < cols; j++) {\n            heights[j] = (matrix[i][j] == ''1'') ? heights[j] + 1 : 0;\n        }\n        \n        int area = largestRectangleArea(heights, cols);\n        maxArea = maxArea > area ? maxArea : area;\n    }\n    \n    free(heights);\n    return maxArea;\n}", "java": "class Solution {\n    public int maximalRectangle(char[][] matrix) {\n        if (matrix.length == 0 || matrix[0].length == 0) return 0;\n        \n        int rows = matrix.length, cols = matrix[0].length;\n        int[] heights = new int[cols];\n        int maxArea = 0;\n        \n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                heights[j] = (matrix[i][j] == ''1'') ? heights[j] + 1 : 0;\n            }\n            maxArea = Math.max(maxArea, largestRectangleArea(heights));\n        }\n        \n        return maxArea;\n    }\n    \n    private int largestRectangleArea(int[] heights) {\n        Stack<Integer> stack = new Stack<>();\n        int maxArea = 0;\n        \n        for (int i = 0; i <= heights.length; i++) {\n            int h = (i == heights.length) ? 0 : heights[i];\n            \n            while (!stack.isEmpty() && heights[stack.peek()] > h) {\n                int height = heights[stack.pop()];\n                int width = stack.isEmpty() ? i : i - stack.peek() - 1;\n                maxArea = Math.max(maxArea, height * width);\n            }\n            \n            stack.push(i);\n        }\n        \n        return maxArea;\n    }\n}", "python": "def maximal_rectangle(matrix):\n    if not matrix or not matrix[0]:\n        return 0\n    \n    rows, cols = len(matrix), len(matrix[0])\n    heights = [0] * cols\n    max_area = 0\n    \n    def largest_rectangle_area(heights):\n        stack = []\n        max_area = 0\n        \n        for i in range(len(heights) + 1):\n            h = 0 if i == len(heights) else heights[i]\n            \n            while stack and heights[stack[-1]] > h:\n                height = heights[stack.pop()]\n                width = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, height * width)\n            \n            stack.append(i)\n        \n        return max_area\n    \n    for i in range(rows):\n        for j in range(cols):\n            heights[j] = heights[j] + 1 if matrix[i][j] == ''1'' else 0\n        \n        max_area = max(max_area, largest_rectangle_area(heights))\n    \n    return max_area"}', '[{"input": "[[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]", "hidden": false, "expected": "6"}, {"input": "[]", "hidden": false, "expected": "0"}, {"input": "[[\"1\"]]", "hidden": true, "expected": "1"}]', 115, 5);
INSERT INTO public.puzzles VALUES (1969, 'Word Break', 'Determine if string can be segmented using dictionary', 'medium', 33, 200, 2, 'Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words. Note that the same word in the dictionary may be reused multiple times in the segmentation.', '[{"input": "s = \"leetcode\", wordDict = [\"leet\",\"code\"]", "output": "true", "explanation": "Return true because \"leetcode\" can be segmented as \"leet code\"."}, {"input": "s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]", "output": "true", "explanation": "Return true because \"applepenapple\" can be segmented as \"apple pen apple\". Note that you are allowed to reuse a dictionary word."}, {"input": "s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]", "output": "false", "explanation": ""}]', '1 <= s.length <= 300', '["Use dynamic programming", "dp[i] = true if s[0:i] can be segmented"]', '{"c": "bool wordBreak(char* s, char** wordDict, int wordDictSize) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean wordBreak(String s, List<String> wordDict) {\n        // Your code here\n        return false;\n    }\n}", "python": "def word_break(s, word_dict):\n    # Your code here\n    return False"}', '{"c": "bool wordBreak(char* s, char** wordDict, int wordDictSize) {\n    int n = strlen(s);\n    bool* dp = malloc((n + 1) * sizeof(bool));\n    for (int i = 0; i <= n; i++) dp[i] = false;\n    dp[0] = true;\n    \n    for (int i = 1; i <= n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (dp[j]) {\n                for (int k = 0; k < wordDictSize; k++) {\n                    int wordLen = strlen(wordDict[k]);\n                    if (wordLen == i - j && strncmp(s + j, wordDict[k], wordLen) == 0) {\n                        dp[i] = true;\n                        break;\n                    }\n                }\n                if (dp[i]) break;\n            }\n        }\n    }\n    \n    bool result = dp[n];\n    free(dp);\n    return result;\n}", "java": "class Solution {\n    public boolean wordBreak(String s, List<String> wordDict) {\n        Set<String> wordSet = new HashSet<>(wordDict);\n        boolean[] dp = new boolean[s.length() + 1];\n        dp[0] = true;\n        \n        for (int i = 1; i <= s.length(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (dp[j] && wordSet.contains(s.substring(j, i))) {\n                    dp[i] = true;\n                    break;\n                }\n            }\n        }\n        \n        return dp[s.length()];\n    }\n}", "python": "def word_break(s, word_dict):\n    word_set = set(word_dict)\n    dp = [False] * (len(s) + 1)\n    dp[0] = True\n    \n    for i in range(1, len(s) + 1):\n        for j in range(i):\n            if dp[j] and s[j:i] in word_set:\n                dp[i] = True\n                break\n    \n    return dp[len(s)]"}', '[{"input": "\"leetcode\", [\"leet\",\"code\"]", "hidden": false, "expected": "true"}, {"input": "\"applepenapple\", [\"apple\",\"pen\"]", "hidden": false, "expected": "true"}, {"input": "\"catsandog\", [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]", "hidden": true, "expected": "false"}]', 116, 3);
INSERT INTO public.puzzles VALUES (1970, 'Add and Search Words', 'Data structure supporting add and search with wildcards', 'medium', 34, 220, 2, 'Design a data structure that supports adding new words and finding if a string matches any previously added string. Implement the WordDictionary class with addWord(word) to add word to the data structure and search(word) to return true if there is any string in the data structure that matches word or false otherwise. word may contain dots ''.'' where dots can be matched with any letter.', '[{"input": "[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]", "output": "[null,null,null,null,false,true,true,true]", "explanation": "WordDictionary wordDictionary = new WordDictionary(); wordDictionary.addWord(\"bad\"); wordDictionary.addWord(\"dad\"); wordDictionary.addWord(\"mad\"); wordDictionary.search(\"pad\"); // return False wordDictionary.search(\"bad\"); // return True wordDictionary.search(\".ad\"); // return True wordDictionary.search(\"b..\"); // return True"}]', '1 <= word.length <= 25', '["Use trie data structure", "DFS for wildcard search"]', '{"c": "typedef struct {\n    // Your data structure here\n} WordDictionary;\n\nWordDictionary* wordDictionaryCreate() {\n    // Your code here\n    return NULL;\n}\n\nvoid wordDictionaryAddWord(WordDictionary* obj, char* word) {\n    // Your code here\n}\n\nbool wordDictionarySearch(WordDictionary* obj, char* word) {\n    // Your code here\n    return false;\n}\n\nvoid wordDictionaryFree(WordDictionary* obj) {\n    // Your code here\n}", "java": "class WordDictionary {\n\n    public WordDictionary() {\n        // Your code here\n    }\n    \n    public void addWord(String word) {\n        // Your code here\n    }\n    \n    public boolean search(String word) {\n        // Your code here\n        return false;\n    }\n}", "python": "class WordDictionary:\n\n    def __init__(self):\n        # Your code here\n        pass\n\n    def addWord(self, word: str) -> None:\n        # Your code here\n        pass\n\n    def search(self, word: str) -> bool:\n        # Your code here\n        return False"}', '{"c": "typedef struct TrieNode {\n    struct TrieNode* children[26];\n    bool isWord;\n} TrieNode;\n\ntypedef struct {\n    TrieNode* root;\n} WordDictionary;\n\nTrieNode* createNode() {\n    TrieNode* node = malloc(sizeof(TrieNode));\n    for (int i = 0; i < 26; i++) {\n        node->children[i] = NULL;\n    }\n    node->isWord = false;\n    return node;\n}\n\nbool searchHelper(TrieNode* node, char* word, int index) {\n    if (word[index] == ''\\0'') {\n        return node->isWord;\n    }\n    \n    if (word[index] == ''.'') {\n        for (int i = 0; i < 26; i++) {\n            if (node->children[i] && searchHelper(node->children[i], word, index + 1)) {\n                return true;\n            }\n        }\n        return false;\n    } else {\n        int charIndex = word[index] - ''a'';\n        if (node->children[charIndex]) {\n            return searchHelper(node->children[charIndex], word, index + 1);\n        }\n        return false;\n    }\n}\n\nWordDictionary* wordDictionaryCreate() {\n    WordDictionary* dict = malloc(sizeof(WordDictionary));\n    dict->root = createNode();\n    return dict;\n}\n\nvoid wordDictionaryAddWord(WordDictionary* obj, char* word) {\n    TrieNode* current = obj->root;\n    for (int i = 0; word[i]; i++) {\n        int index = word[i] - ''a'';\n        if (!current->children[index]) {\n            current->children[index] = createNode();\n        }\n        current = current->children[index];\n    }\n    current->isWord = true;\n}\n\nbool wordDictionarySearch(WordDictionary* obj, char* word) {\n    return searchHelper(obj->root, word, 0);\n}\n\nvoid wordDictionaryFree(WordDictionary* obj) {\n    free(obj);\n}", "java": "class WordDictionary {\n    class TrieNode {\n        TrieNode[] children = new TrieNode[26];\n        boolean isWord = false;\n    }\n    \n    private TrieNode root;\n\n    public WordDictionary() {\n        root = new TrieNode();\n    }\n    \n    public void addWord(String word) {\n        TrieNode current = root;\n        for (char c : word.toCharArray()) {\n            int index = c - ''a'';\n            if (current.children[index] == null) {\n                current.children[index] = new TrieNode();\n            }\n            current = current.children[index];\n        }\n        current.isWord = true;\n    }\n    \n    public boolean search(String word) {\n        return searchHelper(root, word, 0);\n    }\n    \n    private boolean searchHelper(TrieNode node, String word, int index) {\n        if (index == word.length()) {\n            return node.isWord;\n        }\n        \n        char c = word.charAt(index);\n        if (c == ''.'') {\n            for (TrieNode child : node.children) {\n                if (child != null && searchHelper(child, word, index + 1)) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            int charIndex = c - ''a'';\n            if (node.children[charIndex] != null) {\n                return searchHelper(node.children[charIndex], word, index + 1);\n            }\n            return false;\n        }\n    }\n}", "python": "class WordDictionary:\n    class TrieNode:\n        def __init__(self):\n            self.children = {}\n            self.is_word = False\n\n    def __init__(self):\n        self.root = self.TrieNode()\n\n    def addWord(self, word: str) -> None:\n        current = self.root\n        for char in word:\n            if char not in current.children:\n                current.children[char] = self.TrieNode()\n            current = current.children[char]\n        current.is_word = True\n\n    def search(self, word: str) -> bool:\n        def search_helper(node, index):\n            if index == len(word):\n                return node.is_word\n            \n            char = word[index]\n            if char == ''.'':\n                for child in node.children.values():\n                    if search_helper(child, index + 1):\n                        return True\n                return False\n            else:\n                if char in node.children:\n                    return search_helper(node.children[char], index + 1)\n                return False\n        \n        return search_helper(self.root, 0)"}', '[{"input": "addWord(\"bad\"), addWord(\"dad\"), addWord(\"mad\"), search(\"pad\"), search(\"bad\"), search(\".ad\"), search(\"b..\")", "hidden": false, "expected": "null, null, null, false, true, true, true"}, {"input": "addWord(\"at\"), addWord(\"and\"), search(\"a\"), search(\".at\")", "hidden": false, "expected": "null, null, false, false"}, {"input": "addWord(\"word\"), search(\"....\"), search(\"w..d\")", "hidden": true, "expected": "null, true, true"}]', 117, 4);
INSERT INTO public.puzzles VALUES (1972, 'Decode Ways', 'Number of ways to decode numeric string', 'medium', 33, 190, 2, 'A message containing letters from A-Z can be encoded into numbers using the following mapping: ''A'' -> "1", ''B'' -> "2", ..., ''Z'' -> "26". To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). Given a string s containing only digits, return the number of ways to decode it.', '[{"input": "\"12\"", "output": "2", "explanation": "\"12\" could be decoded as \"AB\" (1 2) or \"L\" (12)."}, {"input": "\"226\"", "output": "3", "explanation": "\"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6)."}, {"input": "\"0\"", "output": "0", "explanation": "There is no character that is mapped to a number starting with 0."}]', '1 <= s.length <= 100', '["Use dynamic programming", "Check valid single and double digit combinations"]', '{"c": "int numDecodings(char* s) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int numDecodings(String s) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def num_decodings(s):\n    # Your code here\n    return 0"}', '{"c": "int numDecodings(char* s) {\n    int n = strlen(s);\n    if (n == 0 || s[0] == ''0'') return 0;\n    \n    int* dp = malloc((n + 1) * sizeof(int));\n    dp[0] = 1;\n    dp[1] = 1;\n    \n    for (int i = 2; i <= n; i++) {\n        dp[i] = 0;\n        \n        // Single digit\n        if (s[i-1] != ''0'') {\n            dp[i] += dp[i-1];\n        }\n        \n        // Two digits\n        int twoDigit = (s[i-2] - ''0'') * 10 + (s[i-1] - ''0'');\n        if (twoDigit >= 10 && twoDigit <= 26) {\n            dp[i] += dp[i-2];\n        }\n    }\n    \n    int result = dp[n];\n    free(dp);\n    return result;\n}", "java": "class Solution {\n    public int numDecodings(String s) {\n        if (s == null || s.length() == 0 || s.charAt(0) == ''0'') {\n            return 0;\n        }\n        \n        int n = s.length();\n        int[] dp = new int[n + 1];\n        dp[0] = 1;\n        dp[1] = 1;\n        \n        for (int i = 2; i <= n; i++) {\n            // Single digit\n            if (s.charAt(i - 1) != ''0'') {\n                dp[i] += dp[i - 1];\n            }\n            \n            // Two digits\n            int twoDigit = Integer.parseInt(s.substring(i - 2, i));\n            if (twoDigit >= 10 && twoDigit <= 26) {\n                dp[i] += dp[i - 2];\n            }\n        }\n        \n        return dp[n];\n    }\n}", "python": "def num_decodings(s):\n    if not s or s[0] == ''0'':\n        return 0\n    \n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    \n    for i in range(2, n + 1):\n        # Single digit\n        if s[i-1] != ''0'':\n            dp[i] += dp[i-1]\n        \n        # Two digits\n        two_digit = int(s[i-2:i])\n        if 10 <= two_digit <= 26:\n            dp[i] += dp[i-2]\n    \n    return dp[n]"}', '[{"input": "\"12\"", "hidden": false, "expected": "2"}, {"input": "\"226\"", "hidden": false, "expected": "3"}, {"input": "\"0\"", "hidden": true, "expected": "0"}]', 119, 3);
INSERT INTO public.puzzles VALUES (1976, 'Path Sum II', 'Find all root-to-leaf paths with target sum', 'medium', 34, 190, 2, 'Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references. A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.', '[{"input": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22", "output": "[[5,4,11,2],[5,8,4,5]]", "explanation": "There are two paths whose sum equals targetSum: 5 + 4 + 11 + 2 = 22 and 5 + 8 + 4 + 5 = 22."}, {"input": "root = [1,2,3], targetSum = 5", "output": "[]", "explanation": "There two root-to-leaf paths in the tree: (1 --> 2): The sum is 3. (1 --> 3): The sum is 4. There is no root-to-leaf path with sum = 5."}, {"input": "root = [1,2], targetSum = 0", "output": "[]", "explanation": ""}]', 'The number of nodes in the tree is in the range [0, 5000]', '["Use DFS with backtracking", "Track current path and sum"]', '{"c": "struct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n};\n\nint** pathSum(struct TreeNode* root, int targetSum, int* returnSize, int** returnColumnSizes) {\n    // Your code here\n    return NULL;\n}", "java": "public class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\nclass Solution {\n    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef path_sum(root, target_sum):\n    # Your code here\n    return []"}', '{"c": "// Simplified implementation\nint** pathSum(struct TreeNode* root, int targetSum, int* returnSize, int** returnColumnSizes) {\n    *returnSize = 0;\n    if (!root) return NULL;\n    \n    // This is a simplified implementation\n    // Full implementation would require dynamic allocation and DFS\n    int** result = malloc(1000 * sizeof(int*));\n    *returnColumnSizes = malloc(1000 * sizeof(int));\n    \n    return result;\n}", "java": "class Solution {\n    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (root == null) return result;\n        \n        dfs(root, targetSum, new ArrayList<>(), result);\n        return result;\n    }\n    \n    private void dfs(TreeNode node, int remainingSum, List<Integer> currentPath, List<List<Integer>> result) {\n        if (node == null) return;\n        \n        currentPath.add(node.val);\n        \n        if (node.left == null && node.right == null && remainingSum == node.val) {\n            result.add(new ArrayList<>(currentPath));\n        } else {\n            dfs(node.left, remainingSum - node.val, currentPath, result);\n            dfs(node.right, remainingSum - node.val, currentPath, result);\n        }\n        \n        currentPath.remove(currentPath.size() - 1);\n    }\n}", "python": "def path_sum(root, target_sum):\n    def dfs(node, remaining_sum, current_path):\n        if not node:\n            return\n        \n        current_path.append(node.val)\n        \n        if not node.left and not node.right and remaining_sum == node.val:\n            result.append(current_path[:])\n        else:\n            dfs(node.left, remaining_sum - node.val, current_path)\n            dfs(node.right, remaining_sum - node.val, current_path)\n        \n        current_path.pop()\n    \n    result = []\n    dfs(root, target_sum, [])\n    return result"}', '[{"input": "root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22", "hidden": false, "expected": "[[5,4,11,2],[5,8,4,5]]"}, {"input": "root = [1,2,3], targetSum = 5", "hidden": false, "expected": "[]"}, {"input": "root = [1,2], targetSum = 0", "hidden": true, "expected": "[]"}]', 123, 3);
INSERT INTO public.puzzles VALUES (1980, 'Construct Binary Tree from Preorder and Inorder', 'Build binary tree from preorder and inorder traversals', 'medium', 34, 220, 2, 'Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.', '[{"input": "preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]", "output": "[3,9,20,null,null,15,7]", "explanation": ""}, {"input": "preorder = [-1], inorder = [-1]", "output": "[-1]", "explanation": ""}]', '1 <= preorder.length <= 3000', '["First element in preorder is root", "Find root position in inorder to split subtrees"]', '{"c": "struct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n};\n\nstruct TreeNode* buildTree(int* preorder, int preorderSize, int* inorder, int inorderSize) {\n    // Your code here\n    return NULL;\n}", "java": "public class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        // Your code here\n        return null;\n    }\n}", "python": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef build_tree(preorder, inorder):\n    # Your code here\n    return None"}', '{"c": "struct TreeNode* buildTreeHelper(int* preorder, int* preStart, int* inorder, int inStart, int inEnd) {\n    if (inStart > inEnd) return NULL;\n    \n    struct TreeNode* root = malloc(sizeof(struct TreeNode));\n    root->val = preorder[*preStart];\n    (*preStart)++;\n    \n    if (inStart == inEnd) {\n        root->left = root->right = NULL;\n        return root;\n    }\n    \n    int inIndex = -1;\n    for (int i = inStart; i <= inEnd; i++) {\n        if (inorder[i] == root->val) {\n            inIndex = i;\n            break;\n        }\n    }\n    \n    root->left = buildTreeHelper(preorder, preStart, inorder, inStart, inIndex - 1);\n    root->right = buildTreeHelper(preorder, preStart, inorder, inIndex + 1, inEnd);\n    \n    return root;\n}\n\nstruct TreeNode* buildTree(int* preorder, int preorderSize, int* inorder, int inorderSize) {\n    int preStart = 0;\n    return buildTreeHelper(preorder, &preStart, inorder, 0, inorderSize - 1);\n}", "java": "class Solution {\n    private int preorderIndex = 0;\n    private Map<Integer, Integer> inorderMap = new HashMap<>();\n    \n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        for (int i = 0; i < inorder.length; i++) {\n            inorderMap.put(inorder[i], i);\n        }\n        \n        return buildTreeHelper(preorder, 0, inorder.length - 1);\n    }\n    \n    private TreeNode buildTreeHelper(int[] preorder, int inStart, int inEnd) {\n        if (inStart > inEnd) return null;\n        \n        int rootVal = preorder[preorderIndex++];\n        TreeNode root = new TreeNode(rootVal);\n        \n        int inIndex = inorderMap.get(rootVal);\n        \n        root.left = buildTreeHelper(preorder, inStart, inIndex - 1);\n        root.right = buildTreeHelper(preorder, inIndex + 1, inEnd);\n        \n        return root;\n    }\n}", "python": "def build_tree(preorder, inorder):\n    if not preorder or not inorder:\n        return None\n    \n    root = TreeNode(preorder[0])\n    mid = inorder.index(preorder[0])\n    \n    root.left = build_tree(preorder[1:mid+1], inorder[:mid])\n    root.right = build_tree(preorder[mid+1:], inorder[mid+1:])\n    \n    return root"}', '[{"input": "[3,9,20,15,7], [9,3,15,20,7]", "hidden": false, "expected": "[3,9,20,null,null,15,7]"}, {"input": "[-1], [-1]", "hidden": false, "expected": "[-1]"}, {"input": "[1,2], [2,1]", "hidden": true, "expected": "[1,2]"}]', 127, 4);
INSERT INTO public.puzzles VALUES (1981, 'Merge Intervals', 'Merge overlapping intervals', 'medium', 33, 190, 2, 'Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.', '[{"input": "[[1,3],[2,6],[8,10],[15,18]]", "output": "[[1,6],[8,10],[15,18]]", "explanation": "Since intervals [1,3] and [2,6] overlaps, merge them into [1,6]."}, {"input": "[[1,4],[4,5]]", "output": "[[1,5]]", "explanation": "Intervals [1,4] and [4,5] are considered overlapping."}]', '1 <= intervals.length <= 10^4', '["Sort intervals by start time", "Merge overlapping ones"]', '{"c": "int** merge(int** intervals, int intervalsSize, int* intervalsColSize, int* returnSize, int** returnColumnSizes) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public int[][] merge(int[][] intervals) {\n        // Your code here\n        return new int[0][];\n    }\n}", "python": "def merge(intervals):\n    # Your code here\n    return []"}', '{"c": "int compare(const void* a, const void* b) {\n    int* intervalA = *(int**)a;\n    int* intervalB = *(int**)b;\n    return intervalA[0] - intervalB[0];\n}\n\nint** merge(int** intervals, int intervalsSize, int* intervalsColSize, int* returnSize, int** returnColumnSizes) {\n    if (intervalsSize == 0) {\n        *returnSize = 0;\n        return NULL;\n    }\n    \n    qsort(intervals, intervalsSize, sizeof(int*), compare);\n    \n    int** result = malloc(intervalsSize * sizeof(int*));\n    *returnColumnSizes = malloc(intervalsSize * sizeof(int));\n    *returnSize = 0;\n    \n    result[0] = malloc(2 * sizeof(int));\n    result[0][0] = intervals[0][0];\n    result[0][1] = intervals[0][1];\n    (*returnColumnSizes)[0] = 2;\n    *returnSize = 1;\n    \n    for (int i = 1; i < intervalsSize; i++) {\n        if (intervals[i][0] <= result[*returnSize - 1][1]) {\n            result[*returnSize - 1][1] = result[*returnSize - 1][1] > intervals[i][1] ? result[*returnSize - 1][1] : intervals[i][1];\n        } else {\n            result[*returnSize] = malloc(2 * sizeof(int));\n            result[*returnSize][0] = intervals[i][0];\n            result[*returnSize][1] = intervals[i][1];\n            (*returnColumnSizes)[*returnSize] = 2;\n            (*returnSize)++;\n        }\n    }\n    \n    return result;\n}", "java": "class Solution {\n    public int[][] merge(int[][] intervals) {\n        if (intervals.length == 0) return new int[0][];\n        \n        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);\n        \n        List<int[]> result = new ArrayList<>();\n        result.add(intervals[0]);\n        \n        for (int i = 1; i < intervals.length; i++) {\n            int[] current = intervals[i];\n            int[] last = result.get(result.size() - 1);\n            \n            if (current[0] <= last[1]) {\n                last[1] = Math.max(last[1], current[1]);\n            } else {\n                result.add(current);\n            }\n        }\n        \n        return result.toArray(new int[result.size()][]);\n    }\n}", "python": "def merge(intervals):\n    if not intervals:\n        return []\n    \n    intervals.sort(key=lambda x: x[0])\n    \n    result = [intervals[0]]\n    \n    for current in intervals[1:]:\n        last = result[-1]\n        \n        if current[0] <= last[1]:\n            last[1] = max(last[1], current[1])\n        else:\n            result.append(current)\n    \n    return result"}', '[{"input": "[[1,3],[2,6],[8,10],[15,18]]", "hidden": false, "expected": "[[1,6],[8,10],[15,18]]"}, {"input": "[[1,4],[4,5]]", "hidden": false, "expected": "[[1,5]]"}, {"input": "[[1,4],[2,3]]", "hidden": true, "expected": "[[1,4]]"}]', 128, 3);
INSERT INTO public.puzzles VALUES (1982, 'Clone Graph', 'Clone undirected graph with DFS', 'medium', 34, 210, 2, 'Given a reference of a node in a connected undirected graph. Return a deep copy (clone) of the graph. Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.', '[{"input": "adjList = [[2,4],[1,3],[2,4],[1,3]]", "output": "[[2,4],[1,3],[2,4],[1,3]]", "explanation": "There are 4 nodes in the graph. 1st node (val = 1)''s neighbors are 2nd node (val = 2) and 4th node (val = 4). 2nd node (val = 2)''s neighbors are 1st node (val = 1) and 3rd node (val = 3). 3rd node (val = 3)''s neighbors are 2nd node (val = 2) and 4th node (val = 4). 4th node (val = 4)''s neighbors are 1st node (val = 1) and 3rd node (val = 3)."}]', 'The number of nodes in the graph is in the range [0, 100]', '["Use DFS with hash map", "Track visited nodes to avoid cycles"]', '{"c": "struct Node {\n    int val;\n    int numNeighbors;\n    struct Node** neighbors;\n};\n\nstruct Node* cloneGraph(struct Node* s) {\n    // Your code here\n    return NULL;\n}", "java": "class Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n\nclass Solution {\n    public Node cloneGraph(Node node) {\n        // Your code here\n        return null;\n    }\n}", "python": "class Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\ndef clone_graph(node):\n    # Your code here\n    return None"}', '{"c": "// Simplified implementation\nstruct Node* cloneGraph(struct Node* s) {\n    if (!s) return NULL;\n    \n    // This would require complex hash map implementation in C\n    // For demonstration, return a basic clone\n    struct Node* clone = malloc(sizeof(struct Node));\n    clone->val = s->val;\n    clone->numNeighbors = 0;\n    clone->neighbors = NULL;\n    \n    return clone;\n}", "java": "class Solution {\n    private Map<Node, Node> visited = new HashMap<>();\n    \n    public Node cloneGraph(Node node) {\n        if (node == null) return null;\n        \n        if (visited.containsKey(node)) {\n            return visited.get(node);\n        }\n        \n        Node cloneNode = new Node(node.val);\n        visited.put(node, cloneNode);\n        \n        for (Node neighbor : node.neighbors) {\n            cloneNode.neighbors.add(cloneGraph(neighbor));\n        }\n        \n        return cloneNode;\n    }\n}", "python": "def clone_graph(node):\n    if not node:\n        return None\n    \n    visited = {}\n    \n    def dfs(node):\n        if node in visited:\n            return visited[node]\n        \n        clone = Node(node.val)\n        visited[node] = clone\n        \n        for neighbor in node.neighbors:\n            clone.neighbors.append(dfs(neighbor))\n        \n        return clone\n    \n    return dfs(node)"}', '[{"input": "adjList = [[2,4],[1,3],[2,4],[1,3]]", "hidden": false, "expected": "[[2,4],[1,3],[2,4],[1,3]]"}, {"input": "adjList = [[]]", "hidden": false, "expected": "[[]]"}, {"input": "adjList = []", "hidden": true, "expected": "[]"}]', 129, 4);
INSERT INTO public.puzzles VALUES (1983, 'Group Anagrams', 'Group strings that are anagrams', 'medium', 33, 180, 2, 'Given an array of strings strs, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.', '[{"input": "[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]", "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]", "explanation": ""}, {"input": "[\"\"]", "output": "[[\"\"]]", "explanation": ""}, {"input": "[\"a\"]", "output": "[[\"a\"]]", "explanation": ""}]', '1 <= strs.length <= 10^4', '["Sort characters in each string", "Use sorted string as key"]', '{"c": "char*** groupAnagrams(char** strs, int strsSize, int* returnSize, int** returnColumnSizes) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "def group_anagrams(strs):\n    # Your code here\n    return []"}', '{"c": "// Simplified implementation for C\nchar*** groupAnagrams(char** strs, int strsSize, int* returnSize, int** returnColumnSizes) {\n    // Complex implementation required for full functionality\n    *returnSize = 1;\n    char*** result = malloc(sizeof(char**));\n    result[0] = malloc(strsSize * sizeof(char*));\n    *returnColumnSizes = malloc(sizeof(int));\n    (*returnColumnSizes)[0] = strsSize;\n    \n    for (int i = 0; i < strsSize; i++) {\n        result[0][i] = strs[i];\n    }\n    \n    return result;\n}", "java": "class Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        Map<String, List<String>> map = new HashMap<>();\n        \n        for (String str : strs) {\n            char[] chars = str.toCharArray();\n            Arrays.sort(chars);\n            String key = String.valueOf(chars);\n            \n            map.computeIfAbsent(key, k -> new ArrayList<>()).add(str);\n        }\n        \n        return new ArrayList<>(map.values());\n    }\n}", "python": "def group_anagrams(strs):\n    from collections import defaultdict\n    \n    anagram_map = defaultdict(list)\n    \n    for s in strs:\n        key = ''''.join(sorted(s))\n        anagram_map[key].append(s)\n    \n    return list(anagram_map.values())"}', '[{"input": "[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]", "hidden": false, "expected": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]"}, {"input": "[\"\"]", "hidden": false, "expected": "[[\"\"]]"}, {"input": "[\"a\"]", "hidden": true, "expected": "[[\"a\"]]"}]', 130, 3);
INSERT INTO public.puzzles VALUES (1986, 'Validate Binary Search Tree', 'Check if binary tree is valid BST', 'medium', 34, 190, 2, 'Given the root of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node''s key. The right subtree of a node contains only nodes with keys greater than the node''s key. Both the left and right subtrees must also be binary search trees.', '[{"input": "[2,1,3]", "output": "true", "explanation": ""}, {"input": "[5,1,4,null,null,3,6]", "output": "false", "explanation": "The root node''s value is 5 but its right child''s value is 4."}]', 'The number of nodes in the tree is in the range [1, 10^4]', '["Use inorder traversal", "Or pass min/max bounds recursively"]', '{"c": "struct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n};\n\nbool isValidBST(struct TreeNode* root) {\n    // Your code here\n    return false;\n}", "java": "public class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        // Your code here\n        return false;\n    }\n}", "python": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_valid_bst(root):\n    # Your code here\n    return False"}', '{"c": "bool validate(struct TreeNode* node, long min_val, long max_val) {\n    if (!node) return true;\n    \n    if (node->val <= min_val || node->val >= max_val) {\n        return false;\n    }\n    \n    return validate(node->left, min_val, node->val) && validate(node->right, node->val, max_val);\n}\n\nbool isValidBST(struct TreeNode* root) {\n    return validate(root, LONG_MIN, LONG_MAX);\n}", "java": "class Solution {\n    public boolean isValidBST(TreeNode root) {\n        return validate(root, Long.MIN_VALUE, Long.MAX_VALUE);\n    }\n    \n    private boolean validate(TreeNode node, long minVal, long maxVal) {\n        if (node == null) return true;\n        \n        if (node.val <= minVal || node.val >= maxVal) {\n            return false;\n        }\n        \n        return validate(node.left, minVal, node.val) && validate(node.right, node.val, maxVal);\n    }\n}", "python": "def is_valid_bst(root):\n    def validate(node, min_val, max_val):\n        if not node:\n            return True\n        \n        if node.val <= min_val or node.val >= max_val:\n            return False\n        \n        return validate(node.left, min_val, node.val) and validate(node.right, node.val, max_val)\n    \n    return validate(root, float(''-inf''), float(''inf''))"}', '[{"input": "[2,1,3]", "hidden": false, "expected": "true"}, {"input": "[5,1,4,null,null,3,6]", "hidden": false, "expected": "false"}, {"input": "[1]", "hidden": true, "expected": "true"}]', 133, 3);
INSERT INTO public.puzzles VALUES (1990, 'Number of Islands', 'Count connected components in 2D grid', 'medium', 34, 190, 2, 'Given an m x n 2D binary grid grid which represents a map of ''1''s (land) and ''0''s (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.', '[{"input": "grid = [[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]", "output": "1", "explanation": ""}, {"input": "grid = [[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]", "output": "3", "explanation": ""}]', 'm == grid.length, n == grid[i].length', '["Use DFS or BFS", "Mark visited cells"]', '{"c": "int numIslands(char** grid, int gridSize, int* gridColSize) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int numIslands(char[][] grid) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def num_islands(grid):\n    # Your code here\n    return 0"}', '{"c": "void dfs(char** grid, int gridSize, int* gridColSize, int i, int j) {\n    if (i < 0 || i >= gridSize || j < 0 || j >= gridColSize[0] || grid[i][j] == ''0'') {\n        return;\n    }\n    \n    grid[i][j] = ''0'';\n    \n    dfs(grid, gridSize, gridColSize, i + 1, j);\n    dfs(grid, gridSize, gridColSize, i - 1, j);\n    dfs(grid, gridSize, gridColSize, i, j + 1);\n    dfs(grid, gridSize, gridColSize, i, j - 1);\n}\n\nint numIslands(char** grid, int gridSize, int* gridColSize) {\n    if (gridSize == 0 || gridColSize[0] == 0) return 0;\n    \n    int count = 0;\n    \n    for (int i = 0; i < gridSize; i++) {\n        for (int j = 0; j < gridColSize[0]; j++) {\n            if (grid[i][j] == ''1'') {\n                count++;\n                dfs(grid, gridSize, gridColSize, i, j);\n            }\n        }\n    }\n    \n    return count;\n}", "java": "class Solution {\n    public int numIslands(char[][] grid) {\n        if (grid == null || grid.length == 0) return 0;\n        \n        int count = 0;\n        \n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[0].length; j++) {\n                if (grid[i][j] == ''1'') {\n                    count++;\n                    dfs(grid, i, j);\n                }\n            }\n        }\n        \n        return count;\n    }\n    \n    private void dfs(char[][] grid, int i, int j) {\n        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == ''0'') {\n            return;\n        }\n        \n        grid[i][j] = ''0'';\n        \n        dfs(grid, i + 1, j);\n        dfs(grid, i - 1, j);\n        dfs(grid, i, j + 1);\n        dfs(grid, i, j - 1);\n    }\n}", "python": "def num_islands(grid):\n    if not grid or not grid[0]:\n        return 0\n    \n    def dfs(i, j):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == ''0'':\n            return\n        \n        grid[i][j] = ''0''\n        \n        dfs(i + 1, j)\n        dfs(i - 1, j)\n        dfs(i, j + 1)\n        dfs(i, j - 1)\n    \n    count = 0\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == ''1'':\n                count += 1\n                dfs(i, j)\n    \n    return count"}', '[{"input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]", "hidden": false, "expected": "1"}, {"input": "[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]", "hidden": false, "expected": "3"}, {"input": "[[\"1\"]]", "hidden": true, "expected": "1"}]', 137, 3);
INSERT INTO public.puzzles VALUES (1992, 'Combinations', 'Generate all combinations of k numbers from 1 to n', 'medium', 33, 170, 2, 'Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n]. You may return the answer in any order.', '[{"input": "n = 4, k = 2", "output": "[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]", "explanation": "There are 4 choose 2 = 6 total combinations."}, {"input": "n = 1, k = 1", "output": "[[1]]", "explanation": "There is 1 choose 1 = 1 total combination."}]', '1 <= n <= 20, 1 <= k <= n', '["Use backtracking", "Build combinations incrementally"]', '{"c": "int** combine(int n, int k, int* returnSize, int** returnColumnSizes) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public List<List<Integer>> combine(int n, int k) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "def combine(n, k):\n    # Your code here\n    return []"}', '{"c": "void backtrack(int n, int k, int start, int* current, int currentSize, int** result, int* returnSize, int** returnColumnSizes) {\n    if (currentSize == k) {\n        result[*returnSize] = malloc(k * sizeof(int));\n        for (int i = 0; i < k; i++) {\n            result[*returnSize][i] = current[i];\n        }\n        (*returnColumnSizes)[*returnSize] = k;\n        (*returnSize)++;\n        return;\n    }\n    \n    for (int i = start; i <= n; i++) {\n        current[currentSize] = i;\n        backtrack(n, k, i + 1, current, currentSize + 1, result, returnSize, returnColumnSizes);\n    }\n}\n\nint** combine(int n, int k, int* returnSize, int** returnColumnSizes) {\n    *returnSize = 0;\n    int maxCombinations = 1;\n    for (int i = 0; i < k; i++) {\n        maxCombinations *= (n - i);\n        maxCombinations /= (i + 1);\n    }\n    \n    int** result = malloc(maxCombinations * sizeof(int*));\n    *returnColumnSizes = malloc(maxCombinations * sizeof(int));\n    int* current = malloc(k * sizeof(int));\n    \n    backtrack(n, k, 1, current, 0, result, returnSize, returnColumnSizes);\n    \n    free(current);\n    return result;\n}", "java": "class Solution {\n    public List<List<Integer>> combine(int n, int k) {\n        List<List<Integer>> result = new ArrayList<>();\n        backtrack(n, k, 1, new ArrayList<>(), result);\n        return result;\n    }\n    \n    private void backtrack(int n, int k, int start, List<Integer> current, List<List<Integer>> result) {\n        if (current.size() == k) {\n            result.add(new ArrayList<>(current));\n            return;\n        }\n        \n        for (int i = start; i <= n; i++) {\n            current.add(i);\n            backtrack(n, k, i + 1, current, result);\n            current.remove(current.size() - 1);\n        }\n    }\n}", "python": "def combine(n, k):\n    def backtrack(start, current):\n        if len(current) == k:\n            result.append(current[:])\n            return\n        \n        for i in range(start, n + 1):\n            current.append(i)\n            backtrack(i + 1, current)\n            current.pop()\n    \n    result = []\n    backtrack(1, [])\n    return result"}', '[{"input": "4, 2", "hidden": false, "expected": "[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]"}, {"input": "1, 1", "hidden": false, "expected": "[[1]]"}, {"input": "3, 1", "hidden": true, "expected": "[[1],[2],[3]]"}]', 139, 3);
INSERT INTO public.puzzles VALUES (1996, 'Longest Common Subsequence', 'Find length of longest common subsequence', 'medium', 33, 200, 2, 'Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.', '[{"input": "text1 = \"abcde\", text2 = \"ace\"", "output": "3", "explanation": "The longest common subsequence is \"ace\" and its length is 3."}, {"input": "text1 = \"abc\", text2 = \"abc\"", "output": "3", "explanation": "The longest common subsequence is \"abc\" and its length is 3."}, {"input": "text1 = \"abc\", text2 = \"def\"", "output": "0", "explanation": "There is no such common subsequence, so the result is 0."}]', '1 <= text1.length, text2.length <= 1000', '["Use dynamic programming", "dp[i][j] = LCS length for first i chars of text1 and first j chars of text2"]', '{"c": "int longestCommonSubsequence(char* text1, char* text2) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int longestCommonSubsequence(String text1, String text2) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def longest_common_subsequence(text1, text2):\n    # Your code here\n    return 0"}', '{"c": "int longestCommonSubsequence(char* text1, char* text2) {\n    int m = strlen(text1), n = strlen(text2);\n    int** dp = malloc((m + 1) * sizeof(int*));\n    for (int i = 0; i <= m; i++) {\n        dp[i] = calloc(n + 1, sizeof(int));\n    }\n    \n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (text1[i-1] == text2[j-1]) {\n                dp[i][j] = dp[i-1][j-1] + 1;\n            } else {\n                dp[i][j] = dp[i-1][j] > dp[i][j-1] ? dp[i-1][j] : dp[i][j-1];\n            }\n        }\n    }\n    \n    int result = dp[m][n];\n    for (int i = 0; i <= m; i++) free(dp[i]);\n    free(dp);\n    return result;\n}", "java": "class Solution {\n    public int longestCommonSubsequence(String text1, String text2) {\n        int m = text1.length(), n = text2.length();\n        int[][] dp = new int[m + 1][n + 1];\n        \n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (text1.charAt(i - 1) == text2.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        \n        return dp[m][n];\n    }\n}", "python": "def longest_common_subsequence(text1, text2):\n    m, n = len(text1), len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if text1[i - 1] == text2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[m][n]"}', '[{"input": "\"abcde\", \"ace\"", "hidden": false, "expected": "3"}, {"input": "\"abc\", \"abc\"", "hidden": false, "expected": "3"}, {"input": "\"abc\", \"def\"", "hidden": true, "expected": "0"}]', 143, 4);
INSERT INTO public.puzzles VALUES (2000, 'Balanced Binary Tree', 'Check if binary tree is height-balanced', 'easy', 34, 130, 1, 'Given a binary tree, determine if it is height-balanced. For this problem, a height-balanced binary tree is defined as: a binary tree in which the left and right subtrees of every node differ in height by no more than 1.', '[{"input": "[3,9,20,null,null,15,7]", "output": "true", "explanation": ""}, {"input": "[1,2,2,3,3,null,null,4,4]", "output": "false", "explanation": ""}, {"input": "[]", "output": "true", "explanation": ""}]', 'The number of nodes in the tree is in the range [0, 5000]', '["Calculate height for each subtree", "Check height difference <= 1"]', '{"c": "struct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n};\n\nbool isBalanced(struct TreeNode* root) {\n    // Your code here\n    return false;\n}", "java": "public class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\nclass Solution {\n    public boolean isBalanced(TreeNode root) {\n        // Your code here\n        return false;\n    }\n}", "python": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_balanced(root):\n    # Your code here\n    return False"}', '{"c": "int height(struct TreeNode* root) {\n    if (!root) return 0;\n    \n    int leftHeight = height(root->left);\n    if (leftHeight == -1) return -1;\n    \n    int rightHeight = height(root->right);\n    if (rightHeight == -1) return -1;\n    \n    if (abs(leftHeight - rightHeight) > 1) return -1;\n    \n    return 1 + (leftHeight > rightHeight ? leftHeight : rightHeight);\n}\n\nbool isBalanced(struct TreeNode* root) {\n    return height(root) != -1;\n}", "java": "class Solution {\n    public boolean isBalanced(TreeNode root) {\n        return height(root) != -1;\n    }\n    \n    private int height(TreeNode root) {\n        if (root == null) return 0;\n        \n        int leftHeight = height(root.left);\n        if (leftHeight == -1) return -1;\n        \n        int rightHeight = height(root.right);\n        if (rightHeight == -1) return -1;\n        \n        if (Math.abs(leftHeight - rightHeight) > 1) return -1;\n        \n        return 1 + Math.max(leftHeight, rightHeight);\n    }\n}", "python": "def is_balanced(root):\n    def height(node):\n        if not node:\n            return 0\n        \n        left_height = height(node.left)\n        if left_height == -1:\n            return -1\n        \n        right_height = height(node.right)\n        if right_height == -1:\n            return -1\n        \n        if abs(left_height - right_height) > 1:\n            return -1\n        \n        return 1 + max(left_height, right_height)\n    \n    return height(root) != -1"}', '[{"input": "[3,9,20,null,null,15,7]", "hidden": false, "expected": "true"}, {"input": "[1,2,2,3,3,null,null,4,4]", "hidden": false, "expected": "false"}, {"input": "[]", "hidden": true, "expected": "true"}]', 147, 2);
INSERT INTO public.puzzles VALUES (2002, 'Convert Sorted Array to BST', 'Convert sorted array to height-balanced BST', 'easy', 34, 140, 1, 'Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.', '[{"input": "[-10,-3,0,5,9]", "output": "[0,-3,9,-10,null,5]", "explanation": "[0,-10,5,null,-3,null,9] is also accepted"}, {"input": "[1,3]", "output": "[3,1]", "explanation": "[1,null,3] and [3,1] are both height-balanced BSTs."}]', '1 <= nums.length <= 10^4', '["Use middle element as root", "Recursively build left and right subtrees"]', '{"c": "struct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n};\n\nstruct TreeNode* sortedArrayToBST(int* nums, int numsSize) {\n    // Your code here\n    return NULL;\n}", "java": "public class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\nclass Solution {\n    public TreeNode sortedArrayToBST(int[] nums) {\n        // Your code here\n        return null;\n    }\n}", "python": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef sorted_array_to_bst(nums):\n    # Your code here\n    return None"}', '{"c": "struct TreeNode* helper(int* nums, int left, int right) {\n    if (left > right) return NULL;\n    \n    int mid = left + (right - left) / 2;\n    struct TreeNode* root = malloc(sizeof(struct TreeNode));\n    root->val = nums[mid];\n    root->left = helper(nums, left, mid - 1);\n    root->right = helper(nums, mid + 1, right);\n    \n    return root;\n}\n\nstruct TreeNode* sortedArrayToBST(int* nums, int numsSize) {\n    return helper(nums, 0, numsSize - 1);\n}", "java": "class Solution {\n    public TreeNode sortedArrayToBST(int[] nums) {\n        return helper(nums, 0, nums.length - 1);\n    }\n    \n    private TreeNode helper(int[] nums, int left, int right) {\n        if (left > right) return null;\n        \n        int mid = left + (right - left) / 2;\n        TreeNode root = new TreeNode(nums[mid]);\n        root.left = helper(nums, left, mid - 1);\n        root.right = helper(nums, mid + 1, right);\n        \n        return root;\n    }\n}", "python": "def sorted_array_to_bst(nums):\n    def helper(left, right):\n        if left > right:\n            return None\n        \n        mid = (left + right) // 2\n        root = TreeNode(nums[mid])\n        root.left = helper(left, mid - 1)\n        root.right = helper(mid + 1, right)\n        \n        return root\n    \n    return helper(0, len(nums) - 1)"}', '[{"input": "[-10,-3,0,5,9]", "hidden": false, "expected": "[0,-3,9,-10,null,5]"}, {"input": "[1,3]", "hidden": false, "expected": "[3,1]"}, {"input": "[1]", "hidden": true, "expected": "[1]"}]', 149, 2);
INSERT INTO public.puzzles VALUES (2004, 'Zigzag Conversion', 'Convert string to zigzag pattern', 'medium', 32, 180, 2, 'The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility) P   A   H   R A P L S I I G Y   I   R And then read line by line: "PAHNAPLSIIGYIR". Write the code that will take a string and make this conversion given a number of rows.', '[{"input": "s = \"PAYPALISHIRING\", numRows = 3", "output": "\"PAHNAPLSIIGYIR\"", "explanation": "P   A   H   R\\nA P L S I I G\\nY   I   R"}, {"input": "s = \"PAYPALISHIRING\", numRows = 4", "output": "\"PINALSIGYAHRPI\"", "explanation": "P     I    N\\nA   L S  I G\\nY A   H R\\nP     I"}, {"input": "s = \"A\", numRows = 1", "output": "\"A\"", "explanation": ""}]', '1 <= s.length <= 1000, 1 <= numRows <= 1000', '["Use arrays for each row", "Track direction changes"]', '{"c": "char* convert(char* s, int numRows) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public String convert(String s, int numRows) {\n        // Your code here\n        return \"\";\n    }\n}", "python": "def convert(s, num_rows):\n    # Your code here\n    return \"\""}', '{"c": "char* convert(char* s, int numRows) {\n    if (numRows == 1) return strdup(s);\n    \n    int len = strlen(s);\n    char** rows = malloc(numRows * sizeof(char*));\n    for (int i = 0; i < numRows; i++) {\n        rows[i] = malloc((len + 1) * sizeof(char));\n        rows[i][0] = ''\\0'';\n    }\n    \n    int currentRow = 0;\n    bool goingDown = false;\n    \n    for (int i = 0; i < len; i++) {\n        int rowLen = strlen(rows[currentRow]);\n        rows[currentRow][rowLen] = s[i];\n        rows[currentRow][rowLen + 1] = ''\\0'';\n        \n        if (currentRow == 0 || currentRow == numRows - 1) {\n            goingDown = !goingDown;\n        }\n        currentRow += goingDown ? 1 : -1;\n    }\n    \n    char* result = malloc((len + 1) * sizeof(char));\n    result[0] = ''\\0'';\n    \n    for (int i = 0; i < numRows; i++) {\n        strcat(result, rows[i]);\n        free(rows[i]);\n    }\n    \n    free(rows);\n    return result;\n}", "java": "class Solution {\n    public String convert(String s, int numRows) {\n        if (numRows == 1) return s;\n        \n        List<StringBuilder> rows = new ArrayList<>();\n        for (int i = 0; i < Math.min(numRows, s.length()); i++) {\n            rows.add(new StringBuilder());\n        }\n        \n        int currentRow = 0;\n        boolean goingDown = false;\n        \n        for (char c : s.toCharArray()) {\n            rows.get(currentRow).append(c);\n            if (currentRow == 0 || currentRow == numRows - 1) {\n                goingDown = !goingDown;\n            }\n            currentRow += goingDown ? 1 : -1;\n        }\n        \n        StringBuilder result = new StringBuilder();\n        for (StringBuilder row : rows) {\n            result.append(row);\n        }\n        \n        return result.toString();\n    }\n}", "python": "def convert(s, num_rows):\n    if num_rows == 1:\n        return s\n    \n    rows = [''''] * min(num_rows, len(s))\n    current_row = 0\n    going_down = False\n    \n    for char in s:\n        rows[current_row] += char\n        if current_row == 0 or current_row == num_rows - 1:\n            going_down = not going_down\n        current_row += 1 if going_down else -1\n    \n    return ''''.join(rows)"}', '[{"input": "\"PAYPALISHIRING\", 3", "hidden": false, "expected": "\"PAHNAPLSIIGYIR\""}, {"input": "\"PAYPALISHIRING\", 4", "hidden": false, "expected": "\"PINALSIGYAHRPI\""}, {"input": "\"A\", 1", "hidden": true, "expected": "\"A\""}]', 151, 3);
INSERT INTO public.puzzles VALUES (2005, 'Longest Palindromic Substring', 'Find longest palindromic substring', 'medium', 33, 200, 2, 'Given a string s, return the longest palindromic substring in s.', '[{"input": "s = \"babad\"", "output": "\"bab\"", "explanation": "\"aba\" is also a valid answer."}, {"input": "s = \"cbbd\"", "output": "\"bb\"", "explanation": ""}]', '1 <= s.length <= 1000', '["Expand around centers", "Consider both odd and even length palindromes"]', '{"c": "char* longestPalindrome(char* s) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public String longestPalindrome(String s) {\n        // Your code here\n        return \"\";\n    }\n}", "python": "def longest_palindrome(s):\n    # Your code here\n    return \"\""}', '{"c": "int expandAroundCenter(char* s, int left, int right) {\n    while (left >= 0 && right < strlen(s) && s[left] == s[right]) {\n        left--;\n        right++;\n    }\n    return right - left - 1;\n}\n\nchar* longestPalindrome(char* s) {\n    if (!s || strlen(s) < 1) return \"\";\n    \n    int start = 0, end = 0;\n    \n    for (int i = 0; i < strlen(s); i++) {\n        int len1 = expandAroundCenter(s, i, i);\n        int len2 = expandAroundCenter(s, i, i + 1);\n        int len = len1 > len2 ? len1 : len2;\n        \n        if (len > end - start) {\n            start = i - (len - 1) / 2;\n            end = i + len / 2;\n        }\n    }\n    \n    char* result = malloc((end - start + 2) * sizeof(char));\n    strncpy(result, s + start, end - start + 1);\n    result[end - start + 1] = ''\\0'';\n    \n    return result;\n}", "java": "class Solution {\n    public String longestPalindrome(String s) {\n        if (s == null || s.length() < 1) return \"\";\n        \n        int start = 0, end = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            int len1 = expandAroundCenter(s, i, i);\n            int len2 = expandAroundCenter(s, i, i + 1);\n            int len = Math.max(len1, len2);\n            \n            if (len > end - start) {\n                start = i - (len - 1) / 2;\n                end = i + len / 2;\n            }\n        }\n        \n        return s.substring(start, end + 1);\n    }\n    \n    private int expandAroundCenter(String s, int left, int right) {\n        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {\n            left--;\n            right++;\n        }\n        return right - left - 1;\n    }\n}", "python": "def longest_palindrome(s):\n    if not s:\n        return \"\"\n    \n    def expand_around_center(left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return right - left - 1\n    \n    start = end = 0\n    \n    for i in range(len(s)):\n        len1 = expand_around_center(i, i)\n        len2 = expand_around_center(i, i + 1)\n        length = max(len1, len2)\n        \n        if length > end - start:\n            start = i - (length - 1) // 2\n            end = i + length // 2\n    \n    return s[start:end + 1]"}', '[{"input": "\"babad\"", "hidden": false, "expected": "\"bab\""}, {"input": "\"cbbd\"", "hidden": false, "expected": "\"bb\""}, {"input": "\"a\"", "hidden": true, "expected": "\"a\""}]', 152, 3);
INSERT INTO public.puzzles VALUES (2006, 'Reverse Linked List', 'Reverse a singly linked list', 'easy', 34, 120, 1, 'Given the head of a singly linked list, reverse the list, and return the reversed list.', '[{"input": "[1,2,3,4,5]", "output": "[5,4,3,2,1]", "explanation": ""}, {"input": "[1,2]", "output": "[2,1]", "explanation": ""}, {"input": "[]", "output": "[]", "explanation": ""}]', 'The number of nodes in the list is the range [0, 5000]', '["Use three pointers: prev, current, next", "Iteratively reverse links"]', '{"c": "struct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* reverseList(struct ListNode* head) {\n    // Your code here\n    return NULL;\n}", "java": "public class ListNode {\n    int val;\n    ListNode next;\n    ListNode() {}\n    ListNode(int val) { this.val = val; }\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n}\n\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        // Your code here\n        return null;\n    }\n}", "python": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverse_list(head):\n    # Your code here\n    return None"}', '{"c": "struct ListNode* reverseList(struct ListNode* head) {\n    struct ListNode* prev = NULL;\n    struct ListNode* current = head;\n    \n    while (current) {\n        struct ListNode* next = current->next;\n        current->next = prev;\n        prev = current;\n        current = next;\n    }\n    \n    return prev;\n}", "java": "class Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode prev = null;\n        ListNode current = head;\n        \n        while (current != null) {\n            ListNode next = current.next;\n            current.next = prev;\n            prev = current;\n            current = next;\n        }\n        \n        return prev;\n    }\n}", "python": "def reverse_list(head):\n    prev = None\n    current = head\n    \n    while current:\n        next_node = current.next\n        current.next = prev\n        prev = current\n        current = next_node\n    \n    return prev"}', '[{"input": "[1,2,3,4,5]", "hidden": false, "expected": "[5,4,3,2,1]"}, {"input": "[1,2]", "hidden": false, "expected": "[2,1]"}, {"input": "[]", "hidden": true, "expected": "[]"}]', 153, 1);
INSERT INTO public.puzzles VALUES (2007, 'String to Integer (atoi)', 'Implement atoi function', 'medium', 32, 190, 2, 'Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++''s atoi function).', '[{"input": "\"42\"", "output": "42", "explanation": ""}, {"input": "\"   -42\"", "output": "-42", "explanation": ""}, {"input": "\"4193 with words\"", "output": "4193", "explanation": ""}]', '0 <= s.length <= 200', '["Handle whitespace and signs", "Check for overflow"]', '{"c": "int myAtoi(char* s) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int myAtoi(String s) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def my_atoi(s):\n    # Your code here\n    return 0"}', '{"c": "int myAtoi(char* s) {\n    int i = 0;\n    int sign = 1;\n    long result = 0;\n    \n    // Skip whitespace\n    while (s[i] == '' '') i++;\n    \n    // Handle sign\n    if (s[i] == ''-'' || s[i] == ''+'') {\n        sign = s[i] == ''-'' ? -1 : 1;\n        i++;\n    }\n    \n    // Parse digits\n    while (s[i] >= ''0'' && s[i] <= ''9'') {\n        result = result * 10 + (s[i] - ''0'');\n        \n        // Check overflow\n        if (result * sign >= INT_MAX) return INT_MAX;\n        if (result * sign <= INT_MIN) return INT_MIN;\n        \n        i++;\n    }\n    \n    return (int)(result * sign);\n}", "java": "class Solution {\n    public int myAtoi(String s) {\n        int i = 0, sign = 1;\n        long result = 0;\n        \n        // Skip whitespace\n        while (i < s.length() && s.charAt(i) == '' '') i++;\n        \n        // Handle sign\n        if (i < s.length() && (s.charAt(i) == ''-'' || s.charAt(i) == ''+'')) {\n            sign = s.charAt(i) == ''-'' ? -1 : 1;\n            i++;\n        }\n        \n        // Parse digits\n        while (i < s.length() && Character.isDigit(s.charAt(i))) {\n            result = result * 10 + (s.charAt(i) - ''0'');\n            \n            // Check overflow\n            if (result * sign >= Integer.MAX_VALUE) return Integer.MAX_VALUE;\n            if (result * sign <= Integer.MIN_VALUE) return Integer.MIN_VALUE;\n            \n            i++;\n        }\n        \n        return (int)(result * sign);\n    }\n}", "python": "def my_atoi(s):\n    i = 0\n    sign = 1\n    result = 0\n    \n    # Skip whitespace\n    while i < len(s) and s[i] == '' '':\n        i += 1\n    \n    # Handle sign\n    if i < len(s) and s[i] in [''-'', ''+'']:\n        sign = -1 if s[i] == ''-'' else 1\n        i += 1\n    \n    # Parse digits\n    while i < len(s) and s[i].isdigit():\n        result = result * 10 + int(s[i])\n        \n        # Check overflow\n        if result * sign >= 2**31 - 1:\n            return 2**31 - 1\n        if result * sign <= -2**31:\n            return -2**31\n        \n        i += 1\n    \n    return result * sign"}', '[{"input": "\"42\"", "hidden": false, "expected": "42"}, {"input": "\"   -42\"", "hidden": false, "expected": "-42"}, {"input": "\"4193 with words\"", "hidden": true, "expected": "4193"}]', 154, 3);
INSERT INTO public.puzzles VALUES (2009, 'Linked List Cycle', 'Detect if linked list has a cycle', 'easy', 34, 130, 1, 'Given head, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer.', '[{"input": "head = [3,2,0,-4], pos = 1", "output": "true", "explanation": "There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed)."}, {"input": "head = [1,2], pos = 0", "output": "true", "explanation": "There is a cycle in the linked list, where the tail connects to the 0th node."}, {"input": "head = [1], pos = -1", "output": "false", "explanation": "There is no cycle in the linked list."}]', 'The number of the nodes in the list is in the range [0, 10^4]', '["Use Floyd''s cycle detection algorithm", "Two pointers: slow and fast"]', '{"c": "struct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nbool hasCycle(struct ListNode *head) {\n    // Your code here\n    return false;\n}", "java": "class ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) {\n        val = x;\n        next = null;\n    }\n}\n\nclass Solution {\n    public boolean hasCycle(ListNode head) {\n        // Your code here\n        return false;\n    }\n}", "python": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef has_cycle(head):\n    # Your code here\n    return False"}', '{"c": "bool hasCycle(struct ListNode *head) {\n    if (!head || !head->next) return false;\n    \n    struct ListNode* slow = head;\n    struct ListNode* fast = head->next;\n    \n    while (slow != fast) {\n        if (!fast || !fast->next) return false;\n        slow = slow->next;\n        fast = fast->next->next;\n    }\n    \n    return true;\n}", "java": "class Solution {\n    public boolean hasCycle(ListNode head) {\n        if (head == null || head.next == null) return false;\n        \n        ListNode slow = head;\n        ListNode fast = head.next;\n        \n        while (slow != fast) {\n            if (fast == null || fast.next == null) return false;\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        \n        return true;\n    }\n}", "python": "def has_cycle(head):\n    if not head or not head.next:\n        return False\n    \n    slow = head\n    fast = head.next\n    \n    while slow != fast:\n        if not fast or not fast.next:\n            return False\n        slow = slow.next\n        fast = fast.next.next\n    \n    return True"}', '[{"input": "head = [3,2,0,-4], pos = 1", "hidden": false, "expected": "true"}, {"input": "head = [1,2], pos = 0", "hidden": false, "expected": "true"}, {"input": "head = [1], pos = -1", "hidden": true, "expected": "false"}]', 156, 2);
INSERT INTO public.puzzles VALUES (2012, 'Add Two Numbers', 'Add two numbers represented as linked lists', 'medium', 33, 190, 2, 'You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.', '[{"input": "l1 = [2,4,3], l2 = [5,6,4]", "output": "[7,0,8]", "explanation": "342 + 465 = 807."}, {"input": "l1 = [0], l2 = [0]", "output": "[0]", "explanation": ""}, {"input": "l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]", "output": "[8,9,9,9,0,0,0,1]", "explanation": ""}]', 'The number of nodes in each linked list is in the range [1, 100]', '["Track carry between digits", "Handle different list lengths"]', '{"c": "struct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\n    // Your code here\n    return NULL;\n}", "java": "public class ListNode {\n    int val;\n    ListNode next;\n    ListNode() {}\n    ListNode(int val) { this.val = val; }\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n}\n\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        // Your code here\n        return null;\n    }\n}", "python": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef add_two_numbers(l1, l2):\n    # Your code here\n    return None"}', '{"c": "struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* current = &dummy;\n    int carry = 0;\n    \n    while (l1 || l2 || carry) {\n        int sum = carry;\n        \n        if (l1) {\n            sum += l1->val;\n            l1 = l1->next;\n        }\n        \n        if (l2) {\n            sum += l2->val;\n            l2 = l2->next;\n        }\n        \n        carry = sum / 10;\n        \n        struct ListNode* newNode = malloc(sizeof(struct ListNode));\n        newNode->val = sum % 10;\n        newNode->next = NULL;\n        \n        current->next = newNode;\n        current = newNode;\n    }\n    \n    return dummy.next;\n}", "java": "class Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode dummy = new ListNode(0);\n        ListNode current = dummy;\n        int carry = 0;\n        \n        while (l1 != null || l2 != null || carry != 0) {\n            int sum = carry;\n            \n            if (l1 != null) {\n                sum += l1.val;\n                l1 = l1.next;\n            }\n            \n            if (l2 != null) {\n                sum += l2.val;\n                l2 = l2.next;\n            }\n            \n            carry = sum / 10;\n            current.next = new ListNode(sum % 10);\n            current = current.next;\n        }\n        \n        return dummy.next;\n    }\n}", "python": "def add_two_numbers(l1, l2):\n    dummy = ListNode(0)\n    current = dummy\n    carry = 0\n    \n    while l1 or l2 or carry:\n        sum_val = carry\n        \n        if l1:\n            sum_val += l1.val\n            l1 = l1.next\n        \n        if l2:\n            sum_val += l2.val\n            l2 = l2.next\n        \n        carry = sum_val // 10\n        current.next = ListNode(sum_val % 10)\n        current = current.next\n    \n    return dummy.next"}', '[{"input": "[2,4,3], [5,6,4]", "hidden": false, "expected": "[7,0,8]"}, {"input": "[0], [0]", "hidden": false, "expected": "[0]"}, {"input": "[9,9,9,9,9,9,9], [9,9,9,9]", "hidden": true, "expected": "[8,9,9,9,0,0,0,1]"}]', 159, 3);
INSERT INTO public.puzzles VALUES (2013, 'Intersection of Two Linked Lists', 'Find intersection point of two linked lists', 'easy', 34, 140, 1, 'Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.', '[{"input": "listA = [4,1,8,4,5], listB = [5,6,1,8,4,5]", "output": "8", "explanation": "The intersected node''s value is 8."}, {"input": "listA = [1,9,1,2,4], listB = [3,2,4]", "output": "2", "explanation": "The intersected node''s value is 2."}, {"input": "listA = [2,6,4], listB = [1,5]", "output": "null", "explanation": "The two lists do not intersect."}]', 'The number of nodes of listA is in the m, The number of nodes of listB is in the n', '["Use two pointers", "Switch pointers when reaching end"]', '{"c": "struct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {\n    // Your code here\n    return NULL;\n}", "java": "public class ListNode {\n    int val;\n    ListNode next;\n    ListNode(int x) {\n        val = x;\n        next = null;\n    }\n}\n\nclass Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        // Your code here\n        return null;\n    }\n}", "python": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef get_intersection_node(headA, headB):\n    # Your code here\n    return None"}', '{"c": "struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {\n    if (!headA || !headB) return NULL;\n    \n    struct ListNode *pA = headA;\n    struct ListNode *pB = headB;\n    \n    while (pA != pB) {\n        pA = pA ? pA->next : headB;\n        pB = pB ? pB->next : headA;\n    }\n    \n    return pA;\n}", "java": "class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        if (headA == null || headB == null) return null;\n        \n        ListNode pA = headA;\n        ListNode pB = headB;\n        \n        while (pA != pB) {\n            pA = (pA != null) ? pA.next : headB;\n            pB = (pB != null) ? pB.next : headA;\n        }\n        \n        return pA;\n    }\n}", "python": "def get_intersection_node(headA, headB):\n    if not headA or not headB:\n        return None\n    \n    pA, pB = headA, headB\n    \n    while pA != pB:\n        pA = pA.next if pA else headB\n        pB = pB.next if pB else headA\n    \n    return pA"}', '[{"input": "listA = [4,1,8,4,5], listB = [5,6,1,8,4,5]", "hidden": false, "expected": "8"}, {"input": "listA = [1,9,1,2,4], listB = [3,2,4]", "hidden": false, "expected": "2"}, {"input": "listA = [2,6,4], listB = [1,5]", "hidden": true, "expected": "null"}]', 160, 2);
INSERT INTO public.puzzles VALUES (2015, 'Median of Two Sorted Arrays', 'Find median of two sorted arrays', 'hard', 33, 300, 3, 'Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).', '[{"input": "nums1 = [1,3], nums2 = [2]", "output": "2.00000", "explanation": "merged array = [1,2,3] and median is 2."}, {"input": "nums1 = [1,2], nums2 = [3,4]", "output": "2.50000", "explanation": "merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5."}]', 'nums1.length == m, nums2.length == n, 0 <= m <= 1000, 0 <= n <= 1000', '["Use binary search", "Find partition point"]', '{"c": "double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    // Your code here\n    return 0.0;\n}", "java": "class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        // Your code here\n        return 0.0;\n    }\n}", "python": "def find_median_sorted_arrays(nums1, nums2):\n    # Your code here\n    return 0.0"}', '{"c": "double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    if (nums1Size > nums2Size) {\n        return findMedianSortedArrays(nums2, nums2Size, nums1, nums1Size);\n    }\n    \n    int m = nums1Size, n = nums2Size;\n    int low = 0, high = m;\n    \n    while (low <= high) {\n        int cut1 = (low + high) / 2;\n        int cut2 = (m + n + 1) / 2 - cut1;\n        \n        int left1 = (cut1 == 0) ? INT_MIN : nums1[cut1 - 1];\n        int left2 = (cut2 == 0) ? INT_MIN : nums2[cut2 - 1];\n        \n        int right1 = (cut1 == m) ? INT_MAX : nums1[cut1];\n        int right2 = (cut2 == n) ? INT_MAX : nums2[cut2];\n        \n        if (left1 <= right2 && left2 <= right1) {\n            if ((m + n) % 2 == 0) {\n                return (fmax(left1, left2) + fmin(right1, right2)) / 2.0;\n            } else {\n                return fmax(left1, left2);\n            }\n        } else if (left1 > right2) {\n            high = cut1 - 1;\n        } else {\n            low = cut1 + 1;\n        }\n    }\n    \n    return 1.0;\n}", "java": "class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        if (nums1.length > nums2.length) {\n            return findMedianSortedArrays(nums2, nums1);\n        }\n        \n        int m = nums1.length, n = nums2.length;\n        int low = 0, high = m;\n        \n        while (low <= high) {\n            int cut1 = (low + high) / 2;\n            int cut2 = (m + n + 1) / 2 - cut1;\n            \n            int left1 = (cut1 == 0) ? Integer.MIN_VALUE : nums1[cut1 - 1];\n            int left2 = (cut2 == 0) ? Integer.MIN_VALUE : nums2[cut2 - 1];\n            \n            int right1 = (cut1 == m) ? Integer.MAX_VALUE : nums1[cut1];\n            int right2 = (cut2 == n) ? Integer.MAX_VALUE : nums2[cut2];\n            \n            if (left1 <= right2 && left2 <= right1) {\n                if ((m + n) % 2 == 0) {\n                    return (Math.max(left1, left2) + Math.min(right1, right2)) / 2.0;\n                } else {\n                    return Math.max(left1, left2);\n                }\n            } else if (left1 > right2) {\n                high = cut1 - 1;\n            } else {\n                low = cut1 + 1;\n            }\n        }\n        \n        return 1.0;\n    }\n}", "python": "def find_median_sorted_arrays(nums1, nums2):\n    if len(nums1) > len(nums2):\n        return find_median_sorted_arrays(nums2, nums1)\n    \n    m, n = len(nums1), len(nums2)\n    low, high = 0, m\n    \n    while low <= high:\n        cut1 = (low + high) // 2\n        cut2 = (m + n + 1) // 2 - cut1\n        \n        left1 = float(''-inf'') if cut1 == 0 else nums1[cut1 - 1]\n        left2 = float(''-inf'') if cut2 == 0 else nums2[cut2 - 1]\n        \n        right1 = float(''inf'') if cut1 == m else nums1[cut1]\n        right2 = float(''inf'') if cut2 == n else nums2[cut2]\n        \n        if left1 <= right2 and left2 <= right1:\n            if (m + n) % 2 == 0:\n                return (max(left1, left2) + min(right1, right2)) / 2.0\n            else:\n                return max(left1, left2)\n        elif left1 > right2:\n            high = cut1 - 1\n        else:\n            low = cut1 + 1\n    \n    return 1.0"}', '[{"input": "[1,3], [2]", "hidden": false, "expected": "2.00000"}, {"input": "[1,2], [3,4]", "hidden": false, "expected": "2.50000"}, {"input": "[0,0], [0,0]", "hidden": true, "expected": "0.00000"}]', 162, 5);
INSERT INTO public.puzzles VALUES (2016, 'Remove Nth Node From End', 'Remove nth node from end of linked list', 'medium', 34, 180, 2, 'Given the head of a linked list, remove the nth node from the end of the list and return its head.', '[{"input": "head = [1,2,3,4,5], n = 2", "output": "[1,2,3,5]", "explanation": ""}, {"input": "head = [1], n = 1", "output": "[]", "explanation": ""}, {"input": "head = [1,2], n = 1", "output": "[1]", "explanation": ""}]', 'The number of nodes in the list is sz, 1 <= sz <= 30, 0 <= Node.val <= 100, 1 <= n <= sz', '["Use two pointers", "Maintain gap of n nodes"]', '{"c": "struct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* removeNthFromEnd(struct ListNode* head, int n) {\n    // Your code here\n    return NULL;\n}", "java": "public class ListNode {\n    int val;\n    ListNode next;\n    ListNode() {}\n    ListNode(int val) { this.val = val; }\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n}\n\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        // Your code here\n        return null;\n    }\n}", "python": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef remove_nth_from_end(head, n):\n    # Your code here\n    return None"}', '{"c": "struct ListNode* removeNthFromEnd(struct ListNode* head, int n) {\n    struct ListNode dummy;\n    dummy.next = head;\n    \n    struct ListNode* first = &dummy;\n    struct ListNode* second = &dummy;\n    \n    // Advance first pointer n+1 steps\n    for (int i = 0; i <= n; i++) {\n        first = first->next;\n    }\n    \n    // Move both pointers until first reaches end\n    while (first) {\n        first = first->next;\n        second = second->next;\n    }\n    \n    // Remove nth node\n    struct ListNode* nodeToDelete = second->next;\n    second->next = second->next->next;\n    free(nodeToDelete);\n    \n    return dummy.next;\n}", "java": "class Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode dummy = new ListNode(0);\n        dummy.next = head;\n        \n        ListNode first = dummy;\n        ListNode second = dummy;\n        \n        // Advance first pointer n+1 steps\n        for (int i = 0; i <= n; i++) {\n            first = first.next;\n        }\n        \n        // Move both pointers until first reaches end\n        while (first != null) {\n            first = first.next;\n            second = second.next;\n        }\n        \n        // Remove nth node\n        second.next = second.next.next;\n        \n        return dummy.next;\n    }\n}", "python": "def remove_nth_from_end(head, n):\n    dummy = ListNode(0)\n    dummy.next = head\n    \n    first = dummy\n    second = dummy\n    \n    # Advance first pointer n+1 steps\n    for i in range(n + 1):\n        first = first.next\n    \n    # Move both pointers until first reaches end\n    while first:\n        first = first.next\n        second = second.next\n    \n    # Remove nth node\n    second.next = second.next.next\n    \n    return dummy.next"}', '[{"input": "[1,2,3,4,5], 2", "hidden": false, "expected": "[1,2,3,5]"}, {"input": "[1], 1", "hidden": false, "expected": "[]"}, {"input": "[1,2], 1", "hidden": true, "expected": "[1]"}]', 163, 3);
INSERT INTO public.puzzles VALUES (2020, 'Merge k Sorted Lists', 'Merge k sorted linked lists', 'hard', 33, 300, 3, 'You are given an array of k linked-lists lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.', '[{"input": "lists = [[1,4,5],[1,3,4],[2,6]]", "output": "[1,1,2,3,4,4,5,6]", "explanation": "The linked-lists are: [1->4->5, 1->3->4, 2->6] Merging them into one sorted list: 1->1->2->3->4->4->5->6"}, {"input": "lists = []", "output": "[]", "explanation": ""}, {"input": "lists = [[]]", "output": "[]", "explanation": ""}]', 'k == lists.length, 0 <= k <= 10^4', '["Use divide and conquer", "Merge pairs recursively"]', '{"c": "struct ListNode {\n    int val;\n    struct ListNode *next;\n};\n\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {\n    // Your code here\n    return NULL;\n}", "java": "public class ListNode {\n    int val;\n    ListNode next;\n    ListNode() {}\n    ListNode(int val) { this.val = val; }\n    ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n}\n\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        // Your code here\n        return null;\n    }\n}", "python": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef merge_k_lists(lists):\n    # Your code here\n    return None"}', '{"c": "struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    struct ListNode* current = &dummy;\n    \n    while (l1 && l2) {\n        if (l1->val <= l2->val) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n    \n    current->next = l1 ? l1 : l2;\n    return dummy.next;\n}\n\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {\n    if (listsSize == 0) return NULL;\n    \n    while (listsSize > 1) {\n        for (int i = 0; i < listsSize / 2; i++) {\n            lists[i] = mergeTwoLists(lists[i], lists[listsSize - 1 - i]);\n        }\n        listsSize = (listsSize + 1) / 2;\n    }\n    \n    return lists[0];\n}", "java": "class Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        if (lists.length == 0) return null;\n        \n        while (lists.length > 1) {\n            List<ListNode> mergedLists = new ArrayList<>();\n            \n            for (int i = 0; i < lists.length; i += 2) {\n                ListNode l1 = lists[i];\n                ListNode l2 = (i + 1 < lists.length) ? lists[i + 1] : null;\n                mergedLists.add(mergeTwoLists(l1, l2));\n            }\n            \n            lists = mergedLists.toArray(new ListNode[0]);\n        }\n        \n        return lists[0];\n    }\n    \n    private ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        ListNode dummy = new ListNode();\n        ListNode current = dummy;\n        \n        while (l1 != null && l2 != null) {\n            if (l1.val <= l2.val) {\n                current.next = l1;\n                l1 = l1.next;\n            } else {\n                current.next = l2;\n                l2 = l2.next;\n            }\n            current = current.next;\n        }\n        \n        current.next = (l1 != null) ? l1 : l2;\n        return dummy.next;\n    }\n}", "python": "def merge_k_lists(lists):\n    def merge_two_lists(l1, l2):\n        dummy = ListNode()\n        current = dummy\n        \n        while l1 and l2:\n            if l1.val <= l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n        \n        current.next = l1 or l2\n        return dummy.next\n    \n    if not lists:\n        return None\n    \n    while len(lists) > 1:\n        merged_lists = []\n        \n        for i in range(0, len(lists), 2):\n            l1 = lists[i]\n            l2 = lists[i + 1] if i + 1 < len(lists) else None\n            merged_lists.append(merge_two_lists(l1, l2))\n        \n        lists = merged_lists\n    \n    return lists[0]"}', '[{"input": "[[1,4,5],[1,3,4],[2,6]]", "hidden": false, "expected": "[1,1,2,3,4,4,5,6]"}, {"input": "[]", "hidden": false, "expected": "[]"}, {"input": "[[]]", "hidden": true, "expected": "[]"}]', 167, 5);
INSERT INTO public.puzzles VALUES (2022, 'Implement strStr', 'Find first occurrence of needle in haystack', 'medium', 33, 180, 2, 'Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.', '[{"input": "haystack = \"sadbutsad\", needle = \"sad\"", "output": "0", "explanation": "\"sad\" occurs at index 0 and 6. The first occurrence is at index 0, so we return 0."}, {"input": "haystack = \"leetcode\", needle = \"leeto\"", "output": "-1", "explanation": "\"leeto\" did not occur in \"leetcode\", so we return -1."}]', '1 <= haystack.length, needle.length <= 10^4', '["Use KMP algorithm or simple search", "Check substring at each position"]', '{"c": "int strStr(char* haystack, char* needle) {\n    // Your code here\n    return -1;\n}", "java": "class Solution {\n    public int strStr(String haystack, String needle) {\n        // Your code here\n        return -1;\n    }\n}", "python": "def str_str(haystack, needle):\n    # Your code here\n    return -1"}', '{"c": "int strStr(char* haystack, char* needle) {\n    int hayLen = strlen(haystack);\n    int needleLen = strlen(needle);\n    \n    if (needleLen == 0) return 0;\n    \n    for (int i = 0; i <= hayLen - needleLen; i++) {\n        if (strncmp(haystack + i, needle, needleLen) == 0) {\n            return i;\n        }\n    }\n    \n    return -1;\n}", "java": "class Solution {\n    public int strStr(String haystack, String needle) {\n        if (needle.length() == 0) return 0;\n        \n        for (int i = 0; i <= haystack.length() - needle.length(); i++) {\n            if (haystack.substring(i, i + needle.length()).equals(needle)) {\n                return i;\n            }\n        }\n        \n        return -1;\n    }\n}", "python": "def str_str(haystack, needle):\n    if not needle:\n        return 0\n    \n    for i in range(len(haystack) - len(needle) + 1):\n        if haystack[i:i + len(needle)] == needle:\n            return i\n    \n    return -1"}', '[{"input": "\"sadbutsad\", \"sad\"", "hidden": false, "expected": "0"}, {"input": "\"leetcode\", \"leeto\"", "hidden": false, "expected": "-1"}, {"input": "\"hello\", \"ll\"", "hidden": true, "expected": "2"}]', 169, 3);
INSERT INTO public.puzzles VALUES (2023, 'Implement Queue using Stacks', 'Implement queue using only stacks', 'easy', 34, 150, 1, 'Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).', '[{"input": "[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\\n[[], [1], [2], [], [], []]", "output": "[null, null, null, 1, 1, false]", "explanation": "MyQueue myQueue = new MyQueue(); myQueue.push(1); // queue is: [1] myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue) myQueue.peek(); // return 1 myQueue.pop(); // return 1, queue is [2] myQueue.empty(); // return false"}]', '1 <= x <= 9', '["Use two stacks", "Transfer elements when needed"]', '{"c": "typedef struct {\n    // Your data structure here\n} MyQueue;\n\nMyQueue* myQueueCreate() {\n    // Your code here\n    return NULL;\n}\n\nvoid myQueuePush(MyQueue* obj, int x) {\n    // Your code here\n}\n\nint myQueuePop(MyQueue* obj) {\n    // Your code here\n    return 0;\n}\n\nint myQueuePeek(MyQueue* obj) {\n    // Your code here\n    return 0;\n}\n\nbool myQueueEmpty(MyQueue* obj) {\n    // Your code here\n    return false;\n}\n\nvoid myQueueFree(MyQueue* obj) {\n    // Your code here\n}", "java": "class MyQueue {\n\n    public MyQueue() {\n        // Your code here\n    }\n    \n    public void push(int x) {\n        // Your code here\n    }\n    \n    public int pop() {\n        // Your code here\n        return 0;\n    }\n    \n    public int peek() {\n        // Your code here\n        return 0;\n    }\n    \n    public boolean empty() {\n        // Your code here\n        return false;\n    }\n}", "python": "class MyQueue:\n\n    def __init__(self):\n        # Your code here\n        pass\n\n    def push(self, x: int) -> None:\n        # Your code here\n        pass\n\n    def pop(self) -> int:\n        # Your code here\n        return 0\n\n    def peek(self) -> int:\n        # Your code here\n        return 0\n\n    def empty(self) -> bool:\n        # Your code here\n        return False"}', '{"c": "typedef struct {\n    int* stack1;\n    int* stack2;\n    int top1;\n    int top2;\n    int capacity;\n} MyQueue;\n\nMyQueue* myQueueCreate() {\n    MyQueue* queue = malloc(sizeof(MyQueue));\n    queue->capacity = 1000;\n    queue->stack1 = malloc(queue->capacity * sizeof(int));\n    queue->stack2 = malloc(queue->capacity * sizeof(int));\n    queue->top1 = -1;\n    queue->top2 = -1;\n    return queue;\n}\n\nvoid myQueuePush(MyQueue* obj, int x) {\n    obj->stack1[++obj->top1] = x;\n}\n\nint myQueuePop(MyQueue* obj) {\n    if (obj->top2 == -1) {\n        while (obj->top1 >= 0) {\n            obj->stack2[++obj->top2] = obj->stack1[obj->top1--];\n        }\n    }\n    return obj->stack2[obj->top2--];\n}\n\nint myQueuePeek(MyQueue* obj) {\n    if (obj->top2 == -1) {\n        while (obj->top1 >= 0) {\n            obj->stack2[++obj->top2] = obj->stack1[obj->top1--];\n        }\n    }\n    return obj->stack2[obj->top2];\n}\n\nbool myQueueEmpty(MyQueue* obj) {\n    return obj->top1 == -1 && obj->top2 == -1;\n}\n\nvoid myQueueFree(MyQueue* obj) {\n    free(obj->stack1);\n    free(obj->stack2);\n    free(obj);\n}", "java": "class MyQueue {\n    private Stack<Integer> stack1;\n    private Stack<Integer> stack2;\n\n    public MyQueue() {\n        stack1 = new Stack<>();\n        stack2 = new Stack<>();\n    }\n    \n    public void push(int x) {\n        stack1.push(x);\n    }\n    \n    public int pop() {\n        if (stack2.isEmpty()) {\n            while (!stack1.isEmpty()) {\n                stack2.push(stack1.pop());\n            }\n        }\n        return stack2.pop();\n    }\n    \n    public int peek() {\n        if (stack2.isEmpty()) {\n            while (!stack1.isEmpty()) {\n                stack2.push(stack1.pop());\n            }\n        }\n        return stack2.peek();\n    }\n    \n    public boolean empty() {\n        return stack1.isEmpty() && stack2.isEmpty();\n    }\n}", "python": "class MyQueue:\n    def __init__(self):\n        self.stack1 = []\n        self.stack2 = []\n\n    def push(self, x: int) -> None:\n        self.stack1.append(x)\n\n    def pop(self) -> int:\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        return self.stack2.pop()\n\n    def peek(self) -> int:\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        return self.stack2[-1]\n\n    def empty(self) -> bool:\n        return not self.stack1 and not self.stack2"}', '[{"input": "push(1), push(2), peek(), pop(), empty()", "hidden": false, "expected": "null, null, 1, 1, false"}, {"input": "push(1), pop(), empty()", "hidden": false, "expected": "null, 1, true"}, {"input": "push(1), push(2), push(3), pop(), pop(), pop(), empty()", "hidden": true, "expected": "null, null, null, 1, 2, 3, true"}]', 170, 2);
INSERT INTO public.puzzles VALUES (2028, 'Binary Tree Preorder Traversal', 'Return preorder traversal of binary tree', 'easy', 34, 130, 1, 'Given the root of a binary tree, return the preorder traversal of its nodes'' values.', '[{"input": "[1,null,2,3]", "output": "[1,2,3]", "explanation": ""}, {"input": "[]", "output": "[]", "explanation": ""}, {"input": "[1]", "output": "[1]", "explanation": ""}]', 'The number of nodes in the tree is in the range [0, 100]', '["Use recursion or stack", "Root -> Left -> Right"]', '{"c": "struct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n};\n\nint* preorderTraversal(struct TreeNode* root, int* returnSize) {\n    // Your code here\n    return NULL;\n}", "java": "public class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\nclass Solution {\n    public List<Integer> preorderTraversal(TreeNode root) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef preorder_traversal(root):\n    # Your code here\n    return []"}', '{"c": "void preorderHelper(struct TreeNode* root, int* result, int* index) {\n    if (!root) return;\n    \n    result[(*index)++] = root->val;\n    preorderHelper(root->left, result, index);\n    preorderHelper(root->right, result, index);\n}\n\nint* preorderTraversal(struct TreeNode* root, int* returnSize) {\n    int* result = malloc(100 * sizeof(int));\n    *returnSize = 0;\n    \n    preorderHelper(root, result, returnSize);\n    \n    return result;\n}", "java": "class Solution {\n    public List<Integer> preorderTraversal(TreeNode root) {\n        List<Integer> result = new ArrayList<>();\n        preorderHelper(root, result);\n        return result;\n    }\n    \n    private void preorderHelper(TreeNode root, List<Integer> result) {\n        if (root == null) return;\n        \n        result.add(root.val);\n        preorderHelper(root.left, result);\n        preorderHelper(root.right, result);\n    }\n}", "python": "def preorder_traversal(root):\n    def preorder_helper(node, result):\n        if not node:\n            return\n        \n        result.append(node.val)\n        preorder_helper(node.left, result)\n        preorder_helper(node.right, result)\n    \n    result = []\n    preorder_helper(root, result)\n    return result"}', '[{"input": "[1,null,2,3]", "hidden": false, "expected": "[1,2,3]"}, {"input": "[]", "hidden": false, "expected": "[]"}, {"input": "[1]", "hidden": true, "expected": "[1]"}]', 175, 1);
INSERT INTO public.puzzles VALUES (2034, 'Binary Tree Postorder Traversal', 'Return postorder traversal of binary tree', 'easy', 34, 130, 1, 'Given the root of a binary tree, return the postorder traversal of its nodes'' values.', '[{"input": "[1,null,2,3]", "output": "[3,2,1]", "explanation": ""}, {"input": "[]", "output": "[]", "explanation": ""}, {"input": "[1]", "output": "[1]", "explanation": ""}]', 'The number of nodes in the tree is in the range [0, 100]', '["Use recursion or stack", "Left -> Right -> Root"]', '{"c": "struct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n};\n\nint* postorderTraversal(struct TreeNode* root, int* returnSize) {\n    // Your code here\n    return NULL;\n}", "java": "public class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\nclass Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        // Your code here\n        return new ArrayList<>();\n    }\n}", "python": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef postorder_traversal(root):\n    # Your code here\n    return []"}', '{"c": "void postorderHelper(struct TreeNode* root, int* result, int* index) {\n    if (!root) return;\n    \n    postorderHelper(root->left, result, index);\n    postorderHelper(root->right, result, index);\n    result[(*index)++] = root->val;\n}\n\nint* postorderTraversal(struct TreeNode* root, int* returnSize) {\n    int* result = malloc(100 * sizeof(int));\n    *returnSize = 0;\n    \n    postorderHelper(root, result, returnSize);\n    \n    return result;\n}", "java": "class Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        List<Integer> result = new ArrayList<>();\n        postorderHelper(root, result);\n        return result;\n    }\n    \n    private void postorderHelper(TreeNode root, List<Integer> result) {\n        if (root == null) return;\n        \n        postorderHelper(root.left, result);\n        postorderHelper(root.right, result);\n        result.add(root.val);\n    }\n}", "python": "def postorder_traversal(root):\n    def postorder_helper(node, result):\n        if not node:\n            return\n        \n        postorder_helper(node.left, result)\n        postorder_helper(node.right, result)\n        result.append(node.val)\n    \n    result = []\n    postorder_helper(root, result)\n    return result"}', '[{"input": "[1,null,2,3]", "hidden": false, "expected": "[3,2,1]"}, {"input": "[]", "hidden": false, "expected": "[]"}, {"input": "[1]", "hidden": true, "expected": "[1]"}]', 184, 1);
INSERT INTO public.puzzles VALUES (2042, 'Convert Sorted Array to Binary Search Tree', 'Convert sorted array to balanced BST', 'easy', 34, 150, 1, 'Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.', '[{"input": "[-10,-3,0,5,9]", "output": "[0,-3,9,-10,null,5]", "explanation": "[0,-10,5,null,-3,null,9] is also accepted."}, {"input": "[1,3]", "output": "[3,1] or [1,null,3]", "explanation": "[1,null,3] and [3,1] are both height-balanced BSTs."}]', '1 <= nums.length <= 10^4', '["Use divide and conquer", "Choose middle element as root"]', '{"c": "struct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n};\n\nstruct TreeNode* sortedArrayToBST(int* nums, int numsSize) {\n    // Your code here\n    return NULL;\n}", "java": "public class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    TreeNode() {}\n    TreeNode(int val) { this.val = val; }\n    TreeNode(int val, TreeNode left, TreeNode right) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n}\n\nclass Solution {\n    public TreeNode sortedArrayToBST(int[] nums) {\n        // Your code here\n        return null;\n    }\n}", "python": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef sorted_array_to_bst(nums):\n    # Your code here\n    return None"}', '{"c": "struct TreeNode* helper(int* nums, int left, int right) {\n    if (left > right) return NULL;\n    \n    int mid = left + (right - left) / 2;\n    struct TreeNode* root = malloc(sizeof(struct TreeNode));\n    root->val = nums[mid];\n    \n    root->left = helper(nums, left, mid - 1);\n    root->right = helper(nums, mid + 1, right);\n    \n    return root;\n}\n\nstruct TreeNode* sortedArrayToBST(int* nums, int numsSize) {\n    return helper(nums, 0, numsSize - 1);\n}", "java": "class Solution {\n    public TreeNode sortedArrayToBST(int[] nums) {\n        return helper(nums, 0, nums.length - 1);\n    }\n    \n    private TreeNode helper(int[] nums, int left, int right) {\n        if (left > right) return null;\n        \n        int mid = left + (right - left) / 2;\n        TreeNode root = new TreeNode(nums[mid]);\n        \n        root.left = helper(nums, left, mid - 1);\n        root.right = helper(nums, mid + 1, right);\n        \n        return root;\n    }\n}", "python": "def sorted_array_to_bst(nums):\n    def helper(left, right):\n        if left > right:\n            return None\n        \n        mid = (left + right) // 2\n        root = TreeNode(nums[mid])\n        \n        root.left = helper(left, mid - 1)\n        root.right = helper(mid + 1, right)\n        \n        return root\n    \n    return helper(0, len(nums) - 1)"}', '[{"input": "[-10,-3,0,5,9]", "hidden": false, "expected": "[0,-3,9,-10,null,5]"}, {"input": "[1,3]", "hidden": false, "expected": "[3,1]"}, {"input": "[1]", "hidden": true, "expected": "[1]"}]', 196, 2);
INSERT INTO public.puzzles VALUES (2046, 'Happy Number', 'Determine if number is happy', 'easy', 32, 120, 1, 'Write an algorithm to determine if a number n is happy. A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy.', '[{"input": "19", "output": "true", "explanation": "1¬≤ + 9¬≤ = 82, 8¬≤ + 2¬≤ = 68, 6¬≤ + 8¬≤ = 100, 1¬≤ + 0¬≤ + 0¬≤ = 1"}, {"input": "2", "output": "false", "explanation": ""}]', '1 <= n <= 2^31 - 1', '["Use cycle detection", "Track seen numbers"]', '{"c": "bool isHappy(int n) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean isHappy(int n) {\n        // Your code here\n        return false;\n    }\n}", "python": "def is_happy(n):\n    # Your code here\n    return False"}', '{"c": "int getSumOfSquares(int n) {\n    int sum = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        sum += digit * digit;\n        n /= 10;\n    }\n    return sum;\n}\n\nbool isHappy(int n) {\n    int slow = n, fast = n;\n    \n    do {\n        slow = getSumOfSquares(slow);\n        fast = getSumOfSquares(getSumOfSquares(fast));\n    } while (slow != fast);\n    \n    return slow == 1;\n}", "java": "class Solution {\n    public boolean isHappy(int n) {\n        Set<Integer> seen = new HashSet<>();\n        \n        while (n != 1 && !seen.contains(n)) {\n            seen.add(n);\n            n = getSumOfSquares(n);\n        }\n        \n        return n == 1;\n    }\n    \n    private int getSumOfSquares(int n) {\n        int sum = 0;\n        while (n > 0) {\n            int digit = n % 10;\n            sum += digit * digit;\n            n /= 10;\n        }\n        return sum;\n    }\n}", "python": "def is_happy(n):\n    def get_sum_of_squares(num):\n        total = 0\n        while num > 0:\n            digit = num % 10\n            total += digit * digit\n            num //= 10\n        return total\n    \n    seen = set()\n    while n != 1 and n not in seen:\n        seen.add(n)\n        n = get_sum_of_squares(n)\n    \n    return n == 1"}', '[{"input": "19", "hidden": false, "expected": "true"}, {"input": "2", "hidden": false, "expected": "false"}, {"input": "7", "hidden": true, "expected": "true"}]', 200, 2);
INSERT INTO public.puzzles VALUES (2047, 'Container With Most Water', 'Find two lines that form container with most water', 'medium', 33, 200, 2, 'You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]). Find two lines that together with the x-axis form a container that can hold the most water.', '[{"input": "[1,8,6,2,5,4,8,3,7]", "output": "49", "explanation": "The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water the container can contain is 49."}, {"input": "[1,1]", "output": "1", "explanation": ""}]', 'n >= 2, 0 <= height[i] <= 3 * 10^4', '["Use two pointers", "Move pointer with smaller height"]', '{"c": "int maxArea(int* height, int heightSize) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int maxArea(int[] height) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def max_area(height):\n    # Your code here\n    return 0"}', '{"c": "int maxArea(int* height, int heightSize) {\n    int left = 0, right = heightSize - 1;\n    int maxWater = 0;\n    \n    while (left < right) {\n        int width = right - left;\n        int h = height[left] < height[right] ? height[left] : height[right];\n        int area = width * h;\n        \n        if (area > maxWater) {\n            maxWater = area;\n        }\n        \n        if (height[left] < height[right]) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n    \n    return maxWater;\n}", "java": "class Solution {\n    public int maxArea(int[] height) {\n        int left = 0, right = height.length - 1;\n        int maxWater = 0;\n        \n        while (left < right) {\n            int width = right - left;\n            int h = Math.min(height[left], height[right]);\n            maxWater = Math.max(maxWater, width * h);\n            \n            if (height[left] < height[right]) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n        \n        return maxWater;\n    }\n}", "python": "def max_area(height):\n    left, right = 0, len(height) - 1\n    max_water = 0\n    \n    while left < right:\n        width = right - left\n        h = min(height[left], height[right])\n        max_water = max(max_water, width * h)\n        \n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    \n    return max_water"}', '[{"input": "[1,8,6,2,5,4,8,3,7]", "hidden": false, "expected": "49"}, {"input": "[1,1]", "hidden": false, "expected": "1"}, {"input": "[4,3,2,1,4]", "hidden": true, "expected": "16"}]', 201, 3);
INSERT INTO public.puzzles VALUES (2049, 'Excel Sheet Column Number', 'Convert Excel column title to number', 'easy', 32, 100, 1, 'Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.', '[{"input": "\"A\"", "output": "1", "explanation": ""}, {"input": "\"AB\"", "output": "28", "explanation": ""}, {"input": "\"ZY\"", "output": "701", "explanation": ""}]', '1 <= columnTitle.length <= 7', '["Think base-26 conversion", "A=1, B=2, etc."]', '{"c": "int titleToNumber(char* columnTitle) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int titleToNumber(String columnTitle) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def title_to_number(column_title):\n    # Your code here\n    return 0"}', '{"c": "int titleToNumber(char* columnTitle) {\n    int result = 0;\n    int len = strlen(columnTitle);\n    \n    for (int i = 0; i < len; i++) {\n        result = result * 26 + (columnTitle[i] - ''A'' + 1);\n    }\n    \n    return result;\n}", "java": "class Solution {\n    public int titleToNumber(String columnTitle) {\n        int result = 0;\n        \n        for (char c : columnTitle.toCharArray()) {\n            result = result * 26 + (c - ''A'' + 1);\n        }\n        \n        return result;\n    }\n}", "python": "def title_to_number(column_title):\n    result = 0\n    \n    for char in column_title:\n        result = result * 26 + (ord(char) - ord(''A'') + 1)\n    \n    return result"}', '[{"input": "\"A\"", "hidden": false, "expected": "1"}, {"input": "\"AB\"", "hidden": false, "expected": "28"}, {"input": "\"ZY\"", "hidden": true, "expected": "701"}]', 203, 1);
INSERT INTO public.puzzles VALUES (2050, 'Jump Game', 'Determine if you can reach the last index', 'medium', 33, 190, 2, 'You are given an integer array nums. You are initially positioned at the array''s first index, and each element in the array represents your maximum jump length at that position. Return true if you can reach the last index, or false otherwise.', '[{"input": "[2,3,1,1,4]", "output": "true", "explanation": "Jump 1 step from index 0 to 1, then 3 steps to the last index."}, {"input": "[3,2,1,0,4]", "output": "false", "explanation": "You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index."}]', '1 <= nums.length <= 10^4', '["Use greedy approach", "Track maximum reachable position"]', '{"c": "bool canJump(int* nums, int numsSize) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean canJump(int[] nums) {\n        // Your code here\n        return false;\n    }\n}", "python": "def can_jump(nums):\n    # Your code here\n    return False"}', '{"c": "bool canJump(int* nums, int numsSize) {\n    int maxReach = 0;\n    \n    for (int i = 0; i < numsSize; i++) {\n        if (i > maxReach) return false;\n        \n        int newReach = i + nums[i];\n        if (newReach > maxReach) {\n            maxReach = newReach;\n        }\n        \n        if (maxReach >= numsSize - 1) return true;\n    }\n    \n    return true;\n}", "java": "class Solution {\n    public boolean canJump(int[] nums) {\n        int maxReach = 0;\n        \n        for (int i = 0; i < nums.length; i++) {\n            if (i > maxReach) return false;\n            \n            maxReach = Math.max(maxReach, i + nums[i]);\n            \n            if (maxReach >= nums.length - 1) return true;\n        }\n        \n        return true;\n    }\n}", "python": "def can_jump(nums):\n    max_reach = 0\n    \n    for i, jump in enumerate(nums):\n        if i > max_reach:\n            return False\n        \n        max_reach = max(max_reach, i + jump)\n        \n        if max_reach >= len(nums) - 1:\n            return True\n    \n    return True"}', '[{"input": "[2,3,1,1,4]", "hidden": false, "expected": "true"}, {"input": "[3,2,1,0,4]", "hidden": false, "expected": "false"}, {"input": "[0]", "hidden": true, "expected": "true"}]', 204, 3);
INSERT INTO public.puzzles VALUES (2052, 'Count and Say', 'Generate the nth term of count-and-say sequence', 'medium', 32, 180, 2, 'The count-and-say sequence is a sequence of digit strings defined by the recursive formula: countAndSay(1) = "1", countAndSay(n) is the way you would "say" the digit string from countAndSay(n-1), which is then converted into a different digit string.', '[{"input": "1", "output": "\"1\"", "explanation": ""}, {"input": "4", "output": "\"1211\"", "explanation": "countAndSay(1) = \"1\", countAndSay(2) = say \"1\" = one 1 = \"11\", countAndSay(3) = say \"11\" = two 1s = \"21\", countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\""}]', '1 <= n <= 30', '["Count consecutive characters", "Build string iteratively"]', '{"c": "char* countAndSay(int n) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public String countAndSay(int n) {\n        // Your code here\n        return \"\";\n    }\n}", "python": "def count_and_say(n):\n    # Your code here\n    return \"\""}', '{"c": "char* countAndSay(int n) {\n    char* result = malloc(10000 * sizeof(char));\n    strcpy(result, \"1\");\n    \n    for (int i = 1; i < n; i++) {\n        char* temp = malloc(10000 * sizeof(char));\n        int tempIndex = 0;\n        int len = strlen(result);\n        \n        for (int j = 0; j < len; ) {\n            char current = result[j];\n            int count = 1;\n            \n            while (j + count < len && result[j + count] == current) {\n                count++;\n            }\n            \n            tempIndex += sprintf(temp + tempIndex, \"%d%c\", count, current);\n            j += count;\n        }\n        \n        free(result);\n        result = temp;\n    }\n    \n    return result;\n}", "java": "class Solution {\n    public String countAndSay(int n) {\n        String result = \"1\";\n        \n        for (int i = 1; i < n; i++) {\n            StringBuilder sb = new StringBuilder();\n            \n            for (int j = 0; j < result.length(); ) {\n                char current = result.charAt(j);\n                int count = 1;\n                \n                while (j + count < result.length() && result.charAt(j + count) == current) {\n                    count++;\n                }\n                \n                sb.append(count).append(current);\n                j += count;\n            }\n            \n            result = sb.toString();\n        }\n        \n        return result;\n    }\n}", "python": "def count_and_say(n):\n    result = \"1\"\n    \n    for _ in range(n - 1):\n        new_result = []\n        i = 0\n        \n        while i < len(result):\n            current = result[i]\n            count = 1\n            \n            while i + count < len(result) and result[i + count] == current:\n                count += 1\n            \n            new_result.append(str(count) + current)\n            i += count\n        \n        result = ''''.join(new_result)\n    \n    return result"}', '[{"input": "1", "hidden": false, "expected": "\"1\""}, {"input": "4", "hidden": false, "expected": "\"1211\""}, {"input": "5", "hidden": true, "expected": "\"111221\""}]', 206, 3);
INSERT INTO public.puzzles VALUES (2053, 'Rotate Image', 'Rotate matrix 90 degrees clockwise in-place', 'medium', 33, 200, 2, 'You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.', '[{"input": "[[1,2,3],[4,5,6],[7,8,9]]", "output": "[[7,4,1],[8,5,2],[9,6,3]]", "explanation": ""}, {"input": "[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]", "output": "[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]", "explanation": ""}]', 'n == matrix.length == matrix[i].length', '["Transpose then reverse rows", "Or rotate layer by layer"]', '{"c": "void rotate(int** matrix, int matrixSize, int* matrixColSize) {\n    // Your code here\n}", "java": "class Solution {\n    public void rotate(int[][] matrix) {\n        // Your code here\n    }\n}", "python": "def rotate(matrix):\n    # Your code here\n    pass"}', '{"c": "void rotate(int** matrix, int matrixSize, int* matrixColSize) {\n    int n = matrixSize;\n    \n    // Transpose the matrix\n    for (int i = 0; i < n; i++) {\n        for (int j = i; j < n; j++) {\n            int temp = matrix[i][j];\n            matrix[i][j] = matrix[j][i];\n            matrix[j][i] = temp;\n        }\n    }\n    \n    // Reverse each row\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n / 2; j++) {\n            int temp = matrix[i][j];\n            matrix[i][j] = matrix[i][n - 1 - j];\n            matrix[i][n - 1 - j] = temp;\n        }\n    }\n}", "java": "class Solution {\n    public void rotate(int[][] matrix) {\n        int n = matrix.length;\n        \n        // Transpose the matrix\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = temp;\n            }\n        }\n        \n        // Reverse each row\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n / 2; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[i][n - 1 - j];\n                matrix[i][n - 1 - j] = temp;\n            }\n        }\n    }\n}", "python": "def rotate(matrix):\n    n = len(matrix)\n    \n    # Transpose the matrix\n    for i in range(n):\n        for j in range(i, n):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    \n    # Reverse each row\n    for i in range(n):\n        matrix[i].reverse()"}', '[{"input": "[[1,2,3],[4,5,6],[7,8,9]]", "hidden": false, "expected": "[[7,4,1],[8,5,2],[9,6,3]]"}, {"input": "[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]", "hidden": false, "expected": "[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]"}, {"input": "[[1,2],[3,4]]", "hidden": true, "expected": "[[3,1],[4,2]]"}]', 207, 3);
INSERT INTO public.puzzles VALUES (2055, 'Add Binary', 'Add two binary strings', 'easy', 32, 110, 1, 'Given two binary strings a and b, return their sum as a binary string.', '[{"input": "a = \"11\", b = \"1\"", "output": "\"100\"", "explanation": ""}, {"input": "a = \"1010\", b = \"1011\"", "output": "\"10101\"", "explanation": ""}]', '1 <= a.length, b.length <= 10^4', '["Process from right to left", "Handle carry properly"]', '{"c": "char* addBinary(char* a, char* b) {\n    // Your code here\n    return NULL;\n}", "java": "class Solution {\n    public String addBinary(String a, String b) {\n        // Your code here\n        return \"\";\n    }\n}", "python": "def add_binary(a, b):\n    # Your code here\n    return \"\""}', '{"c": "char* addBinary(char* a, char* b) {\n    int lenA = strlen(a);\n    int lenB = strlen(b);\n    int maxLen = lenA > lenB ? lenA : lenB;\n    \n    char* result = malloc((maxLen + 2) * sizeof(char));\n    int carry = 0;\n    int i = lenA - 1, j = lenB - 1, k = 0;\n    \n    while (i >= 0 || j >= 0 || carry) {\n        int sum = carry;\n        \n        if (i >= 0) {\n            sum += a[i] - ''0'';\n            i--;\n        }\n        \n        if (j >= 0) {\n            sum += b[j] - ''0'';\n            j--;\n        }\n        \n        result[k++] = (sum % 2) + ''0'';\n        carry = sum / 2;\n    }\n    \n    result[k] = ''\\0'';\n    \n    // Reverse the result\n    for (int left = 0, right = k - 1; left < right; left++, right--) {\n        char temp = result[left];\n        result[left] = result[right];\n        result[right] = temp;\n    }\n    \n    return result;\n}", "java": "class Solution {\n    public String addBinary(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        int carry = 0;\n        int i = a.length() - 1, j = b.length() - 1;\n        \n        while (i >= 0 || j >= 0 || carry > 0) {\n            int sum = carry;\n            \n            if (i >= 0) {\n                sum += a.charAt(i) - ''0'';\n                i--;\n            }\n            \n            if (j >= 0) {\n                sum += b.charAt(j) - ''0'';\n                j--;\n            }\n            \n            result.append(sum % 2);\n            carry = sum / 2;\n        }\n        \n        return result.reverse().toString();\n    }\n}", "python": "def add_binary(a, b):\n    result = []\n    carry = 0\n    i, j = len(a) - 1, len(b) - 1\n    \n    while i >= 0 or j >= 0 or carry:\n        total = carry\n        \n        if i >= 0:\n            total += int(a[i])\n            i -= 1\n        \n        if j >= 0:\n            total += int(b[j])\n            j -= 1\n        \n        result.append(str(total % 2))\n        carry = total // 2\n    \n    return ''''.join(reversed(result))"}', '[{"input": "\"11\", \"1\"", "hidden": false, "expected": "\"100\""}, {"input": "\"1010\", \"1011\"", "hidden": false, "expected": "\"10101\""}, {"input": "\"0\", \"0\"", "hidden": true, "expected": "\"0\""}]', 209, 1);
INSERT INTO public.puzzles VALUES (2056, 'Word Break', 'Check if string can be segmented using dictionary words', 'medium', 33, 210, 2, 'Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words. Note that the same word in the dictionary may be reused multiple times in the segmentation.', '[{"input": "s = \"leetcode\", wordDict = [\"leet\",\"code\"]", "output": "true", "explanation": "Return true because \"leetcode\" can be segmented as \"leet code\"."}, {"input": "s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]", "output": "true", "explanation": "Return true because \"applepenapple\" can be segmented as \"apple pen apple\". Note that you are allowed to reuse a dictionary word."}, {"input": "s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]", "output": "false", "explanation": ""}]', '1 <= s.length <= 300', '["Use dynamic programming", "Check if substring exists in dictionary"]', '{"c": "bool wordBreak(char* s, char** wordDict, int wordDictSize) {\n    // Your code here\n    return false;\n}", "java": "class Solution {\n    public boolean wordBreak(String s, List<String> wordDict) {\n        // Your code here\n        return false;\n    }\n}", "python": "def word_break(s, word_dict):\n    # Your code here\n    return False"}', '{"c": "bool wordBreak(char* s, char** wordDict, int wordDictSize) {\n    int len = strlen(s);\n    bool* dp = calloc(len + 1, sizeof(bool));\n    dp[0] = true;\n    \n    for (int i = 1; i <= len; i++) {\n        for (int j = 0; j < i; j++) {\n            if (dp[j]) {\n                // Check if substring s[j:i] is in wordDict\n                for (int k = 0; k < wordDictSize; k++) {\n                    int wordLen = strlen(wordDict[k]);\n                    if (wordLen == i - j && strncmp(s + j, wordDict[k], wordLen) == 0) {\n                        dp[i] = true;\n                        break;\n                    }\n                }\n                if (dp[i]) break;\n            }\n        }\n    }\n    \n    bool result = dp[len];\n    free(dp);\n    return result;\n}", "java": "class Solution {\n    public boolean wordBreak(String s, List<String> wordDict) {\n        Set<String> wordSet = new HashSet<>(wordDict);\n        boolean[] dp = new boolean[s.length() + 1];\n        dp[0] = true;\n        \n        for (int i = 1; i <= s.length(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (dp[j] && wordSet.contains(s.substring(j, i))) {\n                    dp[i] = true;\n                    break;\n                }\n            }\n        }\n        \n        return dp[s.length()];\n    }\n}", "python": "def word_break(s, word_dict):\n    word_set = set(word_dict)\n    dp = [False] * (len(s) + 1)\n    dp[0] = True\n    \n    for i in range(1, len(s) + 1):\n        for j in range(i):\n            if dp[j] and s[j:i] in word_set:\n                dp[i] = True\n                break\n    \n    return dp[len(s)]"}', '[{"input": "\"leetcode\", [\"leet\",\"code\"]", "hidden": false, "expected": "true"}, {"input": "\"applepenapple\", [\"apple\",\"pen\"]", "hidden": false, "expected": "true"}, {"input": "\"catsandog\", [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]", "hidden": true, "expected": "false"}]', 210, 3);
INSERT INTO public.puzzles VALUES (2057, 'Sqrt(x)', 'Compute and return the square root of x', 'easy', 32, 110, 1, 'Given a non-negative integer x, compute and return the square root of x. Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.', '[{"input": "4", "output": "2", "explanation": "The square root of 4 is 2, so we return 2."}, {"input": "8", "output": "2", "explanation": "The square root of 8 is 2.828..., and since the decimal part is truncated, 2 is returned."}]', '0 <= x <= 2^31 - 1', '["Use binary search", "Find largest integer whose square <= x"]', '{"c": "int mySqrt(int x) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int mySqrt(int x) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def my_sqrt(x):\n    # Your code here\n    return 0"}', '{"c": "int mySqrt(int x) {\n    if (x == 0) return 0;\n    \n    long left = 1, right = x;\n    \n    while (left <= right) {\n        long mid = left + (right - left) / 2;\n        long square = mid * mid;\n        \n        if (square == x) {\n            return (int)mid;\n        } else if (square < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return (int)right;\n}", "java": "class Solution {\n    public int mySqrt(int x) {\n        if (x == 0) return 0;\n        \n        long left = 1, right = x;\n        \n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            long square = mid * mid;\n            \n            if (square == x) {\n                return (int)mid;\n            } else if (square < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        \n        return (int)right;\n    }\n}", "python": "def my_sqrt(x):\n    if x == 0:\n        return 0\n    \n    left, right = 1, x\n    \n    while left <= right:\n        mid = (left + right) // 2\n        square = mid * mid\n        \n        if square == x:\n            return mid\n        elif square < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return right"}', '[{"input": "4", "hidden": false, "expected": "2"}, {"input": "8", "hidden": false, "expected": "2"}, {"input": "1", "hidden": true, "expected": "1"}]', 250, 1);
INSERT INTO public.puzzles VALUES (2058, 'First Missing Positive', 'Find the smallest missing positive integer', 'hard', 33, 300, 3, 'Given an unsorted integer array nums, return the smallest missing positive integer. You must implement an algorithm that runs in O(n) time and uses constant extra space.', '[{"input": "[1,2,0]", "output": "3", "explanation": ""}, {"input": "[3,4,-1,1]", "output": "2", "explanation": ""}, {"input": "[7,8,9,11,12]", "output": "1", "explanation": ""}]', '1 <= nums.length <= 5 * 10^5', '["Use array indices as hash", "Place each number at its correct position"]', '{"c": "int firstMissingPositive(int* nums, int numsSize) {\n    // Your code here\n    return 1;\n}", "java": "class Solution {\n    public int firstMissingPositive(int[] nums) {\n        // Your code here\n        return 1;\n    }\n}", "python": "def first_missing_positive(nums):\n    # Your code here\n    return 1"}', '{"c": "int firstMissingPositive(int* nums, int numsSize) {\n    // Place each positive number at its correct position\n    for (int i = 0; i < numsSize; i++) {\n        while (nums[i] > 0 && nums[i] <= numsSize && nums[nums[i] - 1] != nums[i]) {\n            // Swap nums[i] with nums[nums[i] - 1]\n            int temp = nums[nums[i] - 1];\n            nums[nums[i] - 1] = nums[i];\n            nums[i] = temp;\n        }\n    }\n    \n    // Find the first missing positive\n    for (int i = 0; i < numsSize; i++) {\n        if (nums[i] != i + 1) {\n            return i + 1;\n        }\n    }\n    \n    return numsSize + 1;\n}", "java": "class Solution {\n    public int firstMissingPositive(int[] nums) {\n        int n = nums.length;\n        \n        // Place each positive number at its correct position\n        for (int i = 0; i < n; i++) {\n            while (nums[i] > 0 && nums[i] <= n && nums[nums[i] - 1] != nums[i]) {\n                // Swap nums[i] with nums[nums[i] - 1]\n                int temp = nums[nums[i] - 1];\n                nums[nums[i] - 1] = nums[i];\n                nums[i] = temp;\n            }\n        }\n        \n        // Find the first missing positive\n        for (int i = 0; i < n; i++) {\n            if (nums[i] != i + 1) {\n                return i + 1;\n            }\n        }\n        \n        return n + 1;\n    }\n}", "python": "def first_missing_positive(nums):\n    n = len(nums)\n    \n    # Place each positive number at its correct position\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            # Swap nums[i] with nums[nums[i] - 1]\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n    \n    # Find the first missing positive\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n    \n    return n + 1"}', '[{"input": "[1,2,0]", "hidden": false, "expected": "3"}, {"input": "[3,4,-1,1]", "hidden": false, "expected": "2"}, {"input": "[7,8,9,11,12]", "hidden": true, "expected": "1"}]', 251, 5);
INSERT INTO public.puzzles VALUES (2059, 'Trapping Rain Water', 'Compute how much water can be trapped', 'hard', 33, 320, 3, 'Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.', '[{"input": "[0,1,0,2,1,0,1,3,2,1,2,1]", "output": "6", "explanation": "The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped."}, {"input": "[4,2,0,3,2,5]", "output": "9", "explanation": ""}]', 'n == height.length, 1 <= n <= 2 * 10^4', '["Use two pointers approach", "Track left and right maximum heights"]', '{"c": "int trap(int* height, int heightSize) {\n    // Your code here\n    return 0;\n}", "java": "class Solution {\n    public int trap(int[] height) {\n        // Your code here\n        return 0;\n    }\n}", "python": "def trap(height):\n    # Your code here\n    return 0"}', '{"c": "int trap(int* height, int heightSize) {\n    if (heightSize <= 2) return 0;\n    \n    int left = 0, right = heightSize - 1;\n    int leftMax = 0, rightMax = 0;\n    int water = 0;\n    \n    while (left < right) {\n        if (height[left] < height[right]) {\n            if (height[left] >= leftMax) {\n                leftMax = height[left];\n            } else {\n                water += leftMax - height[left];\n            }\n            left++;\n        } else {\n            if (height[right] >= rightMax) {\n                rightMax = height[right];\n            } else {\n                water += rightMax - height[right];\n            }\n            right--;\n        }\n    }\n    \n    return water;\n}", "java": "class Solution {\n    public int trap(int[] height) {\n        if (height.length <= 2) return 0;\n        \n        int left = 0, right = height.length - 1;\n        int leftMax = 0, rightMax = 0;\n        int water = 0;\n        \n        while (left < right) {\n            if (height[left] < height[right]) {\n                if (height[left] >= leftMax) {\n                    leftMax = height[left];\n                } else {\n                    water += leftMax - height[left];\n                }\n                left++;\n            } else {\n                if (height[right] >= rightMax) {\n                    rightMax = height[right];\n                } else {\n                    water += rightMax - height[right];\n                }\n                right--;\n            }\n        }\n        \n        return water;\n    }\n}", "python": "def trap(height):\n    if len(height) <= 2:\n        return 0\n    \n    left, right = 0, len(height) - 1\n    left_max = right_max = 0\n    water = 0\n    \n    while left < right:\n        if height[left] < height[right]:\n            if height[left] >= left_max:\n                left_max = height[left]\n            else:\n                water += left_max - height[left]\n            left += 1\n        else:\n            if height[right] >= right_max:\n                right_max = height[right]\n            else:\n                water += right_max - height[right]\n            right -= 1\n    \n    return water"}', '[{"input": "[0,1,0,2,1,0,1,3,2,1,2,1]", "hidden": false, "expected": "6"}, {"input": "[4,2,0,3,2,5]", "hidden": false, "expected": "9"}, {"input": "[3,0,2,0,4]", "hidden": true, "expected": "7"}]', 252, 5);


--
-- Name: categories_id_seq; Type: SEQUENCE SET; Schema: public; Owner: neondb_owner
--

SELECT pg_catalog.setval('public.categories_id_seq', 34, true);


--
-- Name: puzzles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: neondb_owner
--

SELECT pg_catalog.setval('public.puzzles_id_seq', 2059, true);


--
-- PostgreSQL database dump complete
--

